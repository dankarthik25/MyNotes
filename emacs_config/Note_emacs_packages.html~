<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2023-03-13 Mon 07:57 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Emacs Configuration</title>
<meta name="author" content="karthik" />
<meta name="generator" content="Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
<link rel="icon" type="image/png" href="https://deepalgorithms.in/assets/icons/favicon.png">
<link rel="stylesheet" type="text/css" href="/home/karthik/mynotes/org2html/org-theme-collection/readtheorg-htmlize.css"/>
<link rel="stylesheet" type="text/css" href="/home/karthik/mynotes/org2html/org-theme-collection/readtheorg.css"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
<script type="text/javascript" src="/home/karthik/mynotes/org2html/org-theme-collection/jquery-stickytableheaders.js"></script>
<script type="text/javascript"  src="/home/karthik/mynotes/org2html/org-theme-collection/readtheorg.js"></script>
</head>
<body>
<div id="content" class="content">
<h1 class="title">Emacs Configuration</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#org4117ee9">Preface</a></li>
<li><a href="#orgd3fc159">Startup Performance</a></li>
<li><a href="#orgd5edc22">Native Compilation</a></li>
<li><a href="#org510880a">System Settings</a></li>
<li><a href="#orgb988099">Package Management</a></li>
<li><a href="#orgc626ebb">Streamlined Configuration with setup.el</a>
<ul>
<li><a href="#org57597ff">:pkg</a></li>
<li><a href="#org965f28f">:delay</a></li>
<li><a href="#org45a0eff">:disabled</a></li>
<li><a href="#org9623b25">:load-after</a></li>
</ul>
</li>
<li><a href="#org44c6f29">Keep .emacs.d Clean</a></li>
<li><a href="#orgc5f9a53">Update Load Path</a></li>
<li><a href="#org91c9f1c">Default Coding System</a></li>
<li><a href="#org9660d0b">Server Mode</a></li>
<li><a href="#org2eb1d1e">Desktop Environment</a></li>
<li><a href="#org3c2f545">Keyboard Bindings</a>
<ul>
<li><a href="#orgb4d53c1">ESC Cancels All</a></li>
<li><a href="#orgf0c4753">Rebind C-u</a></li>
<li><a href="#orgbdc0d1c">Let's Be Evil</a></li>
<li><a href="#org35e3cc3">Keybinding Panel (which-key)</a></li>
<li><a href="#orgf367949">Simplify Leader Bindings (general.el)</a></li>
</ul>
</li>
<li><a href="#org6d651a8">General Configuration</a>
<ul>
<li><a href="#orgc062968">User Interface</a></li>
<li><a href="#org1f0024c">Theme</a></li>
<li><a href="#org6ba6533">Font</a>
<ul>
<li><a href="#orgf8d9772">Set the font</a></li>
<li><a href="#orgec07550">Enable proper Unicode glyph support</a></li>
<li><a href="#org4350fa4">Emojis in buffers</a></li>
</ul>
</li>
<li><a href="#org9de51d7">Mode Line</a>
<ul>
<li><a href="#orgf20153d">Basic Customization</a></li>
<li><a href="#orgdd65d4b">Enable Mode Diminishing</a></li>
<li><a href="#org3050f53">Doom Modeline</a></li>
</ul>
</li>
<li><a href="#orga187551">Workspaces</a></li>
<li><a href="#org333d7d0">Notifications</a></li>
<li><a href="#orga73960c">Auto-Saving Changed Files</a></li>
<li><a href="#org1f91396">Auto-Reverting Changed Files</a></li>
<li><a href="#orgade6e39">UI Toggles</a></li>
<li><a href="#org428995d"><span class="todo TODO">TODO</span> Highlight Matching Braces</a></li>
<li><a href="#org8d4c64d">Displaying World Time</a></li>
<li><a href="#orgd06b3d8">Pinentry</a></li>
<li><a href="#org2c8c680">TRAMP</a></li>
<li><a href="#orga5dbd59">Emacs as External Editor</a></li>
</ul>
</li>
<li><a href="#org8735d9b">Editing Configuration</a>
<ul>
<li><a href="#org5edad14">Tab Widths</a></li>
<li><a href="#org012bdc0">Use spaces instead of tabs for indentation</a></li>
<li><a href="#org78b6d57">Commenting Lines</a></li>
<li><a href="#org83515b2">Automatically clean whitespace</a></li>
<li><a href="#org59681d0"><span class="todo TODO">TODO</span> Use Parinfer for Lispy languages</a></li>
<li><a href="#orga342f37">Origami.el for Folding</a></li>
</ul>
</li>
<li><a href="#org8879cf4">Configuration Files</a>
<ul>
<li><a href="#org931332c">Configuration file management with dotcrafter.el</a></li>
<li><a href="#org6716f32">Helpers</a></li>
<li><a href="#orgddcc8eb">Bindings</a></li>
</ul>
</li>
<li><a href="#org9e0e4b0">Stateful Keymaps with Hydra</a></li>
<li><a href="#orgdb8a6be">Completion System</a>
<ul>
<li><a href="#org84ac16a">Preserve Minibuffer History with savehist-mode</a></li>
<li><a href="#org9ce69bc">Completions with Vertico</a></li>
<li><a href="#orge665f53">Completions in Regions with Corfu</a></li>
<li><a href="#org00e3061">Improved Candidate Filtering with Orderless</a></li>
<li><a href="#orgbc87a3a">Consult Commands</a></li>
<li><a href="#org8115f08">Switching Directories with consult-dir</a></li>
<li><a href="#org0ca7a78">Completion Annotations with Marginalia</a></li>
<li><a href="#org11caed0">Completion Actions with Embark</a></li>
<li><a href="#org1107c81">Launching apps</a></li>
</ul>
</li>
<li><a href="#org88932f6">Jumping with Avy</a></li>
<li><a href="#org5c19c4d">Buffer Management with Bufler</a></li>
<li><a href="#orgfded392">Window Management</a>
<ul>
<li><a href="#org5da74a7">Frame Scaling / Zooming</a></li>
<li><a href="#orga1cfe96">Window Selection with ace-window</a></li>
<li><a href="#orgbfff3bb">Window History with winner-mode</a></li>
<li><a href="#org830eb31">Set Margins for Modes</a></li>
<li><a href="#orgbf300a3">Control Buffer Placement</a></li>
<li><a href="#org4f1577c">Taming Popups with Popper.el</a></li>
</ul>
</li>
<li><a href="#orgb556d0f">Credential Management</a></li>
<li><a href="#org958ed9e">File Browsing</a>
<ul>
<li><a href="#org00accdd">Dired</a></li>
<li><a href="#org3b461f3">Opening Files Externally</a></li>
</ul>
</li>
<li><a href="#org455c79f">Org Mode</a>
<ul>
<li><a href="#org9dd730b">Org Configuration</a></li>
<li><a href="#org03408f6">Fonts and Bullets</a></li>
<li><a href="#orgc3e9c32">Block Templates</a></li>
<li><a href="#org86315b1">Pomodoro</a></li>
<li><a href="#org67bd7c9">Protocol</a></li>
<li><a href="#org8c030bc">Bindings</a></li>
<li><a href="#org19b9c61">Update Table of Contents on Save</a></li>
<li><a href="#org0822f96">Calendar Sync</a></li>
<li><a href="#org971ec59">Reminders</a></li>
<li><a href="#org3137b29">Presentations</a>
<ul>
<li><a href="#org2a75ad5">org-present</a></li>
</ul>
</li>
<li><a href="#orgc19920a">Org Roam</a></li>
<li><a href="#orgcf3babe">Auto-show Markup Symbols</a></li>
</ul>
</li>
<li><a href="#orgb4e8694">Development</a>
<ul>
<li><a href="#orgf1d8309">Git</a>
<ul>
<li><a href="#org651c0c4">Magit</a></li>
<li><a href="#org3c889d5">Forge</a></li>
<li><a href="#orgbfb1c5f">magit-todos</a></li>
<li><a href="#org3791220">git-link</a></li>
<li><a href="#org34706e3"><span class="todo TODO">TODO</span> Git Gutter</a></li>
<li><a href="#orgd04700a">Send e-mail for Git patches</a></li>
</ul>
</li>
<li><a href="#org8a056ee">Projectile</a>
<ul>
<li><a href="#org9d38352">Initial Setup</a></li>
<li><a href="#org7bb528e">Project Configurations</a></li>
</ul>
</li>
<li><a href="#orgbbf17c4">Languages</a>
<ul>
<li><a href="#orgcd22843">Language Server Support</a></li>
<li><a href="#org3ef4b44">Debug Adapter Support</a></li>
<li><a href="#orgcd588a3">Meta Lisp</a></li>
<li><a href="#org9780c6b">Common Lisp</a></li>
<li><a href="#orga0b3e59">Scheme</a></li>
<li><a href="#org04a5183">TypeScript and JavaScript</a></li>
<li><a href="#orgf358c6c">C/C++</a></li>
<li><a href="#org0bc2656">Go</a></li>
<li><a href="#org606a966">Rust</a></li>
<li><a href="#orgd9ca27f">Emacs Lisp</a></li>
<li><a href="#orgaaa776e">Scheme</a></li>
<li><a href="#org8b2f179">Zig</a></li>
<li><a href="#orgb496ba4">Markdown</a></li>
<li><a href="#org1b5b642">HTML</a></li>
<li><a href="#orga40c1a0">YAML</a></li>
<li><a href="#org2129157">ADL</a></li>
</ul>
</li>
<li><a href="#org2a407e0">Compilation</a></li>
<li><a href="#orgc8ce5fc">Productivity</a>
<ul>
<li><a href="#orga5fe25b">Syntax checking with Flycheck</a></li>
<li><a href="#org3edb34e">Snippets</a></li>
<li><a href="#org782fa69">Smart Parens</a></li>
<li><a href="#orge8b7b8e">Rainbow Delimiters</a></li>
<li><a href="#orgef71bcc">Rainbow Mode</a></li>
</ul>
</li>
<li><a href="#org12fe88c">Tools</a>
<ul>
<li><a href="#org6261747">Debbugs (mainly for Guix)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org85ba700">Game Development</a>
<ul>
<li><a href="#orge601681">Substratic Forge</a></li>
</ul>
</li>
<li><a href="#org98f7960">Writing</a>
<ul>
<li><a href="#orgbd50fb0">Previewing Info files</a></li>
</ul>
</li>
<li><a href="#org7c8983b">Streaming</a>
<ul>
<li><a href="#org23f3174">obs-websocket</a></li>
<li><a href="#org03c5350">live-crafter.el</a></li>
</ul>
</li>
<li><a href="#org06e5e80">Applications</a>
<ul>
<li><a href="#orgf4bf32b">Binding Prefix</a></li>
<li><a href="#org12cd563">Mail</a></li>
<li><a href="#orgb59153f">Finance</a></li>
<li><a href="#orgb10e5cc">eshell</a>
<ul>
<li><a href="#orge0ebc5b">Configuration</a></li>
<li><a href="#orgf12690a">Shell Commands</a></li>
<li><a href="#org3d5636a">Visual Commands</a></li>
<li><a href="#org49dea79">Fish Completion</a></li>
<li><a href="#org1afe978">Command Highlighting</a></li>
<li><a href="#org9b7427a">History Autocompletion</a></li>
<li><a href="#org5ad6408">Toggling Eshell</a></li>
</ul>
</li>
<li><a href="#orgf14244e">vterm</a></li>
<li><a href="#orgf23e245">ediff</a></li>
<li><a href="#orgdfc0cd1">Chat</a>
<ul>
<li><a href="#orgf22d6dd">Tracking</a></li>
<li><a href="#org45db325">Telegram</a></li>
<li><a href="#orgc8a48d9">ERC</a></li>
</ul>
</li>
<li><a href="#orgc9e7a22">RSS with Elfeed</a></li>
<li><a href="#orgf28aac0">Media</a>
<ul>
<li><a href="#org1a1722f">mpv</a></li>
<li><a href="#org3e42756">EMMS</a></li>
</ul>
</li>
<li><a href="#org903685a">Gemini</a></li>
</ul>
</li>
<li><a href="#org6954f59">System Utilities</a>
<ul>
<li><a href="#org3eee888">Guix</a></li>
<li><a href="#orgb94c540">Daemons</a></li>
<li><a href="#orga6371e2">PulseAudio</a></li>
<li><a href="#org5142af5">Bluetooth</a></li>
<li><a href="#org5631a2c">Proced</a></li>
<li><a href="#org4e20a13">Docker</a></li>
</ul>
</li>
<li><a href="#org134c8eb">Runtime Performance</a></li>
<li><a href="#orga3e5168">Emacs Profile</a></li>
</ul>
</div>
</div>
<p>
source : <a href="https://github.com/daviwil/dotfiles/blob/master/Emacs.org">https://github.com/daviwil/dotfiles/blob/master/Emacs.org</a>
</p>
<div id="outline-container-org4117ee9" class="outline-2">
<h2 id="org4117ee9">Preface</h2>
<div class="outline-text-2" id="text-org4117ee9">
<p>
GNU Emacs isn't a text editor, it's the ultimate productivity environment for hackers.  This document contains the core parts of my Emacs configuration which drive the workflow I use every day.
</p>

<p>
If you're viewing this file on GitHub, I recommend using <a href="https://config.daviwil.com/emacs">my configuration website</a> instead for a better experience!
</p>

<p>
I recently rewrote my Emacs configuration to use <code>setup.el</code>, so if you want to see the older version that uses <code>use-package</code>, you can <a href="https://github.com/daviwil/dotfiles/blob/9776d65c4486f2fa08ec60a06e86ecb6d2c40085/Emacs.org">find it here</a>.
</p>

<p>
Other files in my dotfiles repo also contain Emacs Lisp code that get pulled in here:
</p>

<ul class="org-ul">
<li>[[./Desktop.org][Desktop Environment Configuration]</li>
<li>[[./Systems.org][System Configurations with Guix]</li>
<li>[[./Workflow.org][Productivity Workflow]</li>
<li>[[./Mail.org][Mail Configuration]</li>
</ul>
</div>
</div>


<div id="outline-container-orgd3fc159" class="outline-2">
<h2 id="orgd3fc159">Startup Performance</h2>
<div class="outline-text-2" id="text-orgd3fc159">
<p>
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
</p>

<p>
Also, turn on <code>lexical-binding</code> for the init file!
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">-*- lexical-binding: t; -*-</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">The default is 800 kilobytes.  Measured in bytes.</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> gc-cons-threshold <span style="color: #6c3163;">(</span>* 50 1000 1000<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Profile emacs startup</span>
<span style="color: #3a81c3;">(</span>add-hook 'emacs-startup-hook
          <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #2d9574;">()</span>
            <span style="color: #2d9574;">(</span>message <span style="color: #2d9574;">"*** Emacs loaded in %s seconds with %d garbage collections."</span>
                     <span style="color: #67b11d;">(</span>emacs-init-time <span style="color: #2d9574;">"%.2f"</span><span style="color: #67b11d;">)</span>
                     gcs-done<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgd5edc22" class="outline-2">
<h2 id="orgd5edc22">Native Compilation</h2>
<div class="outline-text-2" id="text-orgd5edc22">
<p>
I've started experimenting with the <code>native-comp</code> branch of Emacs for increased performance.  Here are some settings to tweak the behavior slightly:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Silence compiler warnings as they can be pretty disruptive</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> native-comp-async-report-warnings-errors nil<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set the right directory to store the native comp cache</span>
<span style="color: #3a81c3;">(</span>add-to-list 'native-comp-eln-load-path <span style="color: #6c3163;">(</span>expand-file-name <span style="color: #2d9574;">"eln-cache/"</span> user-emacs-directory<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org510880a" class="outline-2">
<h2 id="org510880a">System Settings</h2>
<div class="outline-text-2" id="text-org510880a">
<p>
Some parts of the configuration require knowledge of whether Emacs is running on a Guix system or in Termux on Android.  Also load system-specific settings from <code>per-system-settings.el</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>load-file <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/lisp/dw-settings.el"</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Load settings for the first time</span>
<span style="color: #3a81c3;">(</span>dw/load-system-settings<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">subr-x</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/is-termux
      <span style="color: #6c3163;">(</span>string-suffix-p <span style="color: #2d9574;">"Android"</span> <span style="color: #2d9574;">(</span>string-trim <span style="color: #67b11d;">(</span>shell-command-to-string <span style="color: #2d9574;">"uname -a"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/is-guix-system <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">and</span> <span style="color: #2d9574;">(</span>eq system-type 'gnu/linux<span style="color: #2d9574;">)</span>
                             <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">f</span><span style="color: #2d9574;">)</span>
                             <span style="color: #2d9574;">(</span>string-equal <span style="color: #67b11d;">(</span>f-read <span style="color: #2d9574;">"/etc/issue"</span><span style="color: #67b11d;">)</span>
                                           <span style="color: #2d9574;">"\nThis is the GNU system.  Welcome.\n"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgb988099" class="outline-2">
<h2 id="orgb988099">Package Management</h2>
<div class="outline-text-2" id="text-orgb988099">
<p>
I use Guix primarily to manage my Emacs packages, but some still require the use of an Emacs-based package manager.  I use straight.el for this purpose!
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">featurep</span> '<span style="color: #4e3163;">straight</span><span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Bootstrap straight.el</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">defvar</span> <span style="color: #715ab1;">bootstrap-version</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>bootstrap-file
         <span style="color: #b1951d;">(</span>expand-file-name <span style="color: #2d9574;">"straight/repos/straight.el/bootstrap.el"</span> user-emacs-directory<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>bootstrap-version 5<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> <span style="color: #67b11d;">(</span>file-exists-p bootstrap-file<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">with-current-buffer</span>
          <span style="color: #b1951d;">(</span>url-retrieve-synchronously
           <span style="color: #2d9574;">"https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"</span>
           'silent 'inhibit-cookies<span style="color: #b1951d;">)</span>
        <span style="color: #b1951d;">(</span>goto-char <span style="color: #3a81c3;">(</span>point-max<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
        <span style="color: #b1951d;">(</span>eval-print-last-sexp<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>load bootstrap-file nil 'nomessage<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Use straight.el for use-package expressions</span>
<span style="color: #3a81c3;">(</span>straight-use-package 'use-package<span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
Sometimes it's good to clean up unused repositories if I've removed packages from my configuration.  Use <code>straight-remove-unused-repos</code> for this purpose.
</p>
</div>
</div>

<div id="outline-container-orgc626ebb" class="outline-2">
<h2 id="orgc626ebb">Streamlined Configuration with setup.el</h2>
<div class="outline-text-2" id="text-orgc626ebb">
<p>
I've recently switched to the excellent <a href="https://www.emacswiki.org/emacs/SetupEl">setup.el</a> by <a href="https://ruzkuku.com">pkal</a> as an alternative to <code>use-package</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>straight-use-package '<span style="color: #6c3163;">(</span>setup <span style="color: #3a81c3;">:type</span> git <span style="color: #3a81c3;">:host</span> nil <span style="color: #3a81c3;">:repo</span> <span style="color: #2d9574;">"https://git.sr.ht/~pkal/setup"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">setup</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Uncomment this for debugging purposes</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(defun dw/log-require (&amp;rest args)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(with-current-buffer (get-buffer-create "*require-log*")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(insert (format "%s\n"</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;                     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(file-name-nondirectory (car args))))))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(add-to-list 'after-load-functions #'dw/log-require)</span>

</pre>
</div>
</div>

<div id="outline-container-org57597ff" class="outline-3">
<h3 id="org57597ff">:pkg</h3>
<div class="outline-text-3" id="text-org57597ff">
<p>
The <code>:pkg</code> keyword will depend on Guix-installed Emacs packages unless the parameter seems like a <code>straight.el</code> recipe (it's a list).
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Recipe is always a list</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Install via Guix if length == 1 or :guix t is present</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defvar</span> <span style="color: #715ab1;">dw/guix-emacs-packages</span> '<span style="color: #6c3163;">()</span>
  <span style="color: #da8b55;">"Contains a list of all Emacs package names that must be</span>
<span style="color: #da8b55;">installed via Guix."</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Examples:</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">- (org-roam :straight t)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">- (git-gutter :straight git-gutter-fringe)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/filter-straight-recipe</span> <span style="color: #6c3163;">(</span>recipe<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let*</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>plist <span style="color: #b1951d;">(</span>cdr recipe<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
         <span style="color: #67b11d;">(</span>name <span style="color: #b1951d;">(</span>plist-get plist <span style="color: #3a81c3;">:straight</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>cons <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">and</span> name <span style="color: #3a81c3;">(</span>not <span style="color: #6c3163;">(</span>equal name t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
              name
            <span style="color: #b1951d;">(</span>car recipe<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
          <span style="color: #67b11d;">(</span>plist-put plist <span style="color: #3a81c3;">:straight</span> nil<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup-define <span style="color: #3a81c3;">:pkg</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #2d9574;">(</span><span style="color: #ba2f59; font-weight: bold;">&amp;rest</span> recipe<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">and</span> dw/is-guix-system
             <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> <span style="color: #3a81c3;">(</span>eq <span style="color: #6c3163;">(</span>length recipe<span style="color: #6c3163;">)</span> 1<span style="color: #3a81c3;">)</span>
                 <span style="color: #3a81c3;">(</span>plist-get <span style="color: #6c3163;">(</span>cdr recipe<span style="color: #6c3163;">)</span> <span style="color: #3a81c3;">:guix</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        `<span style="color: #67b11d;">(</span>add-to-list 'dw/guix-emacs-packages
                      ,<span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> <span style="color: #3a81c3;">(</span>plist-get recipe <span style="color: #3a81c3;">:guix</span><span style="color: #3a81c3;">)</span>
                           <span style="color: #3a81c3;">(</span>concat <span style="color: #2d9574;">"emacs-"</span> <span style="color: #6c3163;">(</span>symbol-name <span style="color: #2d9574;">(</span>car recipe<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
      `<span style="color: #67b11d;">(</span>straight-use-package ',<span style="color: #b1951d;">(</span>dw/filter-straight-recipe recipe<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #3a81c3;">:documentation</span> <span style="color: #da8b55;">"Install RECIPE via Guix or straight.el"</span>
  <span style="color: #3a81c3;">:shorthand</span> #'cadr<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org965f28f" class="outline-3">
<h3 id="org965f28f">:delay</h3>
<div class="outline-text-3" id="text-org965f28f">
<p>
Delay the loading of a package until a certain amount of idle time has passed.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup-define <span style="color: #3a81c3;">:delay</span>
   <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #2d9574;">(</span><span style="color: #ba2f59; font-weight: bold;">&amp;rest</span> time<span style="color: #2d9574;">)</span>
     `<span style="color: #2d9574;">(</span>run-with-idle-timer ,<span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> time 1<span style="color: #67b11d;">)</span>
                           nil <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Don't repeat</span>
                           <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #b1951d;">()</span> <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> ',<span style="color: #3a81c3;">(</span>setup-get 'feature<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
   <span style="color: #3a81c3;">:documentation</span> <span style="color: #da8b55;">"Delay loading the feature until a certain amount of idle time has passed."</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org45a0eff" class="outline-3">
<h3 id="org45a0eff">:disabled</h3>
<div class="outline-text-3" id="text-org45a0eff">
<p>
Used to disable a package configuration, similar to <code>:disabled</code> in <code>use-package</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup-define <span style="color: #3a81c3;">:disabled</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #2d9574;">()</span>
    `,<span style="color: #2d9574;">(</span>setup-quit<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #3a81c3;">:documentation</span> <span style="color: #da8b55;">"Always stop evaluating the body."</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org9623b25" class="outline-3">
<h3 id="org9623b25">:load-after</h3>
<div class="outline-text-3" id="text-org9623b25">
<p>
This keyword causes a body to be executed after other packages/features are loaded:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup-define <span style="color: #3a81c3;">:load-after</span>
    <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #2d9574;">(</span>features <span style="color: #ba2f59; font-weight: bold;">&amp;rest</span> body<span style="color: #2d9574;">)</span>
      <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">let</span> <span style="color: #67b11d;">(</span><span style="color: #b1951d;">(</span>body `<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">progn</span>
                     <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> ',<span style="color: #2d9574;">(</span>setup-get 'feature<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
                     ,@body<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">dolist</span> <span style="color: #b1951d;">(</span>feature <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #6c3163;">(</span>listp features<span style="color: #6c3163;">)</span>
                             <span style="color: #6c3163;">(</span>nreverse features<span style="color: #6c3163;">)</span>
                           <span style="color: #6c3163;">(</span>list features<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
          <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> body `<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">with-eval-after-load</span> ',feature ,body<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        body<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #3a81c3;">:documentation</span> <span style="color: #da8b55;">"Load the current feature after FEATURES."</span>
  <span style="color: #3a81c3;">:indent</span> 1<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org44c6f29" class="outline-2">
<h2 id="org44c6f29">Keep .emacs.d Clean</h2>
<div class="outline-text-2" id="text-org44c6f29">
<p>
I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> user-emacs-directory <span style="color: #6c3163;">(</span>expand-file-name <span style="color: #2d9574;">"~/.cache/emacs/"</span><span style="color: #6c3163;">)</span>
      url-history-file <span style="color: #6c3163;">(</span>expand-file-name <span style="color: #2d9574;">"url/history"</span> user-emacs-directory<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Use no-littering to automatically set common paths to the new user-emacs-directory</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> no-littering<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">no-littering</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Keep customization settings in a temporary file (thanks Ambrevar!)</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> custom-file
      <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #2d9574;">(</span>boundp 'server-socket-dir<span style="color: #2d9574;">)</span>
          <span style="color: #2d9574;">(</span>expand-file-name <span style="color: #2d9574;">"custom.el"</span> server-socket-dir<span style="color: #2d9574;">)</span>
        <span style="color: #2d9574;">(</span>expand-file-name <span style="color: #67b11d;">(</span>format <span style="color: #2d9574;">"emacs-custom-%s.el"</span> <span style="color: #b1951d;">(</span>user-uid<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span> temporary-file-directory<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>load custom-file t<span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-no-littering"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgc5f9a53" class="outline-2">
<h2 id="orgc5f9a53">Update Load Path</h2>
<div class="outline-text-2" id="text-orgc5f9a53">
<p>
I've got a folder of custom Emacs Lisp libraries which must be added to the load path.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Add my library path to load-path</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">push</span> <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/lisp"</span> load-path<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org91c9f1c" class="outline-2">
<h2 id="org91c9f1c">Default Coding System</h2>
<div class="outline-text-2" id="text-org91c9f1c">
<p>
Avoid constant errors on Windows about the coding system by setting the default to UTF-8.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>set-default-coding-systems 'utf-8<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org9660d0b" class="outline-2">
<h2 id="org9660d0b">Server Mode</h2>
<div class="outline-text-2" id="text-org9660d0b">
<p>
Start the Emacs server from this instance so that all <code>emacsclient</code> calls are routed here.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>server-start<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org2eb1d1e" class="outline-2">
<h2 id="org2eb1d1e">Desktop Environment</h2>
<div class="outline-text-2" id="text-org2eb1d1e">
<p>
Load up the desktop environment if on a machine that supports it and the <code>--use-exwm</code> argument was passed to Emacs on startup.  Desktop environment and window management code can be found in Desktop.org.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/exwm-enabled <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">and</span> <span style="color: #2d9574;">(</span>not dw/is-termux<span style="color: #2d9574;">)</span>
                           <span style="color: #2d9574;">(</span>eq window-system 'x<span style="color: #2d9574;">)</span>
                           <span style="color: #2d9574;">(</span>seq-contains command-line-args <span style="color: #2d9574;">"--use-exwm"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> dw/exwm-enabled
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">dw-desktop</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<p>
Despite the code being in Desktop.org, include the emacs packages for the desktop environment in this file so that they can be included in the Emacs profile.
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-exwm"</span>
<span style="color: #2d9574;">"emacs-desktop-environment"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org3c2f545" class="outline-2">
<h2 id="org3c2f545">Keyboard Bindings</h2>
<div class="outline-text-2" id="text-org3c2f545">
</div>
<div id="outline-container-orgb4d53c1" class="outline-3">
<h3 id="orgb4d53c1">ESC Cancels All</h3>
<div class="outline-text-3" id="text-orgb4d53c1">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>global-set-key <span style="color: #6c3163;">(</span>kbd <span style="color: #2d9574;">"&lt;escape&gt;"</span><span style="color: #6c3163;">)</span> 'keyboard-escape-quit<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgf0c4753" class="outline-3">
<h3 id="orgf0c4753">Rebind C-u</h3>
<div class="outline-text-3" id="text-orgf0c4753">
<p>
Since I let <code>evil-mode</code> take over <code>C-u</code> for buffer scrolling, I need to re-bind the <code>universal-argument</code> command to another key sequence.  I'm choosing <code>C-M-u</code> for this purpose.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>global-set-key <span style="color: #6c3163;">(</span>kbd <span style="color: #2d9574;">"C-M-u"</span><span style="color: #6c3163;">)</span> 'universal-argument<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgbdc0d1c" class="outline-3">
<h3 id="orgbdc0d1c">Let's Be Evil</h3>
<div class="outline-text-3" id="text-orgbdc0d1c">
<p>
Some tips can be found here:
</p>

<ul class="org-ul">
<li><a href="https://github.com/noctuid/evil-guide">https://github.com/noctuid/evil-guide</a></li>
<li><a href="https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html">https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html</a></li>
</ul>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> undo-tree<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> undo-tree-auto-save-history nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>global-undo-tree-mode 1<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> evil<span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Pre-load configuration</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> evil-want-integration t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> evil-want-keybinding nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> evil-want-C-u-scroll t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> evil-want-C-i-jump nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> evil-respect-visual-line-mode t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> evil-undo-system 'undo-tree<span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Activate the Evil</span>
  <span style="color: #6c3163;">(</span>evil-mode 1<span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set Emacs state modes</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">dolist</span> <span style="color: #2d9574;">(</span>mode '<span style="color: #67b11d;">(</span>custom-mode
                  eshell-mode
                  git-rebase-mode
                  erc-mode
                  circe-server-mode
                  circe-chat-mode
                  circe-query-mode
                  sauron-mode
                  term-mode<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'evil-emacs-state-modes mode<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>define-key evil-insert-state-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"C-g"</span><span style="color: #2d9574;">)</span> 'evil-normal-state<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>define-key evil-insert-state-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"C-h"</span><span style="color: #2d9574;">)</span> 'evil-delete-backward-char-and-join<span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Use visual line motions even outside of visual-line-mode buffers</span>
  <span style="color: #6c3163;">(</span>evil-global-set-key 'motion <span style="color: #2d9574;">"j"</span> 'evil-next-visual-line<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-global-set-key 'motion <span style="color: #2d9574;">"k"</span> 'evil-previous-visual-line<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/dont-arrow-me-bro</span> <span style="color: #67b11d;">()</span>
      <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>message <span style="color: #2d9574;">"Arrow keys are bad, you know?"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>

    <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Disable arrow keys in normal and visual modes</span>
    <span style="color: #2d9574;">(</span>define-key evil-normal-state-map <span style="color: #67b11d;">(</span>kbd <span style="color: #2d9574;">"&lt;left&gt;"</span><span style="color: #67b11d;">)</span> 'dw/dont-arrow-me-bro<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>define-key evil-normal-state-map <span style="color: #67b11d;">(</span>kbd <span style="color: #2d9574;">"&lt;right&gt;"</span><span style="color: #67b11d;">)</span> 'dw/dont-arrow-me-bro<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>define-key evil-normal-state-map <span style="color: #67b11d;">(</span>kbd <span style="color: #2d9574;">"&lt;down&gt;"</span><span style="color: #67b11d;">)</span> 'dw/dont-arrow-me-bro<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>define-key evil-normal-state-map <span style="color: #67b11d;">(</span>kbd <span style="color: #2d9574;">"&lt;up&gt;"</span><span style="color: #67b11d;">)</span> 'dw/dont-arrow-me-bro<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>evil-global-set-key 'motion <span style="color: #67b11d;">(</span>kbd <span style="color: #2d9574;">"&lt;left&gt;"</span><span style="color: #67b11d;">)</span> 'dw/dont-arrow-me-bro<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>evil-global-set-key 'motion <span style="color: #67b11d;">(</span>kbd <span style="color: #2d9574;">"&lt;right&gt;"</span><span style="color: #67b11d;">)</span> 'dw/dont-arrow-me-bro<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>evil-global-set-key 'motion <span style="color: #67b11d;">(</span>kbd <span style="color: #2d9574;">"&lt;down&gt;"</span><span style="color: #67b11d;">)</span> 'dw/dont-arrow-me-bro<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>evil-global-set-key 'motion <span style="color: #67b11d;">(</span>kbd <span style="color: #2d9574;">"&lt;up&gt;"</span><span style="color: #67b11d;">)</span> 'dw/dont-arrow-me-bro<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>evil-set-initial-state 'messages-buffer-mode 'normal<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-set-initial-state 'dashboard-mode 'normal<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> evil-collection<span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Is this a bug in evil-collection?</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> evil-collection-company-use-tng nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:load-after</span> evil
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:option</span> evil-collection-outline-bind-tab-p nil
             <span style="color: #67b11d;">(</span>remove evil-collection-mode-list<span style="color: #67b11d;">)</span> 'lispy
             <span style="color: #67b11d;">(</span>remove evil-collection-mode-list<span style="color: #67b11d;">)</span> 'org-present<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>evil-collection-init<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-evil"</span>
<span style="color: #2d9574;">"emacs-evil-collection"</span>
<span style="color: #2d9574;">"emacs-undo-tree"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org35e3cc3" class="outline-3">
<h3 id="org35e3cc3">Keybinding Panel (which-key)</h3>
<div class="outline-text-3" id="text-org35e3cc3">
<p>
<a href="https://github.com/justbur/emacs-which-key">which-key</a> is great for getting an overview of what keybindings are available
based on the prefix keys you entered.  Learned about this one from Spacemacs.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> which-key<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>diminish 'which-key-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>which-key-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> which-key-idle-delay 0.3<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-which-key"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgf367949" class="outline-3">
<h3 id="orgf367949">Simplify Leader Bindings (general.el)</h3>
<div class="outline-text-3" id="text-orgf367949">
<p>
<a href="https://github.com/noctuid/general.el">general.el</a> is a fantastic library for defining prefixed keybindings, especially
in conjunction with Evil modes.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> general<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>general-evil-setup t<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">general-create-definer</span> dw/leader-key-def
    <span style="color: #3a81c3;">:keymaps</span> '<span style="color: #2d9574;">(</span>normal insert visual emacs<span style="color: #2d9574;">)</span>
    <span style="color: #3a81c3;">:prefix</span> <span style="color: #2d9574;">"SPC"</span>
    <span style="color: #3a81c3;">:global-prefix</span> <span style="color: #2d9574;">"C-SPC"</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">general-create-definer</span> dw/ctrl-c-keys
    <span style="color: #3a81c3;">:prefix</span> <span style="color: #2d9574;">"C-c"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-general"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org6d651a8" class="outline-2">
<h2 id="org6d651a8">General Configuration</h2>
<div class="outline-text-2" id="text-org6d651a8">
</div>
<div id="outline-container-orgc062968" class="outline-3">
<h3 id="orgc062968">User Interface</h3>
<div class="outline-text-3" id="text-orgc062968">
<p>
Clean up Emacs' user interface, make it more minimal.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Thanks, but no thanks</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> inhibit-startup-message t<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
  <span style="color: #6c3163;">(</span>scroll-bar-mode -1<span style="color: #6c3163;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Disable visible scrollbar</span>
  <span style="color: #6c3163;">(</span>tool-bar-mode -1<span style="color: #6c3163;">)</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Disable the toolbar</span>
  <span style="color: #6c3163;">(</span>tooltip-mode -1<span style="color: #6c3163;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Disable tooltips</span>
  <span style="color: #6c3163;">(</span>set-fringe-mode 10<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>       <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Give some breathing room</span>

<span style="color: #3a81c3;">(</span>menu-bar-mode -1<span style="color: #3a81c3;">)</span>            <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Disable the menu bar</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set up the visible bell</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> visible-bell t<span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
Improve scrolling.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> mouse-wheel-scroll-amount '<span style="color: #2d9574;">(</span>1 <span style="color: #67b11d;">(</span><span style="color: #b1951d;">(</span>shift<span style="color: #b1951d;">)</span> . 1<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">one line at a time</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> mouse-wheel-progressive-speed nil<span style="color: #6c3163;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">don't accelerate scrolling</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> mouse-wheel-follow-mouse 't<span style="color: #6c3163;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">scroll window under mouse</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> scroll-step 1<span style="color: #6c3163;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">keyboard scroll one line at a time</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> use-dialog-box nil<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Disable dialog boxes since they weren't working in Mac OSX</span>

</pre>
</div>

<p>
Set frame transparency and maximize windows by default.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
  <span style="color: #6c3163;">(</span>set-frame-parameter <span style="color: #2d9574;">(</span>selected-frame<span style="color: #2d9574;">)</span> 'alpha '<span style="color: #2d9574;">(</span>90 . 90<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-to-list 'default-frame-alist '<span style="color: #2d9574;">(</span>alpha . <span style="color: #67b11d;">(</span>90 . 90<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>set-frame-parameter <span style="color: #2d9574;">(</span>selected-frame<span style="color: #2d9574;">)</span> 'fullscreen 'maximized<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-to-list 'default-frame-alist '<span style="color: #2d9574;">(</span>fullscreen . maximized<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
Enable line numbers and customize their format.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>column-number-mode<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Enable line numbers for some modes</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">dolist</span> <span style="color: #6c3163;">(</span>mode '<span style="color: #2d9574;">(</span>text-mode-hook
                prog-mode-hook
                conf-mode-hook<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-hook mode <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span>display-line-numbers-mode 1<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Override some modes which derive from the above</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">dolist</span> <span style="color: #6c3163;">(</span>mode '<span style="color: #2d9574;">(</span>org-mode-hook<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-hook mode <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span>display-line-numbers-mode 0<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
Don't warn for large files (shows up when launching videos)
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> large-file-warning-threshold nil<span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
Don't warn for following symlinked files
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> vc-follow-symlinks t<span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
Don't warn when advice is added for functions
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> ad-redefinition-action 'accept<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org1f0024c" class="outline-3">
<h3 id="org1f0024c">Theme</h3>
<div class="outline-text-3" id="text-org1f0024c">
<p>
These days I bounce around between themes included with <a href="https://github.com/hlissner/emacs-doom-themes">DOOM Themes</a> since they're well-designed and integrate with a lot of Emacs packages.
</p>

<p>
A nice gallery of Emacs themes can be found at <a href="https://emacsthemes.com/">https://emacsthemes.com/</a>.
</p>

<p>
Alternate themes:
</p>

<ul class="org-ul">
<li><code>doom-snazzy</code></li>
<li><code>doom-vibrant</code></li>
</ul>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> spacegray-theme<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> doom-themes<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
  <span style="color: #6c3163;">(</span>load-theme 'doom-palenight t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>doom-themes-visual-bell-config<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-doom-themes"</span>
<span style="color: #2d9574;">"emacs-spacegray-theme"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org6ba6533" class="outline-3">
<h3 id="org6ba6533">Font</h3>
<div class="outline-text-3" id="text-org6ba6533">
</div>
<div id="outline-container-orgf8d9772" class="outline-4">
<h4 id="orgf8d9772">Set the font</h4>
<div class="outline-text-4" id="text-orgf8d9772">
<p>
Different platforms need different default font sizes, and <a href="https://mozilla.github.io/Fira/">Fira Mono</a> is currently my favorite face.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set the font face based on platform</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">pcase</span> system-type
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> 'gnu/linux 'windows-nt 'cygwin<span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>set-face-attribute 'default nil
                       <span style="color: #3a81c3;">:font</span> <span style="color: #2d9574;">"JetBrains Mono"</span>
                       <span style="color: #3a81c3;">:weight</span> 'light
                       <span style="color: #3a81c3;">:height</span> <span style="color: #67b11d;">(</span>dw/system-settings-get 'emacs/default-face-size<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>'darwin <span style="color: #2d9574;">(</span>set-face-attribute 'default nil <span style="color: #3a81c3;">:font</span> <span style="color: #2d9574;">"Fira Mono"</span> <span style="color: #3a81c3;">:height</span> 170<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set the fixed pitch face</span>
<span style="color: #3a81c3;">(</span>set-face-attribute 'fixed-pitch nil
                    <span style="color: #3a81c3;">:font</span> <span style="color: #2d9574;">"JetBrains Mono"</span>
                    <span style="color: #3a81c3;">:weight</span> 'light
                    <span style="color: #3a81c3;">:height</span> <span style="color: #6c3163;">(</span>dw/system-settings-get 'emacs/fixed-face-size<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set the variable pitch face</span>
<span style="color: #3a81c3;">(</span>set-face-attribute 'variable-pitch nil
                    <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:font "Cantarell"</span>
                    <span style="color: #3a81c3;">:font</span> <span style="color: #2d9574;">"Iosevka Aile"</span>
                    <span style="color: #3a81c3;">:height</span> <span style="color: #6c3163;">(</span>dw/system-settings-get 'emacs/variable-face-size<span style="color: #6c3163;">)</span>
                    <span style="color: #3a81c3;">:weight</span> 'light<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgec07550" class="outline-4">
<h4 id="orgec07550">Enable proper Unicode glyph support</h4>
<div class="outline-text-4" id="text-orgec07550">
<p>
This is currently disabled because I was having issues with Emacs 28 crashing while building the font mappings.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/replace-unicode-font-mapping</span> <span style="color: #6c3163;">(</span>block-name old-font new-font<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let*</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>block-idx <span style="color: #b1951d;">(</span>cl-position-if
                         <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #6c3163;">(</span>i<span style="color: #6c3163;">)</span> <span style="color: #6c3163;">(</span>string-equal <span style="color: #2d9574;">(</span>car i<span style="color: #2d9574;">)</span> block-name<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
                         unicode-fonts-block-font-mapping<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
         <span style="color: #67b11d;">(</span>block-fonts <span style="color: #b1951d;">(</span>cadr <span style="color: #3a81c3;">(</span>nth block-idx unicode-fonts-block-font-mapping<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
         <span style="color: #67b11d;">(</span>updated-block <span style="color: #b1951d;">(</span>cl-substitute new-font old-font block-fonts <span style="color: #3a81c3;">:test</span> 'string-equal<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">setf</span> <span style="color: #67b11d;">(</span>cdr <span style="color: #b1951d;">(</span>nth block-idx unicode-fonts-block-font-mapping<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
          `<span style="color: #67b11d;">(</span>,updated-block<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> unicode-fonts<span style="color: #6c3163;">)</span>
  <span style="color: #3a81c3;">:if</span> <span style="color: #6c3163;">(</span>not dw/is-termux<span style="color: #6c3163;">)</span>
  <span style="color: #3a81c3;">:custom</span>
  <span style="color: #6c3163;">(</span>unicode-fonts-skip-font-groups '<span style="color: #2d9574;">(</span>low-quality-glyphs<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #3a81c3;">:config</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Fix the font mappings to use the right emoji font</span>
  <span style="color: #6c3163;">(</span>mapcar
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">(</span>block-name<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>dw/replace-unicode-font-mapping block-name <span style="color: #2d9574;">"Apple Color Emoji"</span> <span style="color: #2d9574;">"Noto Color Emoji"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Dingbats"</span>
      <span style="color: #2d9574;">"Emoticons"</span>
      <span style="color: #2d9574;">"Miscellaneous Symbols and Pictographs"</span>
      <span style="color: #2d9574;">"Transport and Map Symbols"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>unicode-fonts-setup<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs-unicode-fonts"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org4350fa4" class="outline-4">
<h4 id="org4350fa4">Emojis in buffers</h4>
<div class="outline-text-4" id="text-org4350fa4">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> emojify<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook</span> erc-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-emojify"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org9de51d7" class="outline-3">
<h3 id="org9de51d7">Mode Line</h3>
<div class="outline-text-3" id="text-org9de51d7">
</div>
<div id="outline-container-orgf20153d" class="outline-4">
<h4 id="orgf20153d">Basic Customization</h4>
<div class="outline-text-4" id="text-orgf20153d">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> display-time-format <span style="color: #2d9574;">"%l:%M %p %b %y"</span>
      display-time-default-load-average nil<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgdd65d4b" class="outline-4">
<h4 id="orgdd65d4b">Enable Mode Diminishing</h4>
<div class="outline-text-4" id="text-orgdd65d4b">
<p>
The <a href="https://github.com/myrjola/diminish.el">diminish</a> package hides pesky minor modes from the modelines.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> diminish<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org3050f53" class="outline-4">
<h4 id="org3050f53">Doom Modeline</h4>
<div class="outline-text-4" id="text-org3050f53">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">You must run (all-the-icons-install-fonts) one time after</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">installing this package!</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> minions<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> doom-modeline-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> doom-modeline<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> after-init-hook<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> doom-modeline-height 15
           doom-modeline-bar-width 6
           doom-modeline-lsp t
           doom-modeline-github nil
           doom-modeline-mu4e nil
           doom-modeline-irc t
           doom-modeline-minor-modes t
           doom-modeline-persp-name nil
           doom-modeline-buffer-file-name-style 'truncate-except-project
           doom-modeline-major-mode-icon nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>custom-set-faces '<span style="color: #2d9574;">(</span>mode-line <span style="color: #67b11d;">(</span><span style="color: #b1951d;">(</span>t <span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">:height</span> 0.85<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
                    '<span style="color: #2d9574;">(</span>mode-line-inactive <span style="color: #67b11d;">(</span><span style="color: #b1951d;">(</span>t <span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">:height</span> 0.85<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-doom-modeline"</span>
<span style="color: #2d9574;">"emacs-all-the-icons"</span>
<span style="color: #2d9574;">"emacs-minions"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orga187551" class="outline-3">
<h3 id="orga187551">Workspaces</h3>
<div class="outline-text-3" id="text-orga187551">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> perspective<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-M-k"</span> persp-switch
           <span style="color: #2d9574;">"C-M-n"</span> persp-next
           <span style="color: #2d9574;">"C-x k"</span> persp-kill-buffer*<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> persp-initial-frame-name <span style="color: #2d9574;">"Main"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Running `</span><span style="color: #4e3163; background-color: #ecf3ec;">persp-mode</span><span style="color: #2aa1ae; background-color: #ecf3ec;">' multiple times resets the perspective list...</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> <span style="color: #2d9574;">(</span>equal persp-mode t<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>persp-mode<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-perspective"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org333d7d0" class="outline-3">
<h3 id="org333d7d0">Notifications</h3>
<div class="outline-text-3" id="text-org333d7d0">
<p>
<a href="https://github.com/jwiegley/alert">alert</a> is a great library for showing notifications from other packages in a variety of ways.  For now I just use it to surface desktop notifications from package code.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> alert<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> alert-default-style 'notifications<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-alert"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orga73960c" class="outline-3">
<h3 id="orga73960c">Auto-Saving Changed Files</h3>
<div class="outline-text-3" id="text-orga73960c">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> super-save<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:delay</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
    <span style="color: #2d9574;">(</span>super-save-mode +1<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>diminish 'super-save-mode<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> super-save-auto-save-when-idle t<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-super-save"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org1f91396" class="outline-3">
<h3 id="org1f91396">Auto-Reverting Changed Files</h3>
<div class="outline-text-3" id="text-org1f91396">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Revert Dired and other buffers</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> global-auto-revert-non-file-buffers t<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Revert buffers when the underlying file has changed</span>
<span style="color: #3a81c3;">(</span>global-auto-revert-mode 1<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgade6e39" class="outline-3">
<h3 id="orgade6e39">UI Toggles</h3>
<div class="outline-text-3" id="text-orgade6e39">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>dw/leader-key-def
  <span style="color: #2d9574;">"t"</span>  '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"toggles"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"tw"</span> 'whitespace-mode
  <span style="color: #2d9574;">"tt"</span> '<span style="color: #6c3163;">(</span>counsel-load-theme <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"choose theme"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org428995d" class="outline-3">
<h3 id="org428995d"><span class="todo TODO">TODO</span> Highlight Matching Braces</h3>
<div class="outline-text-3" id="text-org428995d">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:require</span> paren<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>set-face-attribute 'show-paren-match-expression nil <span style="color: #3a81c3;">:background</span> <span style="color: #2d9574;">"#363e4a"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>show-paren-mode 1<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org8d4c64d" class="outline-3">
<h3 id="org8d4c64d">Displaying World Time</h3>
<div class="outline-text-3" id="text-org8d4c64d">
<p>
<code>display-time-world</code> command provides a nice display of the time at a specified
list of timezones.  Nice for working in a team with remote members.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> display-time-world-list
  '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Etc/UTC"</span> <span style="color: #2d9574;">"UTC"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"America/Los_Angeles"</span> <span style="color: #2d9574;">"Seattle"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"America/New_York"</span> <span style="color: #2d9574;">"New York"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Europe/Athens"</span> <span style="color: #2d9574;">"Athens"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Pacific/Auckland"</span> <span style="color: #2d9574;">"Auckland"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Asia/Shanghai"</span> <span style="color: #2d9574;">"Shanghai"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Asia/Kolkata"</span> <span style="color: #2d9574;">"Hyderabad"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> display-time-world-time-format <span style="color: #2d9574;">"%a, %d %b %I:%M %p %Z"</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgd06b3d8" class="outline-3">
<h3 id="orgd06b3d8">Pinentry</h3>
<div class="outline-text-3" id="text-orgd06b3d8">
<p>
Emacs can be prompted for the PIN of GPG private keys, we just need to set
<code>epa-pinentry-mode</code> to accomplish that:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> dw/is-termux
            <span style="color: #2d9574;">(</span>eq system-type 'windows-nt<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> epa-pinentry-mode 'loopback<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>pinentry-start<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-pinentry"</span>
<span style="color: #2d9574;">"pinentry-emacs"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org2c8c680" class="outline-3">
<h3 id="org2c8c680">TRAMP</h3>
<div class="outline-text-3" id="text-org2c8c680">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set default connection mode to SSH</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> tramp-default-method <span style="color: #2d9574;">"ssh"</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orga5dbd59" class="outline-3">
<h3 id="orga5dbd59">Emacs as External Editor</h3>
<div class="outline-text-3" id="text-orga5dbd59">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/show-server-edit-buffer</span> <span style="color: #6c3163;">(</span>buffer<span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">TODO: Set a transient keymap to close with 'C-c C-c'</span>
  <span style="color: #6c3163;">(</span>split-window-vertically -15<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>other-window 1<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>set-buffer buffer<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq server-window #'dw/show-server-edit-buffer)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org8735d9b" class="outline-2">
<h2 id="org8735d9b">Editing Configuration</h2>
<div class="outline-text-2" id="text-org8735d9b">
</div>
<div id="outline-container-org5edad14" class="outline-3">
<h3 id="org5edad14">Tab Widths</h3>
<div class="outline-text-3" id="text-org5edad14">
<p>
Default to an indentation size of 2 spaces since it's the norm for pretty much every language I use.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> tab-width 2<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> evil-shift-width tab-width<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org012bdc0" class="outline-3">
<h3 id="org012bdc0">Use spaces instead of tabs for indentation</h3>
<div class="outline-text-3" id="text-org012bdc0">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> indent-tabs-mode nil<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org78b6d57" class="outline-3">
<h3 id="org78b6d57">Commenting Lines</h3>
<div class="outline-text-3" id="text-org78b6d57">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> evil-nerd-commenter<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"M-/"</span> evilnc-comment-or-uncomment-lines<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-evil-nerd-commenter"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org83515b2" class="outline-3">
<h3 id="org83515b2">Automatically clean whitespace</h3>
<div class="outline-text-3" id="text-org83515b2">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> ws-butler<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> text-mode prog-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-ws-butler"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org59681d0" class="outline-3">
<h3 id="org59681d0"><span class="todo TODO">TODO</span> Use Parinfer for Lispy languages</h3>
<div class="outline-text-3" id="text-org59681d0">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> parinfer <span style="color: #3a81c3;">:guix</span> <span style="color: #2d9574;">"emacs-parinfer-mode"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> clojure-mode
              emacs-lisp-mode
              common-lisp-mode
              scheme-mode
              lisp-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> parinfer-extensions
        '<span style="color: #2d9574;">(</span>defaults                 <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">should be included.</span>
           pretty-parens           <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">different paren styles for different modes.</span>
           evil                    <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">If you use Evil.</span>
           smart-tab               <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">C-b &amp; C-f jump positions and smart shift with tab &amp; S-tab.</span>
           smart-yank<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>            <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Yank behavior depend on mode.</span>

  <span style="color: #6c3163;">(</span>dw/leader-key-def
    <span style="color: #2d9574;">"tp"</span> 'parinfer-toggle-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-parinfer-mode"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orga342f37" class="outline-3">
<h3 id="orga342f37">Origami.el for Folding</h3>
<div class="outline-text-3" id="text-orga342f37">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> origami <span style="color: #3a81c3;">:guix</span> <span style="color: #2d9574;">"emacs-origami-el"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> yaml-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-origami-el"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org8879cf4" class="outline-2">
<h2 id="org8879cf4">Configuration Files</h2>
<div class="outline-text-2" id="text-org8879cf4">
</div>
<div id="outline-container-org931332c" class="outline-3">
<h3 id="org931332c">Configuration file management with dotcrafter.el</h3>
<div class="outline-text-3" id="text-org931332c">
<p>
I've been working on a package called <a href="https://github.com/daviwil/dotcrafter.el">dotcrafter.el</a> for complete management of your dotfiles folder with special emphasis on configurations written with Org Mode.
</p>

<p>
Check out my <a href="https://systemcrafters.cc/learning-emacs-lisp/">Learning Emacs Lisp</a> series to see this package be written from scratch!
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> dotcrafter
             <span style="color: #3a81c3;">:host</span> github
             <span style="color: #3a81c3;">:repo</span> <span style="color: #2d9574;">"daviwil/dotcrafter.el"</span>
             <span style="color: #3a81c3;">:branch</span> <span style="color: #2d9574;">"main"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> dotcrafter-org-files '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Emacs.org"</span>
                                  <span style="color: #2d9574;">"Desktop.org"</span>
                                  <span style="color: #2d9574;">"Systems.org"</span>
                                  <span style="color: #2d9574;">"Mail.org"</span>
                                  <span style="color: #2d9574;">"Workflow.org"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">dotcrafter</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dotcrafter-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org6716f32" class="outline-3">
<h3 id="org6716f32">Helpers</h3>
<div class="outline-text-3" id="text-org6716f32">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-file-jump-to-heading</span> <span style="color: #6c3163;">(</span>org-file heading-title<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>find-file <span style="color: #2d9574;">(</span>expand-file-name org-file<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>goto-char <span style="color: #2d9574;">(</span>point-min<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>search-forward <span style="color: #2d9574;">(</span>concat <span style="color: #2d9574;">"* "</span> heading-title<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-overview<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-reveal<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-show-subtree<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>forward-line<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-file-show-headings</span> <span style="color: #6c3163;">(</span>org-file<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>find-file <span style="color: #2d9574;">(</span>expand-file-name org-file<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>counsel-org-goto<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-overview<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-reveal<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-show-subtree<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>forward-line<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgddcc8eb" class="outline-3">
<h3 id="orgddcc8eb">Bindings</h3>
<div class="outline-text-3" id="text-orgddcc8eb">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>dw/leader-key-def
  <span style="color: #2d9574;">"fn"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>counsel-find-file <span style="color: #2d9574;">"~/Notes/"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"notes"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fd"</span>  '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"dotfiles"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fdd"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>find-file <span style="color: #2d9574;">"~/.dotfiles/Desktop.org"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"desktop"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fde"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>find-file <span style="color: #b1951d;">(</span>expand-file-name <span style="color: #2d9574;">"~/.dotfiles/Emacs.org"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"edit config"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fdE"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>dw/org-file-show-headings <span style="color: #2d9574;">"~/.dotfiles/Emacs.org"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"edit config"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fdm"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>find-file <span style="color: #2d9574;">"~/.dotfiles/Mail.org"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"mail"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fdM"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>counsel-find-file <span style="color: #2d9574;">"~/.dotfiles/.config/guix/manifests/"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"manifests"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fds"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>dw/org-file-jump-to-heading <span style="color: #2d9574;">"~/.dotfiles/Systems.org"</span> <span style="color: #2d9574;">"Base Configuration"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"base system"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fdS"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>dw/org-file-jump-to-heading <span style="color: #2d9574;">"~/.dotfiles/Systems.org"</span> system-name<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"this system"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fdp"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>dw/org-file-jump-to-heading <span style="color: #2d9574;">"~/.dotfiles/Desktop.org"</span> <span style="color: #2d9574;">"Panel via Polybar"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"polybar"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fdw"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>find-file <span style="color: #b1951d;">(</span>expand-file-name <span style="color: #2d9574;">"~/.dotfiles/Workflow.org"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"workflow"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"fdv"</span> '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span>find-file <span style="color: #2d9574;">"~/.dotfiles/.config/vimb/config"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span> <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"vimb"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org9e0e4b0" class="outline-2">
<h2 id="org9e0e4b0">Stateful Keymaps with Hydra</h2>
<div class="outline-text-2" id="text-org9e0e4b0">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> hydra<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">hydra</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-hydra"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgdb8a6be" class="outline-2">
<h2 id="orgdb8a6be">Completion System</h2>
<div class="outline-text-2" id="text-orgdb8a6be">
<p>
Trying this as an alternative to Ivy and Counsel.
</p>
</div>

<div id="outline-container-org84ac16a" class="outline-3">
<h3 id="org84ac16a">Preserve Minibuffer History with savehist-mode</h3>
<div class="outline-text-3" id="text-org84ac16a">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup savehist
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> history-length 25<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>savehist-mode 1<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Individual history elements can be configured separately</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;</span><span style="color: #2aa1ae; background-color: #ecf3ec;">(put 'minibuffer-history 'history-length 25)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;</span><span style="color: #2aa1ae; background-color: #ecf3ec;">(put 'evil-ex-history 'history-length 50)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;</span><span style="color: #2aa1ae; background-color: #ecf3ec;">(put 'kill-ring 'history-length 25))</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org9ce69bc" class="outline-3">
<h3 id="org9ce69bc">Completions with Vertico</h3>
<div class="outline-text-3" id="text-org9ce69bc">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/minibuffer-backward-kill</span> <span style="color: #6c3163;">(</span>arg<span style="color: #6c3163;">)</span>
  <span style="color: #da8b55;">"When minibuffer is completing a file name delete up to parent</span>
<span style="color: #da8b55;">folder, otherwise delete a word"</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span> <span style="color: #2d9574;">"p"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> minibuffer-completing-file-name
      <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608</span>
      <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #67b11d;">(</span>string-match-p <span style="color: #2d9574;">"/."</span> <span style="color: #b1951d;">(</span>minibuffer-contents<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
          <span style="color: #67b11d;">(</span>zap-up-to-char <span style="color: #b1951d;">(</span>- arg<span style="color: #b1951d;">)</span> ?/<span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>delete-minibuffer-contents<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
      <span style="color: #2d9574;">(</span>delete-word <span style="color: #67b11d;">(</span>- arg<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> vertico<span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:straight '(vertico :host github</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;;                     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:repo "minad/vertico"</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;;                     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:branch "main")</span>
  <span style="color: #6c3163;">(</span>vertico-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:with-map</span> vertico-map
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"C-j"</span> vertico-next
           <span style="color: #2d9574;">"C-k"</span> vertico-previous
           <span style="color: #2d9574;">"C-f"</span> vertico-exit<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:with-map</span> minibuffer-local-map
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"M-h"</span> dw/minibuffer-backward-kill<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> vertico-cycle t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>custom-set-faces '<span style="color: #2d9574;">(</span>vertico-current <span style="color: #67b11d;">(</span><span style="color: #b1951d;">(</span>t <span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">:background</span> <span style="color: #2d9574;">"#3a3f5a"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-vertico"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orge665f53" class="outline-3">
<h3 id="orge665f53">Completions in Regions with Corfu</h3>
<div class="outline-text-3" id="text-orge665f53">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> corfu <span style="color: #3a81c3;">:host</span> github <span style="color: #3a81c3;">:repo</span> <span style="color: #2d9574;">"minad/corfu"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:with-map</span> corfu-map
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"C-j"</span> corfu-next
           <span style="color: #2d9574;">"C-k"</span> corfu-previous
           <span style="color: #2d9574;">"TAB"</span> corfu-insert
           <span style="color: #2d9574;">"C-f"</span> corfu-insert<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> corfu-cycle t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>corfu-global-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org00e3061" class="outline-3">
<h3 id="org00e3061">Improved Candidate Filtering with Orderless</h3>
<div class="outline-text-3" id="text-org00e3061">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> orderless<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">orderless</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> completion-styles '<span style="color: #2d9574;">(</span>orderless<span style="color: #2d9574;">)</span>
        completion-category-defaults nil
        completion-category-overrides '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>file <span style="color: #b1951d;">(</span>styles . <span style="color: #3a81c3;">(</span>partial-completion<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-orderless"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgbc87a3a" class="outline-3">
<h3 id="orgbc87a3a">Consult Commands</h3>
<div class="outline-text-3" id="text-orgbc87a3a">
<p>
Consult provides a lot of useful completion commands similar to Ivy's Counsel.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> consult<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">consult</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-s"</span> consult-line
           <span style="color: #2d9574;">"C-M-l"</span> consult-imenu
           <span style="color: #2d9574;">"C-M-j"</span> persp-switch-to-buffer*<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:with-map</span> minibuffer-local-map
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"C-r"</span> consult-history<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/get-project-root</span> <span style="color: #2d9574;">()</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #67b11d;">(</span>fboundp 'projectile-project-root<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>projectile-project-root<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> consult-project-root-function #'dw/get-project-root
           completion-in-region-function #'consult-completion-in-region<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-consult"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org8115f08" class="outline-3">
<h3 id="org8115f08">Switching Directories with consult-dir</h3>
<div class="outline-text-3" id="text-org8115f08">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> consult-dir <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-x C-d"</span> consult-dir<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:with-map</span> vertico-map
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"C-x C-d"</span> consult-dir
           <span style="color: #2d9574;">"C-x C-j"</span> consult-dir-jump-file<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> consult-dir-project-list-function nil<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Thanks Karthik!</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">eshell/z</span> <span style="color: #6c3163;">(</span><span style="color: #ba2f59; font-weight: bold;">&amp;optional</span> regexp<span style="color: #6c3163;">)</span>
  <span style="color: #da8b55;">"Navigate to a previously visited directory in eshell."</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>eshell-dirs <span style="color: #b1951d;">(</span>delete-dups <span style="color: #3a81c3;">(</span>mapcar 'abbreviate-file-name
                                          <span style="color: #6c3163;">(</span>ring-elements eshell-last-dir-ring<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">cond</span>
     <span style="color: #67b11d;">(</span><span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">and</span> <span style="color: #3a81c3;">(</span>not regexp<span style="color: #3a81c3;">)</span> <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">featurep</span> '<span style="color: #4e3163;">consult-dir</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
      <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">let*</span> <span style="color: #3a81c3;">(</span><span style="color: #6c3163;">(</span>consult-dir--source-eshell `<span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:name</span> <span style="color: #2d9574;">"Eshell"</span>
                                                 <span style="color: #3a81c3;">:narrow</span> ?e
                                                 <span style="color: #3a81c3;">:category</span> file
                                                 <span style="color: #3a81c3;">:face</span> consult-file
                                                 <span style="color: #3a81c3;">:items</span> ,eshell-dirs<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
             <span style="color: #6c3163;">(</span>consult-dir-sources <span style="color: #2d9574;">(</span>cons consult-dir--source-eshell consult-dir-sources<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3;">(</span>eshell/cd <span style="color: #6c3163;">(</span>substring-no-properties <span style="color: #2d9574;">(</span>consult-dir--pick <span style="color: #2d9574;">"Switch directory: "</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span>t <span style="color: #b1951d;">(</span>eshell/cd <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> regexp <span style="color: #6c3163;">(</span>eshell-find-previous-directory regexp<span style="color: #6c3163;">)</span>
                     <span style="color: #6c3163;">(</span>completing-read <span style="color: #2d9574;">"cd: "</span> eshell-dirs<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org0ca7a78" class="outline-3">
<h3 id="org0ca7a78">Completion Annotations with Marginalia</h3>
<div class="outline-text-3" id="text-org0ca7a78">
<p>
Marginalia provides helpful annotations for various types of minibuffer completions.  You can think of it as a replacement of <code>ivy-rich</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> marginalia<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> marginalia-annotators '<span style="color: #2d9574;">(</span>marginalia-annotators-heavy
                                   marginalia-annotators-light
                                   nil<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>marginalia-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-marginalia"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org11caed0" class="outline-3">
<h3 id="org11caed0">Completion Actions with Embark</h3>
<div class="outline-text-3" id="text-org11caed0">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> embark<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:also-load</span> embark-consult<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-S-a"</span> embark-act<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:with-map</span> minibuffer-local-map
   <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"C-d"</span> embark-act<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Show Embark actions via which-key</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> embark-action-indicator
        <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">(</span>map<span style="color: #67b11d;">)</span>
          <span style="color: #67b11d;">(</span>which-key--show-keymap <span style="color: #2d9574;">"Embark"</span> map nil nil 'no-paging<span style="color: #67b11d;">)</span>
          #'which-key--hide-popup-ignore-command<span style="color: #2d9574;">)</span>
        embark-become-indicator embark-action-indicator<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-embark"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org1107c81" class="outline-3">
<h3 id="org1107c81">Launching apps</h3>
<div class="outline-text-3" id="text-org1107c81">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Binding will be set by desktop config</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> app-launcher<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-app-launcher"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org88932f6" class="outline-2">
<h2 id="org88932f6">Jumping with Avy</h2>
<div class="outline-text-2" id="text-org88932f6">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> avy<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/leader-key-def
    <span style="color: #2d9574;">"j"</span>   '<span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"jump"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">"jj"</span>  '<span style="color: #2d9574;">(</span>avy-goto-char <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"jump to char"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">"jw"</span>  '<span style="color: #2d9574;">(</span>avy-goto-word-0 <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"jump to word"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">"jl"</span>  '<span style="color: #2d9574;">(</span>avy-goto-line <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"jump to line"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-avy"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org5c19c4d" class="outline-2">
<h2 id="org5c19c4d">Buffer Management with Bufler</h2>
<div class="outline-text-2" id="text-org5c19c4d">
<p>
<a href="https://github.com/alphapapa/bufler.el">Bufler</a> is an excellent package by <a href="https://github.com/alphapapa">alphapapa</a> which enables you to automatically group all of your Emacs buffers into workspaces by defining a series of grouping rules.  Once you have your groups defined (or use the default configuration which is quite good already), you can use the <code>bufler-workspace-frame-set</code> command to focus your current Emacs frame on a particular workspace so that <code>bufler-switch-buffer</code> will only show buffers from that workspace.  In my case, this allows me to dedicate an EXWM workspace to a specific Bufler workspace so that only see the buffers I care about in that EXWM workspace.
</p>

<p>
I'm trying to figure out how to integrate Bufler with Ivy more effectively (buffer previewing, alternate actions, etc), will update this config once I've done that.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> bufler <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-M-j"</span> bufler-switch-buffer
           <span style="color: #2d9574;">"C-M-k"</span> bufler-workspace-frame-set<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
   <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">progn</span>
     <span style="color: #3a81c3;">:config</span>
     <span style="color: #67b11d;">(</span>evil-collection-define-key 'normal 'bufler-list-mode-map
       <span style="color: #b1951d;">(</span>kbd <span style="color: #2d9574;">"RET"</span><span style="color: #b1951d;">)</span> 'bufler-list-buffer-switch
       <span style="color: #b1951d;">(</span>kbd <span style="color: #2d9574;">"M-RET"</span><span style="color: #b1951d;">)</span> 'bufler-list-buffer-peek
       <span style="color: #2d9574;">"D"</span> 'bufler-list-buffer-kill<span style="color: #67b11d;">)</span>

     <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setf</span> bufler-groups
           <span style="color: #b1951d;">(</span>bufler-defgroups
            <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Subgroup collecting all named workspaces.</span>
            <span style="color: #3a81c3;">(</span>group <span style="color: #6c3163;">(</span>auto-workspace<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
            <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Subgroup collecting buffers in a projectile project.</span>
            <span style="color: #3a81c3;">(</span>group <span style="color: #6c3163;">(</span>auto-projectile<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
            <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Grouping browser windows</span>
            <span style="color: #3a81c3;">(</span>group
             <span style="color: #6c3163;">(</span>group-or <span style="color: #2d9574;">"Browsers"</span>
                       <span style="color: #2d9574;">(</span>name-match <span style="color: #2d9574;">"Vimb"</span> <span style="color: #887070;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #2d9574;">"vimb"</span><span style="color: #887070;">)</span><span style="color: #2d9574;">)</span>
                       <span style="color: #2d9574;">(</span>name-match <span style="color: #2d9574;">"Qutebrowser"</span> <span style="color: #887070;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #2d9574;">"Qutebrowser"</span><span style="color: #887070;">)</span><span style="color: #2d9574;">)</span>
                       <span style="color: #2d9574;">(</span>name-match <span style="color: #2d9574;">"Chromium"</span> <span style="color: #887070;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #2d9574;">"Chromium"</span><span style="color: #887070;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
            <span style="color: #3a81c3;">(</span>group
             <span style="color: #6c3163;">(</span>group-or <span style="color: #2d9574;">"Chat"</span>
                       <span style="color: #2d9574;">(</span>mode-match <span style="color: #2d9574;">"Telega"</span> <span style="color: #887070;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #2d9574;">"telega-"</span><span style="color: #887070;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
            <span style="color: #3a81c3;">(</span>group
             <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Subgroup collecting all `</span><span style="color: #4e3163; background-color: #ecf3ec;">help-mode</span><span style="color: #2aa1ae; background-color: #ecf3ec;">' and `</span><span style="color: #4e3163; background-color: #ecf3ec;">info-mode</span><span style="color: #2aa1ae; background-color: #ecf3ec;">' buffers.</span>
             <span style="color: #6c3163;">(</span>group-or <span style="color: #2d9574;">"Help/Info"</span>
                       <span style="color: #2d9574;">(</span>mode-match <span style="color: #2d9574;">"*Help*"</span> <span style="color: #887070;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> <span style="color: #2d9574;">"help-"</span> <span style="color: #2d9574;">"helpful-"</span><span style="color: #3a81c3;">)</span><span style="color: #887070;">)</span><span style="color: #2d9574;">)</span>
                       <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(mode-match "*Helpful*" (rx bos "helpful-"))</span>
                       <span style="color: #2d9574;">(</span>mode-match <span style="color: #2d9574;">"*Info*"</span> <span style="color: #887070;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #2d9574;">"info-"</span><span style="color: #887070;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
            <span style="color: #3a81c3;">(</span>group
             <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Subgroup collecting all special buffers (i.e. ones that are not</span>
             <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">file-backed), except `</span><span style="color: #4e3163; background-color: #ecf3ec;">magit-status-mode</span><span style="color: #2aa1ae; background-color: #ecf3ec;">' buffers (which are allowed to fall</span>
             <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">through to other groups, so they end up grouped with their project buffers).</span>
             <span style="color: #6c3163;">(</span>group-and <span style="color: #2d9574;">"*Special*"</span>
                        <span style="color: #2d9574;">(</span>name-match <span style="color: #2d9574;">"**Special**"</span>
                                    <span style="color: #887070;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #2d9574;">"*"</span> <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> <span style="color: #2d9574;">"Messages"</span> <span style="color: #2d9574;">"Warnings"</span> <span style="color: #2d9574;">"scratch"</span> <span style="color: #2d9574;">"Backtrace"</span> <span style="color: #2d9574;">"Pinentry"</span><span style="color: #3a81c3;">)</span> <span style="color: #2d9574;">"*"</span><span style="color: #887070;">)</span><span style="color: #2d9574;">)</span>
                        <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #887070;">(</span>buffer<span style="color: #887070;">)</span>
                          <span style="color: #887070;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> <span style="color: #6c3163;">(</span>funcall <span style="color: #2d9574;">(</span>mode-match <span style="color: #2d9574;">"Magit"</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #2d9574;">"magit-status"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
                                               buffer<span style="color: #6c3163;">)</span>
                                      <span style="color: #6c3163;">(</span>funcall <span style="color: #2d9574;">(</span>mode-match <span style="color: #2d9574;">"Dired"</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">rx</span> bos <span style="color: #2d9574;">"dired"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
                                               buffer<span style="color: #6c3163;">)</span>
                                      <span style="color: #6c3163;">(</span>funcall <span style="color: #2d9574;">(</span>auto-file<span style="color: #2d9574;">)</span> buffer<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
                            <span style="color: #2d9574;">"*Special*"</span><span style="color: #887070;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
            <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Group remaining buffers by major mode.</span>
            <span style="color: #3a81c3;">(</span>auto-mode<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgfded392" class="outline-2">
<h2 id="orgfded392">Window Management</h2>
<div class="outline-text-2" id="text-orgfded392">
</div>
<div id="outline-container-org5da74a7" class="outline-3">
<h3 id="org5da74a7">Frame Scaling / Zooming</h3>
<div class="outline-text-3" id="text-org5da74a7">
<p>
The keybindings for this are <code>C+M+-</code> and <code>C+M+=</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> default-text-scale<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>default-text-scale-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-default-text-scale"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orga1cfe96" class="outline-3">
<h3 id="orga1cfe96">Window Selection with ace-window</h3>
<div class="outline-text-3" id="text-orga1cfe96">
<p>
<code>ace-window</code> helps with easily switching between windows based on a predefined set of keys used to identify each.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> ace-window<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"M-o"</span> ace-window<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> aw-scope 'frame
           aw-keys '<span style="color: #2d9574;">(</span>?a ?s ?d ?f ?g ?h ?j ?k ?l<span style="color: #2d9574;">)</span>
           aw-minibuffer-flag t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>ace-window-display-mode 1<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-ace-window"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgbfff3bb" class="outline-3">
<h3 id="orgbfff3bb">Window History with winner-mode</h3>
<div class="outline-text-3" id="text-orgbfff3bb">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup winner
  <span style="color: #6c3163;">(</span>winner-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>define-key evil-window-map <span style="color: #2d9574;">"u"</span> 'winner-undo<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>define-key evil-window-map <span style="color: #2d9574;">"U"</span> 'winner-redo<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org830eb31" class="outline-3">
<h3 id="org830eb31">Set Margins for Modes</h3>
<div class="outline-text-3" id="text-org830eb31">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> visual-fill-column<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> visual-fill-column-width 110
        visual-fill-column-center-text t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> org-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-visual-fill-column"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgbf300a3" class="outline-3">
<h3 id="orgbf300a3">Control Buffer Placement</h3>
<div class="outline-text-3" id="text-orgbf300a3">
<p>
Emacs' default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow.  The <code>display-buffer-alist</code> variable controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq display-buffer-base-action</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(display-buffer-reuse-mode-window</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;         </span><span style="color: #2aa1ae; background-color: #ecf3ec;">display-buffer-reuse-window</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;         </span><span style="color: #2aa1ae; background-color: #ecf3ec;">display-buffer-same-window))</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">If a popup does happen, don't resize windows to be equal-sized</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> even-window-sizes nil<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org4f1577c" class="outline-3">
<h3 id="org4f1577c">Taming Popups with Popper.el</h3>
<div class="outline-text-3" id="text-org4f1577c">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/popper-window-height</span> <span style="color: #6c3163;">(</span>window<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let</span> <span style="color: #2d9574;">(</span>buffer-mode <span style="color: #67b11d;">(</span>with-current-buffer <span style="color: #b1951d;">(</span>window-buffer window<span style="color: #b1951d;">)</span>
                      major-mode<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">pcase</span> buffer-mode
      <span style="color: #67b11d;">(</span>'exwm-mode 40<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>_ 15<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> popper
             <span style="color: #3a81c3;">:host</span> github
             <span style="color: #3a81c3;">:repo</span> <span style="color: #2d9574;">"karthink/popper"</span>
             <span style="color: #3a81c3;">:build</span> <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:not</span> autoloads<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-M-'"</span> popper-toggle-latest
           <span style="color: #2d9574;">"M-'"</span> popper-cycle
           <span style="color: #2d9574;">"C-M-\""</span> popper-toggle-type<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> popper-window-height 12
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(popper-window-height</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(lambda (window)</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(let ((buffer-mode (with-current-buffer (window-buffer window)</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;                        </span><span style="color: #2aa1ae; background-color: #ecf3ec;">major-mode)))</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(message "BUFFER MODE: %s" buffer-mode)</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(pcase buffer-mode</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">('exwm-mode 40)</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">('helpful-mode 20)</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">('eshell-mode (progn (message "eshell!") 10))</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(_ 15)))))</span>
           popper-reference-buffers '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"^\\*eshell\\*"</span>
                                      <span style="color: #2d9574;">"^vterm"</span>
                                      help-mode
                                      helpful-mode
                                      compilation-mode<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">popper</span><span style="color: #6c3163;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Needed because I disabled autoloads</span>
  <span style="color: #6c3163;">(</span>popper-mode 1<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgb556d0f" class="outline-2">
<h2 id="orgb556d0f">Credential Management</h2>
<div class="outline-text-2" id="text-orgb556d0f">
<p>
I use <a href="https://www.passwordstore.org/">pass</a> to manage all of my passwords locally.  I also use <a href="https://github.com/DamienCassou/auth-password-store">auth-source-pass</a> as the primary <code>auth-source</code> provider so that all passwords are stored in a single place.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> password-store<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> password-store-password-length 12<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/leader-key-def
    <span style="color: #2d9574;">"ap"</span> '<span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"pass"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">"app"</span> 'password-store-copy
    <span style="color: #2d9574;">"api"</span> 'password-store-insert
    <span style="color: #2d9574;">"apg"</span> 'password-store-generate<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> auth-source-pass<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>auth-source-pass-enable<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> oauth2 <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-password-store"</span>
<span style="color: #2d9574;">"emacs-auth-source-pass"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org958ed9e" class="outline-2">
<h2 id="org958ed9e">File Browsing</h2>
<div class="outline-text-2" id="text-org958ed9e">
</div>
<div id="outline-container-org00accdd" class="outline-3">
<h3 id="org00accdd">Dired</h3>
<div class="outline-text-3" id="text-org00accdd">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> all-the-icons-dired<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> dired-single<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> dired-ranger<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> dired-collapse<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup dired
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dired-listing-switches <span style="color: #2d9574;">"-agho --group-directories-first"</span>
        dired-omit-files <span style="color: #2d9574;">"^\\.[</span><span style="color: #4e3163;">^</span><span style="color: #2d9574;">.].*"</span>
        dired-omit-verbose nil
        dired-hide-details-hide-symlink-targets nil
        delete-by-moving-to-trash t<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>autoload 'dired-omit-mode <span style="color: #2d9574;">"dired-x"</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>add-hook 'dired-load-hook
            <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span>
              <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span>
              <span style="color: #67b11d;">(</span>dired-collapse<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>add-hook 'dired-mode-hook
            <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span>
              <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #67b11d;">)</span>
              <span style="color: #67b11d;">(</span>dired-omit-mode 1<span style="color: #67b11d;">)</span>
              <span style="color: #67b11d;">(</span>dired-hide-details-mode 1<span style="color: #67b11d;">)</span>
              <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> dw/is-termux
                          <span style="color: #3a81c3;">(</span>s-equals? <span style="color: #2d9574;">"/gnu/store/"</span> <span style="color: #6c3163;">(</span>expand-file-name default-directory<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
                <span style="color: #b1951d;">(</span>all-the-icons-dired-mode 1<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
              <span style="color: #67b11d;">(</span>hl-line-mode 1<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>evil-collection-define-key 'normal 'dired-mode-map
    <span style="color: #2d9574;">"h"</span> 'dired-single-up-directory
    <span style="color: #2d9574;">"H"</span> 'dired-omit-mode
    <span style="color: #2d9574;">"l"</span> 'dired-single-buffer
    <span style="color: #2d9574;">"y"</span> 'dired-ranger-copy
    <span style="color: #2d9574;">"X"</span> 'dired-ranger-move
    <span style="color: #2d9574;">"p"</span> 'dired-ranger-paste<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> dired-rainbow<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:load-after</span> dired
   <span style="color: #2d9574;">(</span>dired-rainbow-define-chmod directory <span style="color: #2d9574;">"#6cb2eb"</span> <span style="color: #2d9574;">"d.*"</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define html <span style="color: #2d9574;">"#eb5286"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"css"</span> <span style="color: #2d9574;">"less"</span> <span style="color: #2d9574;">"sass"</span> <span style="color: #2d9574;">"scss"</span> <span style="color: #2d9574;">"htm"</span> <span style="color: #2d9574;">"html"</span> <span style="color: #2d9574;">"jhtm"</span> <span style="color: #2d9574;">"mht"</span> <span style="color: #2d9574;">"eml"</span> <span style="color: #2d9574;">"mustache"</span> <span style="color: #2d9574;">"xhtml"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define xml <span style="color: #2d9574;">"#f2d024"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"xml"</span> <span style="color: #2d9574;">"xsd"</span> <span style="color: #2d9574;">"xsl"</span> <span style="color: #2d9574;">"xslt"</span> <span style="color: #2d9574;">"wsdl"</span> <span style="color: #2d9574;">"bib"</span> <span style="color: #2d9574;">"json"</span> <span style="color: #2d9574;">"msg"</span> <span style="color: #2d9574;">"pgn"</span> <span style="color: #2d9574;">"rss"</span> <span style="color: #2d9574;">"yaml"</span> <span style="color: #2d9574;">"yml"</span> <span style="color: #2d9574;">"rdata"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define document <span style="color: #2d9574;">"#9561e2"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"docm"</span> <span style="color: #2d9574;">"doc"</span> <span style="color: #2d9574;">"docx"</span> <span style="color: #2d9574;">"odb"</span> <span style="color: #2d9574;">"odt"</span> <span style="color: #2d9574;">"pdb"</span> <span style="color: #2d9574;">"pdf"</span> <span style="color: #2d9574;">"ps"</span> <span style="color: #2d9574;">"rtf"</span> <span style="color: #2d9574;">"djvu"</span> <span style="color: #2d9574;">"epub"</span> <span style="color: #2d9574;">"odp"</span> <span style="color: #2d9574;">"ppt"</span> <span style="color: #2d9574;">"pptx"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define markdown <span style="color: #2d9574;">"#ffed4a"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"org"</span> <span style="color: #2d9574;">"etx"</span> <span style="color: #2d9574;">"info"</span> <span style="color: #2d9574;">"markdown"</span> <span style="color: #2d9574;">"md"</span> <span style="color: #2d9574;">"mkd"</span> <span style="color: #2d9574;">"nfo"</span> <span style="color: #2d9574;">"pod"</span> <span style="color: #2d9574;">"rst"</span> <span style="color: #2d9574;">"tex"</span> <span style="color: #2d9574;">"textfile"</span> <span style="color: #2d9574;">"txt"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define database <span style="color: #2d9574;">"#6574cd"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"xlsx"</span> <span style="color: #2d9574;">"xls"</span> <span style="color: #2d9574;">"csv"</span> <span style="color: #2d9574;">"accdb"</span> <span style="color: #2d9574;">"db"</span> <span style="color: #2d9574;">"mdb"</span> <span style="color: #2d9574;">"sqlite"</span> <span style="color: #2d9574;">"nc"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define media <span style="color: #2d9574;">"#de751f"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"mp3"</span> <span style="color: #2d9574;">"mp4"</span> <span style="color: #2d9574;">"mkv"</span> <span style="color: #2d9574;">"MP3"</span> <span style="color: #2d9574;">"MP4"</span> <span style="color: #2d9574;">"avi"</span> <span style="color: #2d9574;">"mpeg"</span> <span style="color: #2d9574;">"mpg"</span> <span style="color: #2d9574;">"flv"</span> <span style="color: #2d9574;">"ogg"</span> <span style="color: #2d9574;">"mov"</span> <span style="color: #2d9574;">"mid"</span> <span style="color: #2d9574;">"midi"</span> <span style="color: #2d9574;">"wav"</span> <span style="color: #2d9574;">"aiff"</span> <span style="color: #2d9574;">"flac"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define image <span style="color: #2d9574;">"#f66d9b"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"tiff"</span> <span style="color: #2d9574;">"tif"</span> <span style="color: #2d9574;">"cdr"</span> <span style="color: #2d9574;">"gif"</span> <span style="color: #2d9574;">"ico"</span> <span style="color: #2d9574;">"jpeg"</span> <span style="color: #2d9574;">"jpg"</span> <span style="color: #2d9574;">"png"</span> <span style="color: #2d9574;">"psd"</span> <span style="color: #2d9574;">"eps"</span> <span style="color: #2d9574;">"svg"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define log <span style="color: #2d9574;">"#c17d11"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"log"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define shell <span style="color: #2d9574;">"#f6993f"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"awk"</span> <span style="color: #2d9574;">"bash"</span> <span style="color: #2d9574;">"bat"</span> <span style="color: #2d9574;">"sed"</span> <span style="color: #2d9574;">"sh"</span> <span style="color: #2d9574;">"zsh"</span> <span style="color: #2d9574;">"vim"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define interpreted <span style="color: #2d9574;">"#38c172"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"py"</span> <span style="color: #2d9574;">"ipynb"</span> <span style="color: #2d9574;">"rb"</span> <span style="color: #2d9574;">"pl"</span> <span style="color: #2d9574;">"t"</span> <span style="color: #2d9574;">"msql"</span> <span style="color: #2d9574;">"mysql"</span> <span style="color: #2d9574;">"pgsql"</span> <span style="color: #2d9574;">"sql"</span> <span style="color: #2d9574;">"r"</span> <span style="color: #2d9574;">"clj"</span> <span style="color: #2d9574;">"cljs"</span> <span style="color: #2d9574;">"scala"</span> <span style="color: #2d9574;">"js"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define compiled <span style="color: #2d9574;">"#4dc0b5"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"asm"</span> <span style="color: #2d9574;">"cl"</span> <span style="color: #2d9574;">"lisp"</span> <span style="color: #2d9574;">"el"</span> <span style="color: #2d9574;">"c"</span> <span style="color: #2d9574;">"h"</span> <span style="color: #2d9574;">"c++"</span> <span style="color: #2d9574;">"h++"</span> <span style="color: #2d9574;">"hpp"</span> <span style="color: #2d9574;">"hxx"</span> <span style="color: #2d9574;">"m"</span> <span style="color: #2d9574;">"cc"</span> <span style="color: #2d9574;">"cs"</span> <span style="color: #2d9574;">"cp"</span> <span style="color: #2d9574;">"cpp"</span> <span style="color: #2d9574;">"go"</span> <span style="color: #2d9574;">"f"</span> <span style="color: #2d9574;">"for"</span> <span style="color: #2d9574;">"ftn"</span> <span style="color: #2d9574;">"f90"</span> <span style="color: #2d9574;">"f95"</span> <span style="color: #2d9574;">"f03"</span> <span style="color: #2d9574;">"f08"</span> <span style="color: #2d9574;">"s"</span> <span style="color: #2d9574;">"rs"</span> <span style="color: #2d9574;">"hi"</span> <span style="color: #2d9574;">"hs"</span> <span style="color: #2d9574;">"pyc"</span> <span style="color: #2d9574;">".java"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define executable <span style="color: #2d9574;">"#8cc4ff"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"exe"</span> <span style="color: #2d9574;">"msi"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define compressed <span style="color: #2d9574;">"#51d88a"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"7z"</span> <span style="color: #2d9574;">"zip"</span> <span style="color: #2d9574;">"bz2"</span> <span style="color: #2d9574;">"tgz"</span> <span style="color: #2d9574;">"txz"</span> <span style="color: #2d9574;">"gz"</span> <span style="color: #2d9574;">"xz"</span> <span style="color: #2d9574;">"z"</span> <span style="color: #2d9574;">"Z"</span> <span style="color: #2d9574;">"jar"</span> <span style="color: #2d9574;">"war"</span> <span style="color: #2d9574;">"ear"</span> <span style="color: #2d9574;">"rar"</span> <span style="color: #2d9574;">"sar"</span> <span style="color: #2d9574;">"xpi"</span> <span style="color: #2d9574;">"apk"</span> <span style="color: #2d9574;">"xz"</span> <span style="color: #2d9574;">"tar"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define packaged <span style="color: #2d9574;">"#faad63"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"deb"</span> <span style="color: #2d9574;">"rpm"</span> <span style="color: #2d9574;">"apk"</span> <span style="color: #2d9574;">"jad"</span> <span style="color: #2d9574;">"jar"</span> <span style="color: #2d9574;">"cab"</span> <span style="color: #2d9574;">"pak"</span> <span style="color: #2d9574;">"pk3"</span> <span style="color: #2d9574;">"vdf"</span> <span style="color: #2d9574;">"vpk"</span> <span style="color: #2d9574;">"bsp"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define encrypted <span style="color: #2d9574;">"#ffed4a"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"gpg"</span> <span style="color: #2d9574;">"pgp"</span> <span style="color: #2d9574;">"asc"</span> <span style="color: #2d9574;">"bfe"</span> <span style="color: #2d9574;">"enc"</span> <span style="color: #2d9574;">"signature"</span> <span style="color: #2d9574;">"sig"</span> <span style="color: #2d9574;">"p12"</span> <span style="color: #2d9574;">"pem"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define fonts <span style="color: #2d9574;">"#6cb2eb"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"afm"</span> <span style="color: #2d9574;">"fon"</span> <span style="color: #2d9574;">"fnt"</span> <span style="color: #2d9574;">"pfb"</span> <span style="color: #2d9574;">"pfm"</span> <span style="color: #2d9574;">"ttf"</span> <span style="color: #2d9574;">"otf"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define partition <span style="color: #2d9574;">"#e3342f"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"dmg"</span> <span style="color: #2d9574;">"iso"</span> <span style="color: #2d9574;">"bin"</span> <span style="color: #2d9574;">"nrg"</span> <span style="color: #2d9574;">"qcow"</span> <span style="color: #2d9574;">"toast"</span> <span style="color: #2d9574;">"vcd"</span> <span style="color: #2d9574;">"vmdk"</span> <span style="color: #2d9574;">"bak"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define vc <span style="color: #2d9574;">"#0074d9"</span> <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"git"</span> <span style="color: #2d9574;">"gitignore"</span> <span style="color: #2d9574;">"gitattributes"</span> <span style="color: #2d9574;">"gitmodules"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   <span style="color: #2d9574;">(</span>dired-rainbow-define-chmod executable-unix <span style="color: #2d9574;">"#38c172"</span> <span style="color: #2d9574;">"-.*x.*"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(defun dw/dired-link (path)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(lexical-let ((target path))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(lambda () (interactive) (message "Path: %s" target) (dired target))))</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(dw/leader-key-def</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"d"   '(:ignore t :which-key "dired")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"dd"  '(dired :which-key "Here")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"dh"  `(,(dw/dired-link "~") :which-key "Home")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"dn"  `(,(dw/dired-link "~/Notes") :which-key "Notes")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"do"  `(,(dw/dired-link "~/Downloads") :which-key "Downloads")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"dp"  `(,(dw/dired-link "~/Pictures") :which-key "Pictures")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"dv"  `(,(dw/dired-link "~/Videos") :which-key "Videos")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"d."  `(,(dw/dired-link "~/.dotfiles") :which-key "dotfiles")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"de"  `(,(dw/dired-link "~/.emacs.d") :which-key ".emacs.d"))</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-dired-single"</span>
<span style="color: #2d9574;">"emacs-dired-hacks"</span>
<span style="color: #2d9574;">"emacs-all-the-icons-dired"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org3b461f3" class="outline-3">
<h3 id="org3b461f3">Opening Files Externally</h3>
<div class="outline-text-3" id="text-org3b461f3">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> openwith<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">openwith</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> openwith-associations
          <span style="color: #67b11d;">(</span>list
           <span style="color: #b1951d;">(</span>list <span style="color: #3a81c3;">(</span>openwith-make-extension-regexp
                  '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">"mpg"</span> <span style="color: #2d9574;">"mpeg"</span> <span style="color: #2d9574;">"mp3"</span> <span style="color: #2d9574;">"mp4"</span>
                    <span style="color: #2d9574;">"avi"</span> <span style="color: #2d9574;">"wmv"</span> <span style="color: #2d9574;">"wav"</span> <span style="color: #2d9574;">"mov"</span> <span style="color: #2d9574;">"flv"</span>
                    <span style="color: #2d9574;">"ogm"</span> <span style="color: #2d9574;">"ogg"</span> <span style="color: #2d9574;">"mkv"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
                 <span style="color: #2d9574;">"mpv"</span>
                 '<span style="color: #3a81c3;">(</span>file<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
           <span style="color: #b1951d;">(</span>list <span style="color: #3a81c3;">(</span>openwith-make-extension-regexp
                  '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">"xbm"</span> <span style="color: #2d9574;">"pbm"</span> <span style="color: #2d9574;">"pgm"</span> <span style="color: #2d9574;">"ppm"</span> <span style="color: #2d9574;">"pnm"</span>
                    <span style="color: #2d9574;">"png"</span> <span style="color: #2d9574;">"gif"</span> <span style="color: #2d9574;">"bmp"</span> <span style="color: #2d9574;">"tif"</span> <span style="color: #2d9574;">"jpeg"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Removed jpg because Telega was</span>
                 <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">causing feh to be opened...</span>
                 <span style="color: #2d9574;">"feh"</span>
                 '<span style="color: #3a81c3;">(</span>file<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
           <span style="color: #b1951d;">(</span>list <span style="color: #3a81c3;">(</span>openwith-make-extension-regexp
                  '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">"pdf"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
                 <span style="color: #2d9574;">"zathura"</span>
                 '<span style="color: #3a81c3;">(</span>file<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-openwith"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org455c79f" class="outline-2">
<h2 id="org455c79f">Org Mode</h2>
<div class="outline-text-2" id="text-org455c79f">
</div>
<div id="outline-container-org9dd730b" class="outline-3">
<h3 id="org9dd730b">Org Configuration</h3>
<div class="outline-text-3" id="text-org9dd730b">
<p>
Set up Org Mode with a baseline configuration.  The following sections will add more things to it.
</p>

<p>
I document and configure my org-mode workflow in a separate document: <a href="Workflow.html">Workflow.org</a>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">TODO: Mode this to another section</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> fill-column 80<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Turn on indentation and auto-fill mode for Org files</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-mode-setup</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span>org-indent-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>variable-pitch-mode 1<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>auto-fill-mode 0<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>visual-line-mode 1<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> evil-auto-indent nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>diminish org-indent-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Make sure Straight pulls Org from Guix</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> dw/is-guix-system
  <span style="color: #6c3163;">(</span>straight-use-package '<span style="color: #2d9574;">(</span>org <span style="color: #3a81c3;">:type</span> built-in<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> org<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:also-load</span> org-tempo dw-org dw-workflow<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook</span> dw/org-mode-setup<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-ellipsis <span style="color: #2d9574;">" &#9662;"</span>
        org-hide-emphasis-markers t
        org-src-fontify-natively t
        org-fontify-quote-and-verse-blocks t
        org-src-tab-acts-natively t
        org-edit-src-content-indentation 2
        org-hide-block-startup nil
        org-src-preserve-indentation nil
        org-startup-folded 'content
        org-cycle-separator-lines 2
        org-capture-bookmark nil<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-modules
    '<span style="color: #2d9574;">(</span>org-crypt
        org-habit
        org-bookmark
        org-eshell
        org-irc<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-refile-targets '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>nil <span style="color: #3a81c3;">:maxlevel</span> . 1<span style="color: #67b11d;">)</span>
                             <span style="color: #67b11d;">(</span>org-agenda-files <span style="color: #3a81c3;">:maxlevel</span> . 1<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-outline-path-complete-in-steps nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-refile-use-outline-path t<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>evil-define-key '<span style="color: #2d9574;">(</span>normal insert visual<span style="color: #2d9574;">)</span> org-mode-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"C-j"</span><span style="color: #2d9574;">)</span> 'org-next-visible-heading<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-define-key '<span style="color: #2d9574;">(</span>normal insert visual<span style="color: #2d9574;">)</span> org-mode-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"C-k"</span><span style="color: #2d9574;">)</span> 'org-previous-visible-heading<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>evil-define-key '<span style="color: #2d9574;">(</span>normal insert visual<span style="color: #2d9574;">)</span> org-mode-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"M-j"</span><span style="color: #2d9574;">)</span> 'org-metadown<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-define-key '<span style="color: #2d9574;">(</span>normal insert visual<span style="color: #2d9574;">)</span> org-mode-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"M-k"</span><span style="color: #2d9574;">)</span> 'org-metaup<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>org-babel-do-load-languages
    'org-babel-load-languages
    '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>emacs-lisp . t<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>ledger . t<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">push</span> '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"conf-unix"</span> . conf-unix<span style="color: #2d9574;">)</span> org-src-lang-modes<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-org"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org03408f6" class="outline-3">
<h3 id="org03408f6">Fonts and Bullets</h3>
<div class="outline-text-3" id="text-org03408f6">
<p>
Use bullet characters instead of asterisks, plus set the header font sizes to something more palatable.  A fair amount of inspiration has been taken from <a href="https://zzamboni.org/post/beautifying-org-mode-in-emacs/">this blog post</a>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
  <span style="color: #6c3163;">(</span>setup <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:pkg</span> org-superstar<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:load-after</span> org<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:hook-into</span> org-mode<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:option</span> org-superstar-remove-leading-stars t
             org-superstar-headline-bullets-list '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"&#9673;"</span> <span style="color: #2d9574;">"&#9675;"</span> <span style="color: #2d9574;">"&#9679;"</span> <span style="color: #2d9574;">"&#9675;"</span> <span style="color: #2d9574;">"&#9679;"</span> <span style="color: #2d9574;">"&#9675;"</span> <span style="color: #2d9574;">"&#9679;"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Replace list hyphen with dot</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(font-lock-add-keywords 'org-mode</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;                         </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(("^ *\\([-]\\) "</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;                             </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "&#8226;"))))))</span>

<span style="color: #3a81c3;">(</span>setup org-faces
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Make sure org-indent face is available</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:also-load</span> org-indent<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
    <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Increase the size of various headings</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-document-title nil <span style="color: #3a81c3;">:font</span> <span style="color: #2d9574;">"Iosevka Aile"</span> <span style="color: #3a81c3;">:weight</span> 'bold <span style="color: #3a81c3;">:height</span> 1.3<span style="color: #2d9574;">)</span>

    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">dolist</span> <span style="color: #67b11d;">(</span>face '<span style="color: #b1951d;">(</span><span style="color: #3a81c3;">(</span>org-level-1 . 1.2<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>org-level-2 . 1.1<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>org-level-3 . 1.05<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>org-level-4 . 1.0<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>org-level-5 . 1.1<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>org-level-6 . 1.1<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>org-level-7 . 1.1<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>org-level-8 . 1.1<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>set-face-attribute <span style="color: #b1951d;">(</span>car face<span style="color: #b1951d;">)</span> nil <span style="color: #3a81c3;">:font</span> <span style="color: #2d9574;">"Iosevka Aile"</span> <span style="color: #3a81c3;">:weight</span> 'medium <span style="color: #3a81c3;">:height</span> <span style="color: #b1951d;">(</span>cdr face<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>

    <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Ensure that anything that should be fixed-pitch in Org files appears that way</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-block nil <span style="color: #3a81c3;">:foreground</span> nil <span style="color: #3a81c3;">:inherit</span> 'fixed-pitch<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-table nil  <span style="color: #3a81c3;">:inherit</span> 'fixed-pitch<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-formula nil  <span style="color: #3a81c3;">:inherit</span> 'fixed-pitch<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-code nil   <span style="color: #3a81c3;">:inherit</span> '<span style="color: #67b11d;">(</span>shadow fixed-pitch<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-indent nil <span style="color: #3a81c3;">:inherit</span> '<span style="color: #67b11d;">(</span>org-hide fixed-pitch<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-verbatim nil <span style="color: #3a81c3;">:inherit</span> '<span style="color: #67b11d;">(</span>shadow fixed-pitch<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-special-keyword nil <span style="color: #3a81c3;">:inherit</span> '<span style="color: #67b11d;">(</span>font-lock-comment-face fixed-pitch<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-meta-line nil <span style="color: #3a81c3;">:inherit</span> '<span style="color: #67b11d;">(</span>font-lock-comment-face fixed-pitch<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-checkbox nil <span style="color: #3a81c3;">:inherit</span> 'fixed-pitch<span style="color: #2d9574;">)</span>

    <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Get rid of the background on column views</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-column nil <span style="color: #3a81c3;">:background</span> nil<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-attribute 'org-column-title nil <span style="color: #3a81c3;">:background</span> nil<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">TODO: Others to consider</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(org-property-value ((t (:inherit fixed-pitch))) t)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'(org-verbatim ((t (:inherit (shadow fixed-pitch))))))</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-org-superstar"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgc3e9c32" class="outline-3">
<h3 id="orgc3e9c32">Block Templates</h3>
<div class="outline-text-3" id="text-orgc3e9c32">
<p>
These templates enable you to type things like <code>&lt;el</code> and then hit <code>Tab</code> to expand
the template.  More documentation can be found at the Org Mode <a href="https://orgmode.org/manual/Easy-templates.html">Easy Templates</a>
documentation page.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">This is needed as of Org 9.2</span>
<span style="color: #3a81c3;">(</span>setup org-tempo
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"sh"</span> . <span style="color: #2d9574;">"src sh"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"el"</span> . <span style="color: #2d9574;">"src emacs-lisp"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"li"</span> . <span style="color: #2d9574;">"src lisp"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"sc"</span> . <span style="color: #2d9574;">"src scheme"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"ts"</span> . <span style="color: #2d9574;">"src typescript"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"py"</span> . <span style="color: #2d9574;">"src python"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"go"</span> . <span style="color: #2d9574;">"src go"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"yaml"</span> . <span style="color: #2d9574;">"src yaml"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-to-list 'org-structure-template-alist '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"json"</span> . <span style="color: #2d9574;">"src json"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org86315b1" class="outline-3">
<h3 id="org86315b1">Pomodoro</h3>
<div class="outline-text-3" id="text-org86315b1">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> org-pomodoro<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-pomodoro-start-sound <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/sounds/focus_bell.wav"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-pomodoro-short-break-sound <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/sounds/three_beeps.wav"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-pomodoro-long-break-sound <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/sounds/three_beeps.wav"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-pomodoro-finished-sound <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/sounds/meditation_bell.wav"</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>dw/leader-key-def
    <span style="color: #2d9574;">"op"</span>  '<span style="color: #2d9574;">(</span>org-pomodoro <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"pomodoro"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-org-pomodoro"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org67bd7c9" class="outline-3">
<h3 id="org67bd7c9">Protocol</h3>
<div class="outline-text-3" id="text-org67bd7c9">
<p>
This is probably not needed if I plan to use custom functions that are invoked
through <code>emacsclient.</code>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">org-protocol</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org8c030bc" class="outline-3">
<h3 id="org8c030bc">Bindings</h3>
<div class="outline-text-3" id="text-org8c030bc">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> evil-org<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> org-mode org-agenda-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">evil-org</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">evil-org-agenda</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-org-set-key-theme '<span style="color: #2d9574;">(</span>navigation todo insert textobjects additional<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-org-agenda-set-keys<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>dw/leader-key-def
  <span style="color: #2d9574;">"o"</span>   '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"org mode"</span><span style="color: #6c3163;">)</span>

  <span style="color: #2d9574;">"oi"</span>  '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"insert"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"oil"</span> '<span style="color: #6c3163;">(</span>org-insert-link <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"insert link"</span><span style="color: #6c3163;">)</span>

  <span style="color: #2d9574;">"on"</span>  '<span style="color: #6c3163;">(</span>org-toggle-narrow-to-subtree <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"toggle narrow"</span><span style="color: #6c3163;">)</span>

  <span style="color: #2d9574;">"os"</span>  '<span style="color: #6c3163;">(</span>dw/counsel-rg-org-files <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"search notes"</span><span style="color: #6c3163;">)</span>

  <span style="color: #2d9574;">"oa"</span>  '<span style="color: #6c3163;">(</span>org-agenda <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"status"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"ot"</span>  '<span style="color: #6c3163;">(</span>org-todo-list <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"todos"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"oc"</span>  '<span style="color: #6c3163;">(</span>org-capture t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"capture"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"ox"</span>  '<span style="color: #6c3163;">(</span>org-export-dispatch t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"export"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-evil-org"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org19b9c61" class="outline-3">
<h3 id="org19b9c61">Update Table of Contents on Save</h3>
<div class="outline-text-3" id="text-org19b9c61">
<p>
It's nice to have a table of contents section for long literate configuration files (like this one!) so I use <code>org-make-toc</code> to automatically update the ToC in any header with a property named <code>TOC</code>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> org-make-toc<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> org-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-org-make-toc"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org0822f96" class="outline-3">
<h3 id="org0822f96">Calendar Sync</h3>
<div class="outline-text-3" id="text-org0822f96">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> org-caldav<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:delay</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-caldav-url <span style="color: #2d9574;">"https://caldav.fastmail.com/dav/calendars/user/daviwil@fastmail.fm/"</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">org-caldav-files '("~/Notes/Calendar/Personal.org" "~/Notes/Calendar/Work.org")</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">org-caldav-inbox '("~/Notes/Calendar/Personal.org" "~/Notes/Calendar/Work.org")</span>
        org-caldav-calendar-id <span style="color: #2d9574;">"fe098bfb-0726-4e10-bff2-55f8278c8a56"</span>
        org-caldav-files '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"~/Notes/Calendar/Personal.org"</span><span style="color: #2d9574;">)</span>
        org-caldav-inbox <span style="color: #2d9574;">"~/Notes/Calendar/PersonalInbox.org"</span>
        org-caldav-calendars
         '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span><span style="color: #3a81c3;">:calendar-id</span> <span style="color: #2d9574;">"fe098bfb-0726-4e10-bff2-55f8278c8a56"</span>
            <span style="color: #3a81c3;">:files</span> <span style="color: #b1951d;">(</span><span style="color: #2d9574;">"~/Notes/Calendar/Personal.org"</span><span style="color: #b1951d;">)</span>
            <span style="color: #3a81c3;">:inbox</span> <span style="color: #2d9574;">"~/Notes/Calendar/PersonalInbox.org"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(:calendar-id "8f150437-cc57-4ba0-9200-d1d98389e2e4"</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:files ("~/Notes/Calendar/Work.org")</span>
           <span style="color: #2aa1ae; background-color: #ecf3ec;">;;  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:inbox "~/Notes/Calendar/Work.org"))</span>
        org-caldav-delete-org-entries 'always
        org-caldav-delete-calendar-entries 'never<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-org-caldav"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org971ec59" class="outline-3">
<h3 id="org971ec59">Reminders</h3>
<div class="outline-text-3" id="text-org971ec59">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(use-package org-wild-notifier</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:after org</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:config</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">; Make sure we receive notifications for non-TODO events</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">; like those synced from Google Calendar</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq org-wild-notifier-keyword-whitelist nil)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq org-wild-notifier-notification-title "Agenda Reminder")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq org-wild-notifier-alert-time 15)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(org-wild-notifier-mode))</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org3137b29" class="outline-3">
<h3 id="org3137b29">Presentations</h3>
<div class="outline-text-3" id="text-org3137b29">
</div>
<div id="outline-container-org2a75ad5" class="outline-4">
<h4 id="org2a75ad5">org-present</h4>
<div class="outline-text-4" id="text-org2a75ad5">
<p>
<code>org-present</code> is the package I use for giving presentations in Emacs.  I like it because it's simple and allows me to customize the display of it pretty easily.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-present-prepare-slide</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span>org-overview<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-show-entry<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-show-children<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-present-hook</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-local</span> face-remapping-alist '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>default <span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:height</span> 1.5<span style="color: #b1951d;">)</span> variable-pitch<span style="color: #67b11d;">)</span>
                                     <span style="color: #67b11d;">(</span>header-line <span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:height</span> 4.5<span style="color: #b1951d;">)</span> variable-pitch<span style="color: #67b11d;">)</span>
                                     <span style="color: #67b11d;">(</span>org-document-title <span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:height</span> 1.75<span style="color: #b1951d;">)</span> org-document-title<span style="color: #67b11d;">)</span>
                                     <span style="color: #67b11d;">(</span>org-code <span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:height</span> 1.55<span style="color: #b1951d;">)</span> org-code<span style="color: #67b11d;">)</span>
                                     <span style="color: #67b11d;">(</span>org-verbatim <span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:height</span> 1.55<span style="color: #b1951d;">)</span> org-verbatim<span style="color: #67b11d;">)</span>
                                     <span style="color: #67b11d;">(</span>org-block <span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:height</span> 1.25<span style="color: #b1951d;">)</span> org-block<span style="color: #67b11d;">)</span>
                                     <span style="color: #67b11d;">(</span>org-block-begin-line <span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:height</span> 0.7<span style="color: #b1951d;">)</span> org-block<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> header-line-format <span style="color: #2d9574;">" "</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-appear-mode -1<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-display-inline-images<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/org-present-prepare-slide<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/kill-panel<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-present-quit-hook</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-local</span> face-remapping-alist '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>default variable-pitch default<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> header-line-format nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-present-small<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-remove-inline-images<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-appear-mode 1<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/start-panel<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-present-prev</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-present-prev<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/org-present-prepare-slide<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-present-next</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-present-next<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/org-present-prepare-slide<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #2d9574;">(</span>fboundp 'live-crafter-add-timestamp<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>live-crafter-add-timestamp <span style="color: #67b11d;">(</span>substring-no-properties <span style="color: #b1951d;">(</span>org-get-heading t t t t<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> org-present<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:with-map</span> org-present-mode-keymap
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"C-c C-j"</span> dw/org-present-next
           <span style="color: #2d9574;">"C-c C-k"</span> dw/org-present-prev<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook</span> dw/org-present-hook<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:with-hook</span> org-present-mode-quit-hook
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:hook</span> dw/org-present-quit-hook<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>


<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-org-present"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgc19920a" class="outline-3">
<h3 id="orgc19920a">Org Roam</h3>
<div class="outline-text-3" id="text-orgc19920a">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defvar</span> <span style="color: #715ab1;">dw/org-roam-project-template</span>
  '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">"p"</span> <span style="color: #2d9574;">"project"</span> plain <span style="color: #2d9574;">"** TODO %?"</span>
    <span style="color: #3a81c3;">:if-new</span> <span style="color: #2d9574;">(</span>file+head+olp <span style="color: #2d9574;">"%&lt;%Y%m%d%H%M%S&gt;-${slug}.org"</span>
                           <span style="color: #2d9574;">"#+title: ${title}\n#+category: ${title}\n#+filetags: Project\n"</span>
                           <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"Tasks"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">my/org-roam-filter-by-tag</span> <span style="color: #6c3163;">(</span>tag-name<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #2d9574;">(</span>node<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>member tag-name <span style="color: #67b11d;">(</span>org-roam-node-tags node<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">my/org-roam-list-notes-by-tag</span> <span style="color: #6c3163;">(</span>tag-name<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>mapcar #'org-roam-node-file
          <span style="color: #2d9574;">(</span>seq-filter
           <span style="color: #67b11d;">(</span>my/org-roam-filter-by-tag tag-name<span style="color: #67b11d;">)</span>
           <span style="color: #67b11d;">(</span>org-roam-node-list<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">org-roam-node-insert-immediate</span> <span style="color: #6c3163;">(</span>arg <span style="color: #ba2f59; font-weight: bold;">&amp;rest</span> args<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span> <span style="color: #2d9574;">"P"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>args <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">push</span> arg args<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>org-roam-capture-templates <span style="color: #b1951d;">(</span>list <span style="color: #3a81c3;">(</span>append <span style="color: #6c3163;">(</span>car org-roam-capture-templates<span style="color: #6c3163;">)</span>
                                                  '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:immediate-finish</span> t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>apply #'org-roam-node-insert args<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-roam-goto-month</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-roam-capture- <span style="color: #3a81c3;">:goto</span> <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #67b11d;">(</span>org-roam-node-from-title-or-alias <span style="color: #b1951d;">(</span>format-time-string <span style="color: #2d9574;">"%Y-%B"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span> '<span style="color: #67b11d;">(</span>4<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
                     <span style="color: #3a81c3;">:node</span> <span style="color: #2d9574;">(</span>org-roam-node-create<span style="color: #2d9574;">)</span>
                     <span style="color: #3a81c3;">:templates</span> '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span><span style="color: #2d9574;">"m"</span> <span style="color: #2d9574;">"month"</span> plain <span style="color: #2d9574;">"\n* Goals\n\n%?* Summary\n\n"</span>
                                   <span style="color: #3a81c3;">:if-new</span> <span style="color: #b1951d;">(</span>file+head <span style="color: #2d9574;">"%&lt;%Y-%B&gt;.org"</span>
                                                      <span style="color: #2d9574;">"#+title: %&lt;%Y-%B&gt;\n#+filetags: Project\n"</span><span style="color: #b1951d;">)</span>
                                   <span style="color: #3a81c3;">:unnarrowed</span> t<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-roam-goto-year</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>org-roam-capture- <span style="color: #3a81c3;">:goto</span> <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #67b11d;">(</span>org-roam-node-from-title-or-alias <span style="color: #b1951d;">(</span>format-time-string <span style="color: #2d9574;">"%Y"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span> '<span style="color: #67b11d;">(</span>4<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
                     <span style="color: #3a81c3;">:node</span> <span style="color: #2d9574;">(</span>org-roam-node-create<span style="color: #2d9574;">)</span>
                     <span style="color: #3a81c3;">:templates</span> '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span><span style="color: #2d9574;">"y"</span> <span style="color: #2d9574;">"year"</span> plain <span style="color: #2d9574;">"\n* Goals\n\n%?* Summary\n\n"</span>
                                   <span style="color: #3a81c3;">:if-new</span> <span style="color: #b1951d;">(</span>file+head <span style="color: #2d9574;">"%&lt;%Y&gt;.org"</span>
                                                      <span style="color: #2d9574;">"#+title: %&lt;%Y&gt;\n#+filetags: Project\n"</span><span style="color: #b1951d;">)</span>
                                   <span style="color: #3a81c3;">:unnarrowed</span> t<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/org-roam-capture-task</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Add the project file to the agenda after capture is finished</span>
  <span style="color: #6c3163;">(</span>add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook<span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Capture the new task, creating the project file if necessary</span>
  <span style="color: #6c3163;">(</span>org-roam-capture- <span style="color: #3a81c3;">:node</span> <span style="color: #2d9574;">(</span>org-roam-node-read
                            nil
                            <span style="color: #67b11d;">(</span>my/org-roam-filter-by-tag <span style="color: #2d9574;">"Project"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
                     <span style="color: #3a81c3;">:templates</span> <span style="color: #2d9574;">(</span>list dw/org-roam-project-template<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">my/org-roam-refresh-agenda-list</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-agenda-files <span style="color: #2d9574;">(</span>my/org-roam-list-notes-by-tag <span style="color: #2d9574;">"Project"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defhydra</span> dw/org-roam-jump-menu <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hint</span> nil<span style="color: #6c3163;">)</span>
  <span style="color: #da8b55;">"</span>
<span style="color: #da8b55;">^Dailies^        ^Capture^       ^Jump^</span>
<span style="color: #da8b55;">^^^^^^^^-------------------------------------------------</span>
<span style="color: #da8b55;">_t_: today       _T_: today       _m_: current month</span>
<span style="color: #da8b55;">_r_: tomorrow    _R_: tomorrow    _e_: current year</span>
<span style="color: #da8b55;">_y_: yesterday   _Y_: yesterday   ^ ^</span>
<span style="color: #da8b55;">_d_: date        ^ ^              ^ ^</span>
<span style="color: #da8b55;">"</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"t"</span> org-roam-dailies-goto-today<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"r"</span> org-roam-dailies-goto-tomorrow<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"y"</span> org-roam-dailies-goto-yesterday<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"d"</span> org-roam-dailies-goto-date<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"T"</span> org-roam-dailies-capture-today<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"R"</span> org-roam-dailies-capture-tomorrow<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"Y"</span> org-roam-dailies-capture-yesterday<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"m"</span> dw/org-roam-goto-month<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"e"</span> dw/org-roam-goto-year<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"c"</span> nil <span style="color: #2d9574;">"cancel"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> org-roam <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> org-roam-v2-ack t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/daily-note-filename <span style="color: #2d9574;">"%&lt;%Y-%m-%d&gt;.org"</span>
        dw/daily-note-header <span style="color: #2d9574;">"#+title: %&lt;%Y-%m-%d %a&gt;\n\n[[roam:%&lt;%Y-%B&gt;]]\n\n"</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
    <span style="color: #2d9574;">(</span>org-roam-db-autosync-mode<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>my/org-roam-refresh-agenda-list<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span>
   org-roam-directory <span style="color: #2d9574;">"~/Notes/Roam/"</span>
   org-roam-dailies-directory <span style="color: #2d9574;">"Journal/"</span>
   org-roam-completion-everywhere t
   org-roam-capture-templates
   '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span><span style="color: #2d9574;">"d"</span> <span style="color: #2d9574;">"default"</span> plain <span style="color: #2d9574;">"%?"</span>
      <span style="color: #3a81c3;">:if-new</span> <span style="color: #b1951d;">(</span>file+head <span style="color: #2d9574;">"%&lt;%Y%m%d%H%M%S&gt;-${slug}.org"</span>
                         <span style="color: #2d9574;">"#+title: ${title}\n"</span><span style="color: #b1951d;">)</span>
      <span style="color: #3a81c3;">:unnarrowed</span> t<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
   org-roam-dailies-capture-templates
   `<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span><span style="color: #2d9574;">"d"</span> <span style="color: #2d9574;">"default"</span> entry
      <span style="color: #2d9574;">"* %?"</span>
      <span style="color: #3a81c3;">:if-new</span> <span style="color: #b1951d;">(</span>file+head ,dw/daily-note-filename
                         ,dw/daily-note-header<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"t"</span> <span style="color: #2d9574;">"task"</span> entry
      <span style="color: #2d9574;">"* TODO %?\n  %U\n  %a\n  %i"</span>
      <span style="color: #3a81c3;">:if-new</span> <span style="color: #b1951d;">(</span>file+head+olp ,dw/daily-note-filename
                             ,dw/daily-note-header
                             <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Tasks"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
      <span style="color: #3a81c3;">:empty-lines</span> 1<span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"l"</span> <span style="color: #2d9574;">"log entry"</span> entry
      <span style="color: #2d9574;">"* %&lt;%I:%M %p&gt; - %?"</span>
      <span style="color: #3a81c3;">:if-new</span> <span style="color: #b1951d;">(</span>file+head+olp ,dw/daily-note-filename
                             ,dw/daily-note-header
                             <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Log"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"j"</span> <span style="color: #2d9574;">"journal"</span> entry
      <span style="color: #2d9574;">"* %&lt;%I:%M %p&gt; - Journal  :journal:\n\n%?\n\n"</span>
      <span style="color: #3a81c3;">:if-new</span> <span style="color: #b1951d;">(</span>file+head+olp ,dw/daily-note-filename
                             ,dw/daily-note-header
                             <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Log"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"m"</span> <span style="color: #2d9574;">"meeting"</span> entry
      <span style="color: #2d9574;">"* %&lt;%I:%M %p&gt; - %^{Meeting Title}  :meetings:\n\n%?\n\n"</span>
      <span style="color: #3a81c3;">:if-new</span> <span style="color: #b1951d;">(</span>file+head+olp ,dw/daily-note-filename
                             ,dw/daily-note-header
                             <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Log"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-c n l"</span> org-roam-buffer-toggle
           <span style="color: #2d9574;">"C-c n f"</span> org-roam-node-find
           <span style="color: #2d9574;">"C-c n d"</span> dw/org-roam-jump-menu/body
           <span style="color: #2d9574;">"C-c n c"</span> org-roam-dailies-capture-today
           <span style="color: #2d9574;">"C-c n t"</span> dw/org-roam-capture-task
           <span style="color: #2d9574;">"C-c n g"</span> org-roam-graph<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"C-c n i"</span> org-roam-node-insert
         <span style="color: #2d9574;">"C-c n I"</span> org-roam-insert-immediate<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>


</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs-org-roam"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgcf3babe" class="outline-3">
<h3 id="orgcf3babe">Auto-show Markup Symbols</h3>
<div class="outline-text-3" id="text-orgcf3babe">
<p>
This package makes it much easier to edit Org documents when <code>org-hide-emphasis-markers</code> is turned on.  It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them.  No more fumbling around with <code>=</code> and <code>*</code> characters!
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> org-appear<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> org-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-org-appear"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgb4e8694" class="outline-2">
<h2 id="orgb4e8694">Development</h2>
<div class="outline-text-2" id="text-orgb4e8694">
<p>
Configuration for various programming languages and dev tools that I use.
</p>
</div>

<div id="outline-container-orgf1d8309" class="outline-3">
<h3 id="orgf1d8309">Git</h3>
<div class="outline-text-3" id="text-orgf1d8309">
</div>
<div id="outline-container-org651c0c4" class="outline-4">
<h4 id="org651c0c4">Magit</h4>
<div class="outline-text-4" id="text-org651c0c4">
<p>
<a href="https://magit.vc/manual/magit/">https://magit.vc/manual/magit/</a>
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> magit<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:also-load</span> magit-todos<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-M-;"</span> magit-status<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-magit"</span>
<span style="color: #2d9574;">"emacs-magit-todos"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org3c889d5" class="outline-4">
<h4 id="org3c889d5">Forge</h4>
<div class="outline-text-4" id="text-org3c889d5">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> forge<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-forge"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgbfb1c5f" class="outline-4">
<h4 id="orgbfb1c5f">magit-todos</h4>
<div class="outline-text-4" id="text-orgbfb1c5f">
<p>
This is an interesting extension to Magit that shows a TODOs section in your git status buffer containing all lines with TODO (or other similar words) in files contained within the repo.  More information at the <a href="https://github.com/alphapapa/magit-todos">GitHub repo</a>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> magit-todos<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-magit-todos"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org3791220" class="outline-4">
<h4 id="org3791220">git-link</h4>
<div class="outline-text-4" id="text-org3791220">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> git-link<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> git-link-open-in-browser t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/leader-key-def
    <span style="color: #2d9574;">"gL"</span>  'git-link<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-git-link"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org34706e3" class="outline-4">
<h4 id="org34706e3"><span class="todo TODO">TODO</span> Git Gutter</h4>
<div class="outline-text-4" id="text-org34706e3">
<p>
Get rid of non-fringe package?
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> git-gutter <span style="color: #3a81c3;">:straight</span> git-gutter-fringe<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> text-mode prog-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> git-gutter:update-interval 2<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">git-gutter-fringe</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>set-face-foreground 'git-gutter-fr:added <span style="color: #2d9574;">"LightGreen"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>fringe-helper-define 'git-gutter-fr:added nil
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span><span style="color: #2d9574;">)</span>

    <span style="color: #2d9574;">(</span>set-face-foreground 'git-gutter-fr:modified <span style="color: #2d9574;">"LightGoldenrod"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>fringe-helper-define 'git-gutter-fr:modified nil
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span><span style="color: #2d9574;">)</span>

    <span style="color: #2d9574;">(</span>set-face-foreground 'git-gutter-fr:deleted <span style="color: #2d9574;">"LightCoral"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>fringe-helper-define 'git-gutter-fr:deleted nil
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">".........."</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span>
      <span style="color: #2d9574;">"XXXXXXXXXX"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">These characters are used in terminal mode</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> git-gutter:modified-sign <span style="color: #2d9574;">"&#8801;"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> git-gutter:added-sign <span style="color: #2d9574;">"&#8801;"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> git-gutter:deleted-sign <span style="color: #2d9574;">"&#8801;"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>set-face-foreground 'git-gutter:added <span style="color: #2d9574;">"LightGreen"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>set-face-foreground 'git-gutter:modified <span style="color: #2d9574;">"LightGoldenrod"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>set-face-foreground 'git-gutter:deleted <span style="color: #2d9574;">"LightCoral"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-git-gutter"</span>
<span style="color: #2d9574;">"emacs-git-gutter-fringe"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgd04700a" class="outline-4">
<h4 id="orgd04700a">Send e-mail for Git patches</h4>
<div class="outline-text-4" id="text-orgd04700a">
<p>
OK, this isn't Emacs configuration, but it's relevant to development!
</p>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"git"</span>
<span style="color: #2d9574;">"git:send-email"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org8a056ee" class="outline-3">
<h3 id="org8a056ee">Projectile</h3>
<div class="outline-text-3" id="text-org8a056ee">
</div>
<div id="outline-container-org9d38352" class="outline-4">
<h4 id="org9d38352">Initial Setup</h4>
<div class="outline-text-4" id="text-org9d38352">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/switch-project-action</span> <span style="color: #6c3163;">()</span>
  <span style="color: #da8b55;">"Switch to a workspace with the project name and start `</span><span style="color: #4e3163;">magit-status</span><span style="color: #da8b55;">'."</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">TODO: Switch to EXWM workspace 1?</span>
  <span style="color: #6c3163;">(</span>persp-switch <span style="color: #2d9574;">(</span>projectile-project-name<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>magit-status<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> projectile<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #2d9574;">(</span>file-directory-p <span style="color: #2d9574;">"~/Projects/Code"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> projectile-project-search-path '<span style="color: #67b11d;">(</span><span style="color: #2d9574;">"~/Projects/Code"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> projectile-switch-project-action #'dw/switch-project-action<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>projectile-mode<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-M-p"</span> projectile-find-file
           <span style="color: #2d9574;">"C-c p"</span> projectile-command-map<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>dw/leader-key-def
    <span style="color: #2d9574;">"pf"</span>  'projectile-find-file
    <span style="color: #2d9574;">"ps"</span>  'projectile-switch-project
    <span style="color: #2d9574;">"pF"</span>  'consult-ripgrep
    <span style="color: #2d9574;">"pp"</span>  'projectile-find-file
    <span style="color: #2d9574;">"pc"</span>  'projectile-compile-project
    <span style="color: #2d9574;">"pd"</span>  'projectile-dired<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-projectile"</span>
<span style="color: #2d9574;">"ripgrep"</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">For counsel-projectile-rg</span>
<span style="color: #2d9574;">"the-silver-searcher"</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">For counsel-projectile-ag</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org7bb528e" class="outline-4">
<h4 id="org7bb528e">Project Configurations</h4>
<div class="outline-text-4" id="text-org7bb528e">
<p>
This section contains project configurations for specific projects that I can't drop a <code>.dir-locals.el</code> file into.  Documentation on this approach can be found in the <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html">Emacs manual</a>.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>dir-locals-set-class-variables 'Atom
  `<span style="color: #6c3163;">(</span><span style="color: #2d9574;">(</span>nil . <span style="color: #67b11d;">(</span><span style="color: #b1951d;">(</span>projectile-project-name . <span style="color: #2d9574;">"Atom"</span><span style="color: #b1951d;">)</span>
            <span style="color: #b1951d;">(</span>projectile-project-compilation-dir . nil<span style="color: #b1951d;">)</span>
            <span style="color: #b1951d;">(</span>projectile-project-compilation-cmd . <span style="color: #2d9574;">"script/build"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>dir-locals-set-directory-class <span style="color: #6c3163;">(</span>expand-file-name <span style="color: #2d9574;">"~/Projects/Code/atom"</span><span style="color: #6c3163;">)</span> 'Atom<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgbbf17c4" class="outline-3">
<h3 id="orgbbf17c4">Languages</h3>
<div class="outline-text-3" id="text-orgbbf17c4">
</div>
<div id="outline-container-orgcd22843" class="outline-4">
<h4 id="orgcd22843">Language Server Support</h4>
<div class="outline-text-4" id="text-orgcd22843">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> lsp-mode <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> typescript-mode js2-mode web-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"TAB"</span> completion-at-point<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> lsp-headerline-breadcrumb-enable nil<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>dw/leader-key-def
    <span style="color: #2d9574;">"l"</span> '<span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"lsp"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">"ld"</span> 'xref-find-definitions
    <span style="color: #2d9574;">"lr"</span> 'xref-find-references
    <span style="color: #2d9574;">"ln"</span> 'lsp-ui-find-next-reference
    <span style="color: #2d9574;">"lp"</span> 'lsp-ui-find-prev-reference
    <span style="color: #2d9574;">"ls"</span> 'counsel-imenu
    <span style="color: #2d9574;">"le"</span> 'lsp-ui-flycheck-list
    <span style="color: #2d9574;">"lS"</span> 'lsp-ui-sideline-mode
    <span style="color: #2d9574;">"lX"</span> 'lsp-execute-code-action<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> lsp-ui <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> lsp-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
   <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">progn</span>
     <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> lsp-ui-sideline-enable t<span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> lsp-ui-sideline-show-hover nil<span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> lsp-ui-doc-position 'bottom<span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span>lsp-ui-doc-show<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs-lsp-mode"</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs-lsp-ui"</span>

</pre>
</div>
</div>

<ul class="org-ul">
<li><a id="orgcbbcf36"></a>Eglot<br />
<div class="outline-text-5" id="text-orgcbbcf36">
<p>
Trying out Eglot for a bit to see how I like it compared to lsp-mode.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> eglot<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-hook 'typescript-mode-hook #'eglot-ensure<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-eglot"</span>

</pre>
</div>
</div>
</li>
</ul>
</div>

<div id="outline-container-org3ef4b44" class="outline-4">
<h4 id="org3ef4b44">Debug Adapter Support</h4>
<div class="outline-text-4" id="text-org3ef4b44">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> dap-mode <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Assuming that `</span><span style="color: #4e3163; background-color: #ecf3ec;">dap-debug</span><span style="color: #2aa1ae; background-color: #ecf3ec;">' will invoke all this</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:option</span> lsp-enable-dap-auto-configure nil<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>dap-ui-mode 1<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>dap-tooltip-mode 1<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>dap-node-setup<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgcd588a3" class="outline-4">
<h4 id="orgcd588a3">Meta Lisp</h4>
<div class="outline-text-4" id="text-orgcd588a3">
<p>
Here are packages that are useful across different Lisp and Scheme implementations:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> lispy<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> emacs-lisp-mode scheme-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> lispyville<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> lispy-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
    <span style="color: #2d9574;">(</span>lispyville-set-key-theme '<span style="color: #67b11d;">(</span>operators c-w additional
                                additional-movement slurp/barf-cp
                                prettify<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-lispy"</span>
<span style="color: #2d9574;">"emacs-lispyville"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org9780c6b" class="outline-4">
<h4 id="org9780c6b">Common Lisp</h4>
<div class="outline-text-4" id="text-org9780c6b">
<p>
Not currently doing any Common Lisp development so these packages are disabled for now.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> sly<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.lisp\\'"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> slime<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.lisp\\'"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orga0b3e59" class="outline-4">
<h4 id="orga0b3e59">Scheme</h4>
<div class="outline-text-4" id="text-orga0b3e59">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Include .sld library definition files</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> scheme-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.sld\\'"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org04a5183" class="outline-4">
<h4 id="org04a5183">TypeScript and JavaScript</h4>
<div class="outline-text-4" id="text-org04a5183">
<p>
Configure TypeScript and JavaScript language modes
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> typescript-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.ts\\'"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> typescript-indent-level 2<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/set-js-indentation</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> js-indent-level 2<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> evil-shift-width js-indent-level<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> tab-width 2<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> js2-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.jsx?\\'"</span><span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Use js2-mode for Node scripts</span>
  <span style="color: #6c3163;">(</span>add-to-list 'magic-mode-alist '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"#!/usr/bin/env node"</span> . js2-mode<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Don't use built-in syntax checking</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> js2-mode-show-strict-warnings nil<span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set up proper indentation in JavaScript and JSON files</span>
  <span style="color: #6c3163;">(</span>add-hook 'js2-mode-hook #'dw/set-js-indentation<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-hook 'json-mode-hook #'dw/set-js-indentation<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> apheleia<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>apheleia-global-mode +1<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-js2-mode"</span>
<span style="color: #2d9574;">"emacs-typescript-mode"</span>
<span style="color: #2d9574;">"emacs-apheleia"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgf358c6c" class="outline-4">
<h4 id="orgf358c6c">C/C++</h4>
<div class="outline-text-4" id="text-orgf358c6c">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> ccls<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook</span> lsp<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> c-mode c++-mode objc-mode cuda-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"ccls"</span>
<span style="color: #2d9574;">"emacs-ccls"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org0bc2656" class="outline-4">
<h4 id="org0bc2656">Go</h4>
<div class="outline-text-4" id="text-org0bc2656">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> go-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook</span> lsp-deferred<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-go-mode"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org606a966" class="outline-4">
<h4 id="org606a966">Rust</h4>
<div class="outline-text-4" id="text-org606a966">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> rust-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.rs\\'"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> rust-format-on-save t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> cargo <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-rust-mode"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgd9ca27f" class="outline-4">
<h4 id="orgd9ca27f">Emacs Lisp</h4>
<div class="outline-text-4" id="text-orgd9ca27f">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup emacs-lisp-mode
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook</span> flycheck-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> helpful<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> counsel-describe-function-function #'helpful-callable
           counsel-describe-variable-function #'helpful-variable<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">[</span>remap describe-function<span style="color: #2d9574;">]</span> helpful-function
           <span style="color: #2d9574;">[</span>remap describe-symbol<span style="color: #2d9574;">]</span> helpful-symbol
           <span style="color: #2d9574;">[</span>remap describe-variable<span style="color: #2d9574;">]</span> helpful-variable
           <span style="color: #2d9574;">[</span>remap describe-command<span style="color: #2d9574;">]</span> helpful-command
           <span style="color: #2d9574;">[</span>remap describe-key<span style="color: #2d9574;">]</span> helpful-key<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>dw/leader-key-def
  <span style="color: #2d9574;">"e"</span>   '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"eval"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"eb"</span>  '<span style="color: #6c3163;">(</span>eval-buffer <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"eval buffer"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>dw/leader-key-def
  <span style="color: #3a81c3;">:keymaps</span> '<span style="color: #6c3163;">(</span>visual<span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"er"</span> '<span style="color: #6c3163;">(</span>eval-region <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"eval region"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-helpful"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgaaa776e" class="outline-4">
<h4 id="orgaaa776e">Scheme</h4>
<div class="outline-text-4" id="text-orgaaa776e">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">TODO: This causes issues for some reason.</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:bind (:map geiser-mode-map</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;        </span><span style="color: #2aa1ae; background-color: #ecf3ec;">("TAB" . completion-at-point))</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> geiser<span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq geiser-default-implementation 'gambit)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq geiser-active-implementations '(gambit guile))</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq geiser-implementations-alist '(((regexp "\\.scm$") gambit)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;;                                      </span><span style="color: #2aa1ae; background-color: #ecf3ec;">((regexp "\\.sld") gambit)))</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setq geiser-repl-default-port 44555) ; For Gambit Scheme</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> geiser-default-implementation 'guile<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> geiser-active-implementations '<span style="color: #2d9574;">(</span>guile<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> geiser-repl-default-port 44555<span style="color: #6c3163;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">For Gambit Scheme</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> geiser-implementations-alist '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span><span style="color: #b1951d;">(</span>regexp <span style="color: #2d9574;">"\\.scm$"</span><span style="color: #b1951d;">)</span> guile<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-geiser"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org8b2f179" class="outline-4">
<h4 id="org8b2f179">Zig</h4>
<div class="outline-text-4" id="text-org8b2f179">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> zig-mode <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-to-list 'lsp-language-id-configuration '<span style="color: #2d9574;">(</span>zig-mode . <span style="color: #2d9574;">"zig"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:load-after</span> lsp-mode
    <span style="color: #2d9574;">(</span>lsp-register-client
      <span style="color: #67b11d;">(</span>make-lsp-client
        <span style="color: #3a81c3;">:new-connection</span> <span style="color: #b1951d;">(</span>lsp-stdio-connection <span style="color: #2d9574;">"~/Projects/Code/zls/zig-cache/bin/zls"</span><span style="color: #b1951d;">)</span>
        <span style="color: #3a81c3;">:major-modes</span> '<span style="color: #b1951d;">(</span>zig-mode<span style="color: #b1951d;">)</span>
        <span style="color: #3a81c3;">:server-id</span> 'zls<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgb496ba4" class="outline-4">
<h4 id="orgb496ba4">Markdown</h4>
<div class="outline-text-4" id="text-orgb496ba4">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> markdown-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> markdown-command <span style="color: #2d9574;">"marked"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.md\\'"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">dolist</span> <span style="color: #67b11d;">(</span>face '<span style="color: #b1951d;">(</span><span style="color: #3a81c3;">(</span>markdown-header-face-1 . 1.2<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>markdown-header-face-2 . 1.1<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>markdown-header-face-3 . 1.0<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>markdown-header-face-4 . 1.0<span style="color: #3a81c3;">)</span>
                    <span style="color: #3a81c3;">(</span>markdown-header-face-5 . 1.0<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>set-face-attribute <span style="color: #b1951d;">(</span>car face<span style="color: #b1951d;">)</span> nil <span style="color: #3a81c3;">:weight</span> 'normal <span style="color: #3a81c3;">:height</span> <span style="color: #b1951d;">(</span>cdr face<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-markdown-mode"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org1b5b642" class="outline-4">
<h4 id="org1b5b642">HTML</h4>
<div class="outline-text-4" id="text-org1b5b642">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> web-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"(\\.</span><span style="color: #2d9574; font-weight: bold;">\\</span><span style="color: #2d9574; font-weight: bold;">(</span><span style="color: #2d9574;">html?</span><span style="color: #2d9574; font-weight: bold;">\\</span><span style="color: #2d9574; font-weight: bold;">|</span><span style="color: #2d9574;">ejs</span><span style="color: #2d9574; font-weight: bold;">\\</span><span style="color: #2d9574; font-weight: bold;">|</span><span style="color: #2d9574;">tsx</span><span style="color: #2d9574; font-weight: bold;">\\</span><span style="color: #2d9574; font-weight: bold;">|</span><span style="color: #2d9574;">jsx</span><span style="color: #2d9574; font-weight: bold;">\\</span><span style="color: #2d9574; font-weight: bold;">)</span><span style="color: #2d9574;">\\'"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> web-mode-code-indent-offset 2<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> web-mode-markup-indent-offset 2<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq-default</span> web-mode-attribute-indent-offset 2<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">1. Start the server with `</span><span style="color: #4e3163; background-color: #ecf3ec;">httpd-start</span><span style="color: #2aa1ae; background-color: #ecf3ec;">'</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2. Use `</span><span style="color: #4e3163; background-color: #ecf3ec;">impatient-mode</span><span style="color: #2aa1ae; background-color: #ecf3ec;">' on any buffer</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> impatient-mode <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> skewer-mode <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-web-mode"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orga40c1a0" class="outline-4">
<h4 id="orga40c1a0">YAML</h4>
<div class="outline-text-4" id="text-orga40c1a0">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> yaml-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.ya?ml\\'"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-yaml-mode"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org2129157" class="outline-4">
<h4 id="org2129157">ADL</h4>
<div class="outline-text-4" id="text-org2129157">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup adl-mode
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.cadl\\'"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook</span> lsp-deferred<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"C-c C-c"</span> recompile<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org2a407e0" class="outline-3">
<h3 id="org2a407e0">Compilation</h3>
<div class="outline-text-3" id="text-org2a407e0">
<p>
Set up the <code>compile</code> package and ensure that compilation output automatically scrolls.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup compile
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> compilation-scroll-output t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/auto-recompile-buffer</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #2d9574;">(</span>member #'recompile after-save-hook<span style="color: #2d9574;">)</span>
      <span style="color: #2d9574;">(</span>remove-hook 'after-save-hook #'recompile t<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>add-hook 'after-save-hook #'recompile nil t<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgc8ce5fc" class="outline-3">
<h3 id="orgc8ce5fc">Productivity</h3>
<div class="outline-text-3" id="text-orgc8ce5fc">
</div>
<div id="outline-container-orga5fe25b" class="outline-4">
<h4 id="orga5fe25b">Syntax checking with Flycheck</h4>
<div class="outline-text-4" id="text-orga5fe25b">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> flycheck<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> lsp-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-flycheck"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org3edb34e" class="outline-4">
<h4 id="org3edb34e">Snippets</h4>
<div class="outline-text-4" id="text-org3edb34e">
<p>
I don't actually use this at the moment.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> yasnippet<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">yasnippet</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-hook 'prog-mode-hook #'yas-minor-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>yas-reload-all<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-yasnippet"</span>
<span style="color: #2d9574;">"emacs-yasnippet-snippets"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org782fa69" class="outline-4">
<h4 id="org782fa69">Smart Parens</h4>
<div class="outline-text-4" id="text-org782fa69">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> smartparens<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> prog-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-smartparens"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orge8b7b8e" class="outline-4">
<h4 id="orge8b7b8e">Rainbow Delimiters</h4>
<div class="outline-text-4" id="text-orge8b7b8e">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> rainbow-delimiters<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> prog-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-rainbow-delimiters"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgef71bcc" class="outline-4">
<h4 id="orgef71bcc">Rainbow Mode</h4>
<div class="outline-text-4" id="text-orgef71bcc">
<p>
Sets the background of HTML color strings in buffers to be the color mentioned.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> rainbow-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> org-mode
              emacs-lisp-mode
              web-mode
              typescript-mode
              js2-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-rainbow-mode"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org12fe88c" class="outline-3">
<h3 id="org12fe88c">Tools</h3>
<div class="outline-text-3" id="text-org12fe88c">
</div>
<div id="outline-container-org6261747" class="outline-4">
<h4 id="org6261747">Debbugs (mainly for Guix)</h4>
<div class="outline-text-4" id="text-org6261747">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">TODO: Figure out how to query for '</span><span style="color: #4e3163; background-color: #ecf3ec;">done</span><span style="color: #2aa1ae; background-color: #ecf3ec;">' bugs</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/debbugs-guix-patches</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>debbugs-gnu '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"serious"</span> <span style="color: #2d9574;">"important"</span> <span style="color: #2d9574;">"normal"</span><span style="color: #2d9574;">)</span> <span style="color: #2d9574;">"guix-patches"</span> nil t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-org85ba700" class="outline-2">
<h2 id="org85ba700">Game Development</h2>
<div class="outline-text-2" id="text-org85ba700">
</div>
<div id="outline-container-orge601681" class="outline-3">
<h3 id="orge601681">Substratic Forge</h3>
<div class="outline-text-3" id="text-orge601681">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(setup substratic-forge</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:if (file-exists-p "~/Projects/Code/crash-the-stack/lib/github.com/substratic/forge/@/")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:load-path "~/Projects/Code/crash-the-stack/lib/github.com/substratic/forge/@/"</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:bind (:map substratic-forge-mode-map</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;;          </span><span style="color: #2aa1ae; background-color: #ecf3ec;">("C-c C-m" . substratic-reload-module)))</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org98f7960" class="outline-2">
<h2 id="org98f7960">Writing</h2>
<div class="outline-text-2" id="text-org98f7960">
</div>
<div id="outline-container-orgbd50fb0" class="outline-3">
<h3 id="orgbd50fb0">Previewing Info files</h3>
<div class="outline-text-3" id="text-orgbd50fb0">
<p>
I'm experimenting with generating <code>Texinfo</code> from Org Mode files and I need a way to quickly preview the resulting <code>.info</code> files.  This <code>auto-mode-alist</code> entry automatically previews an <code>.info</code> file when visited with <code>find-file</code>:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>add-to-list 'auto-mode-alist '<span style="color: #6c3163;">(</span><span style="color: #2d9574;">"\\.info\\'"</span> . Info-on-current-buffer<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org7c8983b" class="outline-2">
<h2 id="org7c8983b">Streaming</h2>
<div class="outline-text-2" id="text-org7c8983b">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> posframe<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> command-log-mode <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/command-window-frame nil<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/toggle-command-window</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> dw/command-window-frame
      <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">progn</span>
        <span style="color: #67b11d;">(</span>posframe-delete-frame clm/command-log-buffer<span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/command-window-frame nil<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
      <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">progn</span>
        <span style="color: #67b11d;">(</span>global-command-log-mode t<span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">with-current-buffer</span>
          <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> clm/command-log-buffer
                <span style="color: #3a81c3;">(</span>get-buffer-create <span style="color: #2d9574;">" *command-log*"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
          <span style="color: #b1951d;">(</span>text-scale-set -1<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/command-window-frame
          <span style="color: #b1951d;">(</span>posframe-show
            clm/command-log-buffer
            <span style="color: #3a81c3;">:position</span> `<span style="color: #3a81c3;">(</span>,<span style="color: #6c3163;">(</span>- <span style="color: #2d9574;">(</span>x-display-pixel-width<span style="color: #2d9574;">)</span> 590<span style="color: #6c3163;">)</span> . 15<span style="color: #3a81c3;">)</span>
            <span style="color: #3a81c3;">:width</span> 38
            <span style="color: #3a81c3;">:height</span> 5
            <span style="color: #3a81c3;">:min-width</span> 38
            <span style="color: #3a81c3;">:min-height</span> 5
            <span style="color: #3a81c3;">:internal-border-width</span> 2
            <span style="color: #3a81c3;">:internal-border-color</span> <span style="color: #2d9574;">"#c792ea"</span>
            <span style="color: #3a81c3;">:override-parameters</span> '<span style="color: #3a81c3;">(</span><span style="color: #6c3163;">(</span>parent-frame . nil<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>dw/leader-key-def
 <span style="color: #2d9574;">"tc"</span> 'dw/toggle-command-window<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> keycast<span style="color: #6c3163;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">This works with doom-modeline, inspired by this comment:</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">https://github.com/tarsius/keycast/issues/7#issuecomment-627604064</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">define-minor-mode</span> <span style="color: #6c3163; font-weight: bold;">keycast-mode</span>
    <span style="color: #da8b55;">"Show current command and its key binding in the mode line."</span>
    <span style="color: #3a81c3;">:global</span> t
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">keycast</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> keycast-mode
        <span style="color: #67b11d;">(</span>add-hook 'pre-command-hook 'keycast-mode-line-update<span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>remove-hook 'pre-command-hook 'keycast-mode-line-update<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>add-to-list 'global-mode-string '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">""</span> mode-line-keycast <span style="color: #2d9574;">" "</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-posframe"</span>
<span style="color: #2d9574;">"emacs-keycast"</span>

</pre>
</div>
</div>

<div id="outline-container-org23f3174" class="outline-3">
<h3 id="org23f3174">obs-websocket</h3>
<div class="outline-text-3" id="text-org23f3174">
<p>
I use the <a href="https://github.com/Palakis/obs-websocket">obs-websocket</a> plugin for OBS Studio to enable automation of scene transitions, etc using Sacha Chua's excellent <a href="https://github.com/sachac/obs-websocket-el/">obs-websocket-el</a> package.  This enables me to control the how flow of video recording and streaming from within Emacs!
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> obs-websocket <span style="color: #3a81c3;">:guix</span> <span style="color: #2d9574;">"emacs-obs-websocket-el"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">obs-websocket</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">defhydra</span> dw/stream-keys <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:exit</span> t<span style="color: #2d9574;">)</span>
    <span style="color: #da8b55;">"Stream Commands"</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"c"</span> <span style="color: #67b11d;">(</span>obs-websocket-connect<span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"Connect"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"l"</span> <span style="color: #67b11d;">(</span>obs-websocket-send <span style="color: #2d9574;">"SetCurrentScene"</span> <span style="color: #3a81c3;">:scene-name</span> <span style="color: #2d9574;">"Logo Screen"</span><span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"Logo Screen"</span> <span style="color: #3a81c3;">:exit</span> nil<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"s"</span> <span style="color: #67b11d;">(</span>obs-websocket-send <span style="color: #2d9574;">"SetCurrentScene"</span> <span style="color: #3a81c3;">:scene-name</span> <span style="color: #2d9574;">"Screen"</span><span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"Screen"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"w"</span> <span style="color: #67b11d;">(</span>obs-websocket-send <span style="color: #2d9574;">"SetCurrentScene"</span> <span style="color: #3a81c3;">:scene-name</span> <span style="color: #2d9574;">"Webcam"</span><span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"Webcam"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"p"</span> <span style="color: #67b11d;">(</span>obs-websocket-send <span style="color: #2d9574;">"SetCurrentScene"</span> <span style="color: #3a81c3;">:scene-name</span> <span style="color: #2d9574;">"Sponsors"</span><span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"Sponsors"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"e"</span> <span style="color: #67b11d;">(</span>obs-websocket-send <span style="color: #2d9574;">"SetCurrentScene"</span> <span style="color: #3a81c3;">:scene-name</span> <span style="color: #2d9574;">"Thanks For Watching"</span><span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"Thanks For Watching"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Ss"</span> <span style="color: #67b11d;">(</span>obs-websocket-send <span style="color: #2d9574;">"StartStreaming"</span><span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"Start Stream"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #2d9574;">"Se"</span> <span style="color: #67b11d;">(</span>obs-websocket-send <span style="color: #2d9574;">"StopStreaming"</span><span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"End Stream"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">This is Super-s (for now)</span>
  <span style="color: #6c3163;">(</span>global-set-key <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"s-s"</span><span style="color: #2d9574;">)</span> #'dw/stream-keys/body<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-obs-websocket-el"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org03c5350" class="outline-3">
<h3 id="org03c5350">live-crafter.el</h3>
<div class="outline-text-3" id="text-org03c5350">
<p>
The <b>real</b> stream automation starts here.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> live-crafter
             <span style="color: #3a81c3;">:host</span> github
             <span style="color: #3a81c3;">:repo</span> <span style="color: #2d9574;">"SystemCrafters/live-crafter"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:load-after</span> mpv<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org06e5e80" class="outline-2">
<h2 id="org06e5e80">Applications</h2>
<div class="outline-text-2" id="text-org06e5e80">
</div>
<div id="outline-container-orgf4bf32b" class="outline-3">
<h3 id="orgf4bf32b">Binding Prefix</h3>
<div class="outline-text-3" id="text-orgf4bf32b">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>dw/leader-key-def
  <span style="color: #2d9574;">"a"</span>  '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"apps"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org12cd563" class="outline-3">
<h3 id="org12cd563">Mail</h3>
<div class="outline-text-3" id="text-org12cd563">
<p>
My mail configuration is stored in <a href="Mail.html">Mail.org</a>.  We merely require it here to have it loaded in the main Emacs configuration.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Only fetch mail on zerocool</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/mail-enabled <span style="color: #6c3163;">(</span>member system-name '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"zerocool"</span> <span style="color: #2d9574;">"acidburn"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> dw/mu4e-inbox-query nil<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> dw/mail-enabled
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">dw-mail</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<p>
<code>emacs-mu4e-alert</code> pulls in <code>mu</code> so we don't need to specify it here also.
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-mu4e-alert"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgb59153f" class="outline-3">
<h3 id="orgb59153f">Finance</h3>
<div class="outline-text-3" id="text-orgb59153f">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> ledger-mode<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:file-match</span> <span style="color: #2d9574;">"\\.lgr\\'"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"TAB"</span> completion-at-point<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span>
   ledger-reports '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span><span style="color: #2d9574;">"bal"</span> <span style="color: #2d9574;">"%(binary) -f %(ledger-file) bal"</span><span style="color: #67b11d;">)</span>
                    <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"bal this quarter"</span> <span style="color: #2d9574;">"%(binary) -f %(ledger-file) --period \"this quarter\" bal"</span><span style="color: #67b11d;">)</span>
                    <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"bal last quarter"</span> <span style="color: #2d9574;">"%(binary) -f %(ledger-file) --period \"last quarter\" bal"</span><span style="color: #67b11d;">)</span>
                    <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"reg"</span> <span style="color: #2d9574;">"%(binary) -f %(ledger-file) reg"</span><span style="color: #67b11d;">)</span>
                    <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"payee"</span> <span style="color: #2d9574;">"%(binary) -f %(ledger-file) reg @%(payee)"</span><span style="color: #67b11d;">)</span>
                    <span style="color: #67b11d;">(</span><span style="color: #2d9574;">"account"</span> <span style="color: #2d9574;">"%(binary) -f %(ledger-file) reg %(account)"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> hledger-mode <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:bind</span> <span style="color: #2d9574;">"TAB"</span> completion-at-point<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"ledger"</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"hledger"</span>
<span style="color: #2d9574;">"emacs-ledger-mode"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgb10e5cc" class="outline-3">
<h3 id="orgb10e5cc">eshell</h3>
<div class="outline-text-3" id="text-orgb10e5cc">
</div>
<div id="outline-container-orge0ebc5b" class="outline-4">
<h4 id="orge0ebc5b">Configuration</h4>
<div class="outline-text-4" id="text-orge0ebc5b">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">read-file</span> <span style="color: #6c3163;">(</span>file-path<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">with-temp-buffer</span>
    <span style="color: #2d9574;">(</span>insert-file-contents file-path<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>buffer-string<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/get-current-package-version</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>package-json-file <span style="color: #b1951d;">(</span>concat <span style="color: #3a81c3;">(</span>eshell/pwd<span style="color: #3a81c3;">)</span> <span style="color: #2d9574;">"/package.json"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #67b11d;">(</span>file-exists-p package-json-file<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">let*</span> <span style="color: #b1951d;">(</span><span style="color: #3a81c3;">(</span>package-json-contents <span style="color: #6c3163;">(</span>read-file package-json-file<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
             <span style="color: #3a81c3;">(</span>package-json <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">ignore-errors</span> <span style="color: #2d9574;">(</span>json-parse-string package-json-contents<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
        <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> package-json
          <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">ignore-errors</span> <span style="color: #6c3163;">(</span>gethash <span style="color: #2d9574;">"version"</span> package-json<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/map-line-to-status-char</span> <span style="color: #6c3163;">(</span>line<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">cond</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>string-match <span style="color: #2d9574;">"^?\\? "</span> line<span style="color: #67b11d;">)</span> <span style="color: #2d9574;">"?"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/get-git-status-prompt</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>status-lines <span style="color: #b1951d;">(</span>cdr <span style="color: #3a81c3;">(</span>process-lines <span style="color: #2d9574;">"git"</span> <span style="color: #2d9574;">"status"</span> <span style="color: #2d9574;">"--porcelain"</span> <span style="color: #2d9574;">"-b"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>seq-uniq <span style="color: #67b11d;">(</span>seq-filter 'identity <span style="color: #b1951d;">(</span>mapcar 'dw/map-line-to-status-char status-lines<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/get-prompt-path</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let*</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>current-path <span style="color: #b1951d;">(</span>eshell/pwd<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
         <span style="color: #67b11d;">(</span>git-output <span style="color: #b1951d;">(</span>shell-command-to-string <span style="color: #2d9574;">"git rev-parse --show-toplevel"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
         <span style="color: #67b11d;">(</span>has-path <span style="color: #b1951d;">(</span>not <span style="color: #3a81c3;">(</span>string-match <span style="color: #2d9574;">"^fatal"</span> git-output<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #67b11d;">(</span>not has-path<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>abbreviate-file-name current-path<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>string-remove-prefix <span style="color: #b1951d;">(</span>file-name-directory git-output<span style="color: #b1951d;">)</span> current-path<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">This prompt function mostly replicates my custom zsh prompt setup</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">that is powered by github.com/denysdovhan/spaceship-prompt.</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/eshell-prompt</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>current-branch <span style="color: #b1951d;">(</span>magit-get-current-branch<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>package-version <span style="color: #b1951d;">(</span>dw/get-current-package-version<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>concat
     <span style="color: #2d9574;">"\n"</span>
     <span style="color: #67b11d;">(</span>propertize <span style="color: #b1951d;">(</span>system-name<span style="color: #b1951d;">)</span> 'face `<span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"#62aeed"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span>propertize <span style="color: #2d9574;">" &#2384; "</span> 'face `<span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"white"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span>propertize <span style="color: #b1951d;">(</span>dw/get-prompt-path<span style="color: #b1951d;">)</span> 'face `<span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"#82cfd3"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> current-branch
       <span style="color: #b1951d;">(</span>concat
        <span style="color: #3a81c3;">(</span>propertize <span style="color: #2d9574;">" &#8226; "</span> 'face `<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"white"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3;">(</span>propertize <span style="color: #6c3163;">(</span>concat <span style="color: #2d9574;">"&#57504; "</span> current-branch<span style="color: #6c3163;">)</span> 'face `<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"#c475f0"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> package-version
       <span style="color: #b1951d;">(</span>concat
        <span style="color: #3a81c3;">(</span>propertize <span style="color: #2d9574;">" @ "</span> 'face `<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"white"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3;">(</span>propertize package-version 'face `<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"#e8a206"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span>propertize <span style="color: #2d9574;">" &#8226; "</span> 'face `<span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"white"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span>propertize <span style="color: #b1951d;">(</span>format-time-string <span style="color: #2d9574;">"%I:%M:%S %p"</span><span style="color: #b1951d;">)</span> 'face `<span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"#5a5b7f"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #b1951d;">(</span>= <span style="color: #3a81c3;">(</span>user-uid<span style="color: #3a81c3;">)</span> 0<span style="color: #b1951d;">)</span>
         <span style="color: #b1951d;">(</span>propertize <span style="color: #2d9574;">"\n#"</span> 'face `<span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"red2"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
       <span style="color: #b1951d;">(</span>propertize <span style="color: #2d9574;">"\n&#955;"</span> 'face `<span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"#aece4a"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span>propertize <span style="color: #2d9574;">" "</span> 'face `<span style="color: #b1951d;">(</span><span style="color: #3a81c3;">:foreground</span> <span style="color: #2d9574;">"white"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">unless</span> dw/is-termux
  <span style="color: #6c3163;">(</span>add-hook 'eshell-banner-load-hook
            <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span>
               <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> eshell-banner-message
                     <span style="color: #b1951d;">(</span>concat <span style="color: #2d9574;">"\n"</span> <span style="color: #3a81c3;">(</span>propertize <span style="color: #2d9574;">" "</span> 'display <span style="color: #6c3163;">(</span>create-image <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/images/flux_banner.png"</span> 'png nil <span style="color: #3a81c3;">:scale</span> 0.2 <span style="color: #3a81c3;">:align-to</span> <span style="color: #2d9574;">"center"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span> <span style="color: #2d9574;">"\n\n"</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/eshell-configure</span> <span style="color: #6c3163;">()</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Make sure magit is loaded</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">magit</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">evil-collection-eshell</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-collection-eshell-setup<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>setup <span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:pkg</span> xterm-color<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">push</span> 'eshell-tramp eshell-modules-list<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">push</span> 'xterm-color-filter eshell-preoutput-filter-functions<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>delq 'eshell-handle-ansi-color eshell-output-filter-functions<span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Save command history when commands are entered</span>
  <span style="color: #6c3163;">(</span>add-hook 'eshell-pre-command-hook 'eshell-save-some-history<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>add-hook 'eshell-before-prompt-hook
            <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span>
              <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> xterm-color-preserve-properties t<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Truncate buffer for performance</span>
  <span style="color: #6c3163;">(</span>add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer<span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">We want to use xterm-256color when running interactive commands</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">in eshell but not during other times when we might be launching</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">a shell command to gather its output.</span>
  <span style="color: #6c3163;">(</span>add-hook 'eshell-pre-command-hook
            <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span>setenv <span style="color: #2d9574;">"TERM"</span> <span style="color: #2d9574;">"xterm-256color"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-hook 'eshell-post-command-hook
            <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span>setenv <span style="color: #2d9574;">"TERM"</span> <span style="color: #2d9574;">"dumb"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Use completion-at-point to provide completions in eshell</span>
  <span style="color: #6c3163;">(</span>define-key eshell-mode-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"&lt;tab&gt;"</span><span style="color: #2d9574;">)</span> 'completion-at-point<span style="color: #6c3163;">)</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Initialize the shell history</span>
  <span style="color: #6c3163;">(</span>eshell-hist-initialize<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>evil-define-key '<span style="color: #2d9574;">(</span>normal insert visual<span style="color: #2d9574;">)</span> eshell-mode-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"C-r"</span><span style="color: #2d9574;">)</span> 'consult-history<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-define-key '<span style="color: #2d9574;">(</span>normal insert visual<span style="color: #2d9574;">)</span> eshell-mode-map <span style="color: #2d9574;">(</span>kbd <span style="color: #2d9574;">"&lt;home&gt;"</span><span style="color: #2d9574;">)</span> 'eshell-bol<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>evil-normalize-keymaps<span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>setenv <span style="color: #2d9574;">"PAGER"</span> <span style="color: #2d9574;">"cat"</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> eshell-prompt-function      'dw/eshell-prompt
        eshell-prompt-regexp        <span style="color: #2d9574;">"^&#955; "</span>
        eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-highlight-prompt t
        eshell-scroll-to-bottom-on-input t
        eshell-prefer-lisp-functions nil<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup eshell
  <span style="color: #6c3163;">(</span>add-hook 'eshell-first-time-mode-hook #'dw/eshell-configure<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> eshell-directory-name <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/eshell/"</span>
        eshell-aliases-file <span style="color: #2d9574;">(</span>expand-file-name <span style="color: #2d9574;">"~/.dotfiles/.emacs.d/eshell/alias"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> eshell-z<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Using consult-dir for this now</span>
  <span style="color: #6c3163;">(</span>add-hook 'eshell-mode-hook <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">eshell-z</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-hook 'eshell-z-change-dir-hook <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span> <span style="color: #67b11d;">(</span>eshell/pushd <span style="color: #b1951d;">(</span>eshell/pwd<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> exec-path-from-shell<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> exec-path-from-shell-check-startup-files nil<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #2d9574;">(</span>memq window-system '<span style="color: #67b11d;">(</span>mac ns x<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>exec-path-from-shell-initialize<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>dw/leader-key-def
  <span style="color: #2d9574;">"SPC"</span> 'eshell<span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-eshell-z"</span>
<span style="color: #2d9574;">"emacs-esh-autosuggest"</span>
<span style="color: #2d9574;">"emacs-xterm-color"</span>
<span style="color: #2d9574;">"emacs-exec-path-from-shell"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgf12690a" class="outline-4">
<h4 id="orgf12690a">Shell Commands</h4>
<div class="outline-text-4" id="text-orgf12690a">
<p>
Custom eshell commands will go here.
</p>
</div>
</div>

<div id="outline-container-org3d5636a" class="outline-4">
<h4 id="org3d5636a">Visual Commands</h4>
<div class="outline-text-4" id="text-org3d5636a">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">with-eval-after-load</span> 'esh-opt
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> eshell-destroy-buffer-when-process-dies t<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> eshell-visual-commands '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"htop"</span> <span style="color: #2d9574;">"zsh"</span> <span style="color: #2d9574;">"vim"</span> <span style="color: #2d9574;">"rush"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org49dea79" class="outline-4">
<h4 id="org49dea79">Fish Completion</h4>
<div class="outline-text-4" id="text-org49dea79">
<p>
This enhances eshell's completions with those that Fish is capable of and also falls back to any additional completions that are configured for Bash on the system.  The primary benefit here (for me) is getting completion for commits and branches in <code>git</code> commands.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> fish-completion<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> eshell-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-fish-completion"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org1afe978" class="outline-4">
<h4 id="org1afe978">Command Highlighting</h4>
<div class="outline-text-4" id="text-org1afe978">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> eshell-syntax-highlighting<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:load-after</span> eshell
    <span style="color: #2d9574;">(</span>eshell-syntax-highlighting-global-mode +1<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-eshell-syntax-highlighting"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org9b7427a" class="outline-4">
<h4 id="org9b7427a">History Autocompletion</h4>
<div class="outline-text-4" id="text-org9b7427a">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/esh-autosuggest-setup</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">company</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>set-face-foreground 'company-preview-common <span style="color: #2d9574;">"#4b5668"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>set-face-background 'company-preview nil<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> esh-autosuggest<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">esh-autosuggest</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> esh-autosuggest-delay 0.5<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook</span> dw/esh-autosuggest-setup<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:hook-into</span> eshell-mode<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org5ad6408" class="outline-4">
<h4 id="org5ad6408">Toggling Eshell</h4>
<div class="outline-text-4" id="text-org5ad6408">
<p>
<code>eshell-toggle</code> allows me to toggle an Eshell window below the current buffer for the path (or project path) of the buffer.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> eshell-toggle<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:disabled</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:global</span> <span style="color: #2d9574;">"C-M-'"</span> eshell-toggle<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:option</span> eshell-toggle-size-fraction 3
           eshell-toggle-use-projectile-root t
           eshell-toggle-run-command nil<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-eshell-toggle"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgf14244e" class="outline-3">
<h3 id="orgf14244e">vterm</h3>
<div class="outline-text-3" id="text-orgf14244e">
<p>
<code>vterm</code> enables the use of fully-fledged terminal applications within Emacs so that I don't need an external terminal emulator.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> vterm<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:when-loaded</span>
   <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">progn</span>
     <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> vterm-max-scrollback 10000<span style="color: #67b11d;">)</span>
     <span style="color: #67b11d;">(</span>advice-add 'evil-collection-vterm-insert <span style="color: #3a81c3;">:before</span> #'vterm-reset-cursor-point<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-vterm"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgf23e245" class="outline-3">
<h3 id="orgf23e245">ediff</h3>
<div class="outline-text-3" id="text-orgf23e245">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Don't let ediff break EXWM, keep it in one frame</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> ediff-diff-options <span style="color: #2d9574;">"-w"</span>
      ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgdfc0cd1" class="outline-3">
<h3 id="orgdfc0cd1">Chat</h3>
<div class="outline-text-3" id="text-orgdfc0cd1">
</div>
<div id="outline-container-orgf22d6dd" class="outline-4">
<h4 id="orgf22d6dd">Tracking</h4>
<div class="outline-text-4" id="text-orgf22d6dd">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> tracking<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">tracking</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> tracking-faces-priorities '<span style="color: #2d9574;">(</span>all-the-icons-pink
                                    all-the-icons-lgreen
                                    all-the-icons-lblue<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> tracking-frame-behavior nil<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-tracking"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org45db325" class="outline-4">
<h4 id="org45db325">Telegram</h4>
<div class="outline-text-4" id="text-org45db325">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Add faces for specific people in the modeline.  There must</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">be a better way to do this.</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/around-tracking-add-buffer</span> <span style="color: #6c3163;">(</span>original-func buffer <span style="color: #ba2f59; font-weight: bold;">&amp;optional</span> faces<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let*</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>name <span style="color: #b1951d;">(</span>buffer-name buffer<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
         <span style="color: #67b11d;">(</span>face <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">cond</span> <span style="color: #3a81c3;">(</span><span style="color: #6c3163;">(</span>s-contains? <span style="color: #2d9574;">"Maria"</span> name<span style="color: #6c3163;">)</span> '<span style="color: #6c3163;">(</span>all-the-icons-pink<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
                     <span style="color: #3a81c3;">(</span><span style="color: #6c3163;">(</span>s-contains? <span style="color: #2d9574;">"Alex "</span> name<span style="color: #6c3163;">)</span> '<span style="color: #6c3163;">(</span>all-the-icons-lgreen<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
                     <span style="color: #3a81c3;">(</span><span style="color: #6c3163;">(</span>s-contains? <span style="color: #2d9574;">"Steve"</span> name<span style="color: #6c3163;">)</span> '<span style="color: #6c3163;">(</span>all-the-icons-lblue<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
         <span style="color: #67b11d;">(</span>result <span style="color: #b1951d;">(</span>apply original-func buffer <span style="color: #3a81c3;">(</span>list face<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>dw/update-polybar-telegram<span style="color: #2d9574;">)</span>
    result<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/after-tracking-remove-buffer</span> <span style="color: #6c3163;">(</span>buffer<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/update-polybar-telegram<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>advice-add 'tracking-add-buffer <span style="color: #3a81c3;">:around</span> #'dw/around-tracking-add-buffer<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>advice-add 'tracking-remove-buffer <span style="color: #3a81c3;">:after</span> #'dw/after-tracking-remove-buffer<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">(</span>advice-remove 'tracking-remove-buffer #'dw/around-tracking-remove-buffer<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Advise exwm-workspace-switch so that we can more reliably clear tracking buffers</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">NOTE: This is a hack and I hate it.  It'd be great to find a better solution.</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/before-exwm-workspace-switch</span> <span style="color: #6c3163;">(</span>frame-or-index <span style="color: #ba2f59; font-weight: bold;">&amp;optional</span> force<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #2d9574;">(</span>fboundp 'tracking-remove-visible-buffers<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #67b11d;">(</span>eq exwm-workspace-current-index 0<span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>tracking-remove-visible-buffers<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>advice-add 'exwm-workspace-switch <span style="color: #3a81c3;">:before</span> #'dw/before-exwm-workspace-switch<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> telega<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> telega-user-use-avatars nil
        telega-use-tracking-for '<span style="color: #2d9574;">(</span>any pin unread<span style="color: #2d9574;">)</span>
        telega-emoji-use-images t
        telega-completing-read-function #'ivy-completing-read
        telega-msg-rainbow-title nil
        telega-chat-fill-column 75<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-telega"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgc8a48d9" class="outline-4">
<h4 id="orgc8a48d9">ERC</h4>
<div class="outline-text-4" id="text-orgc8a48d9">
<p>
<a href="https://www.gnu.org/software/emacs/manual/html_node/erc/Modules.html">ERC</a> is the most featureful of the Emacs IRC clients.  At first I thought it was too bulky, but after using <code>circe</code> and <code>rcirc</code> I started to appreciate some of the features it provides.  The "static center" fill mode is really awesome.
</p>
</div>

<ul class="org-ul">
<li><a id="org05ff37c"></a>Configuration<br />
<div class="outline-text-5" id="text-org05ff37c">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/on-erc-track-list-changed</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">dolist</span> <span style="color: #2d9574;">(</span>buffer erc-modified-channels-alist<span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">(</span>tracking-add-buffer <span style="color: #67b11d;">(</span>car buffer<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> erc-hl-nicks<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:load-after</span> erc<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> erc-image<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:load-after</span> erc<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup erc
  <span style="color: #6c3163;">(</span>add-hook 'erc-track-list-changed-hook #'dw/on-erc-track-list-changed<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span>
      erc-nick <span style="color: #2d9574;">"daviwil"</span>
      erc-user-full-name <span style="color: #2d9574;">"David Wilson"</span>
      erc-prompt-for-password nil
      erc-auto-query 'bury
      erc-join-buffer 'bury
      erc-track-shorten-start 8
      erc-interpret-mirc-color t
      erc-rename-buffers t
      erc-kill-buffer-on-part t
      erc-track-exclude '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"#twitter_daviwil"</span><span style="color: #2d9574;">)</span>
      erc-track-exclude-types '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"JOIN"</span> <span style="color: #2d9574;">"NICK"</span> <span style="color: #2d9574;">"PART"</span> <span style="color: #2d9574;">"QUIT"</span> <span style="color: #2d9574;">"MODE"</span> <span style="color: #2d9574;">"AWAY"</span><span style="color: #2d9574;">)</span>
      erc-track-enable-keybindings nil
      erc-track-visibility nil <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Only use the selected frame for visibility</span>
      erc-track-exclude-server-buffer t
      erc-fill-column 120
      erc-fill-function 'erc-fill-static
      erc-fill-static-center 20
      erc-image-inline-rescale 400
      erc-server-reconnect-timeout 10
      erc-server-reconnect-attempts 5
      erc-autojoin-channels-alist '<span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span><span style="color: #2d9574;">"irc.libera.chat"</span> <span style="color: #2d9574;">"#systemcrafters"</span> <span style="color: #2d9574;">"#emacs"</span> <span style="color: #2d9574;">"#guix"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
      erc-quit-reason <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">(</span>s<span style="color: #67b11d;">)</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> s <span style="color: #2d9574;">"Ejecting from cyberspace"</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
      erc-modules
      '<span style="color: #2d9574;">(</span>autoaway autojoin button completion fill irccontrols keep-place
          list match menu move-to-prompt netsplit networks noncommands
          readonly ring stamp track image hl-nicks notify notifications<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>

  <span style="color: #6c3163;">(</span>add-hook 'erc-join-hook 'bitlbee-identify<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">bitlbee-identify</span> <span style="color: #2d9574;">()</span>
    <span style="color: #da8b55;">"If we're on the bitlbee server, send the identify command to the &amp;bitlbee channel."</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">when</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">and</span> <span style="color: #b1951d;">(</span>string= <span style="color: #2d9574;">"127.0.0.1"</span> erc-session-server<span style="color: #b1951d;">)</span>
               <span style="color: #b1951d;">(</span>string= <span style="color: #2d9574;">"&amp;bitlbee"</span> <span style="color: #3a81c3;">(</span>buffer-name<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
      <span style="color: #67b11d;">(</span>erc-message <span style="color: #2d9574;">"PRIVMSG"</span> <span style="color: #b1951d;">(</span>format <span style="color: #2d9574;">"%s identify %s"</span>
                                     <span style="color: #3a81c3;">(</span>erc-default-target<span style="color: #3a81c3;">)</span>
                                     <span style="color: #3a81c3;">(</span>password-store-get <span style="color: #2d9574;">"IRC/Bitlbee"</span><span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/connect-irc</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>erc-tls <span style="color: #3a81c3;">:server</span> <span style="color: #2d9574;">"crafter.mx"</span> <span style="color: #3a81c3;">:port</span> 3110 <span style="color: #3a81c3;">:nick</span> <span style="color: #2d9574;">"daviwil"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(erc</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;;    </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:server "127.0.0.1" :port 6667</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">;;    </span><span style="color: #2aa1ae; background-color: #ecf3ec;">:nick "daviwil" :password (password-store-get "IRC/Bitlbee")))</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Thanks karthik!</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">erc-image-create-image</span> <span style="color: #6c3163;">(</span>file-name<span style="color: #6c3163;">)</span>
  <span style="color: #da8b55;">"Create an image suitably scaled according to the setting of</span>
<span style="color: #da8b55;">'ERC-IMAGE-RESCALE."</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">let*</span> <span style="color: #2d9574;">(</span><span style="color: #67b11d;">(</span>positions <span style="color: #b1951d;">(</span>window-inside-absolute-pixel-edges<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>width <span style="color: #b1951d;">(</span>- <span style="color: #3a81c3;">(</span>nth 2 positions<span style="color: #3a81c3;">)</span> <span style="color: #3a81c3;">(</span>nth 0 positions<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>height <span style="color: #b1951d;">(</span>- <span style="color: #3a81c3;">(</span>nth 3 positions<span style="color: #3a81c3;">)</span> <span style="color: #3a81c3;">(</span>nth 1 positions<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>image <span style="color: #b1951d;">(</span>create-image file-name<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>dimensions <span style="color: #b1951d;">(</span>image-size image t<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #67b11d;">(</span>imagemagick-p <span style="color: #b1951d;">(</span><span style="color: #3a81c3; font-weight: bold;">and</span> <span style="color: #3a81c3;">(</span>fboundp 'imagemagick-types<span style="color: #3a81c3;">)</span> 'imagemagick<span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span>
                                        <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">See if we want to rescale the image</span>
    <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">and</span> erc-image-inline-rescale
            <span style="color: #b1951d;">(</span>not <span style="color: #3a81c3;">(</span>image-multi-frame-p image<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Rescale based on erc-image-rescale</span>
        <span style="color: #67b11d;">(</span><span style="color: #3a81c3; font-weight: bold;">cond</span> <span style="color: #b1951d;">(</span><span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Numeric: scale down to that size</span>
              <span style="color: #3a81c3;">(</span>numberp erc-image-inline-rescale<span style="color: #3a81c3;">)</span>
              <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #6c3163;">(</span>&gt; <span style="color: #2d9574;">(</span>cdr dimensions<span style="color: #2d9574;">)</span> erc-image-inline-rescale<span style="color: #6c3163;">)</span>
                  <span style="color: #6c3163;">(</span>create-image file-name imagemagick-p nil <span style="color: #3a81c3;">:height</span> erc-image-inline-rescale<span style="color: #6c3163;">)</span>
                image<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
              <span style="color: #b1951d;">(</span><span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'window: scale down to window size, if bigger</span>
              <span style="color: #3a81c3;">(</span>eq erc-image-inline-rescale 'window<span style="color: #3a81c3;">)</span>
              <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">But only if the image is greater than the window size</span>
              <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">or</span> <span style="color: #2d9574;">(</span>&gt; <span style="color: #887070;">(</span>car dimensions<span style="color: #887070;">)</span> width<span style="color: #2d9574;">)</span>
                      <span style="color: #2d9574;">(</span>&gt; <span style="color: #887070;">(</span>cdr dimensions<span style="color: #887070;">)</span> height<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
                  <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Figure out in which direction we need to scale</span>
                  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #2d9574;">(</span>&gt; width height<span style="color: #2d9574;">)</span>
                      <span style="color: #2d9574;">(</span>create-image file-name imagemagick-p nil <span style="color: #3a81c3;">:height</span>  height<span style="color: #2d9574;">)</span>
                    <span style="color: #2d9574;">(</span>create-image file-name imagemagick-p nil <span style="color: #3a81c3;">:width</span> width<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>
                <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Image is smaller than window, just give that back</span>
                image<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span>
              <span style="color: #b1951d;">(</span>t <span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">progn</span> <span style="color: #6c3163;">(</span>message <span style="color: #2d9574;">"Error: none of the rescaling options matched"</span><span style="color: #6c3163;">)</span> image<span style="color: #3a81c3;">)</span><span style="color: #b1951d;">)</span><span style="color: #67b11d;">)</span>
      <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">No rescale</span>
      image<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-erc-image"</span>
<span style="color: #2d9574;">"emacs-erc-hl-nicks"</span>

</pre>
</div>
</div>
</li>

<li><a id="orge94abbf"></a>Bindings<br />
<div class="outline-text-5" id="text-orge94abbf">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>dw/ctrl-c-keys
  <span style="color: #2d9574;">"c"</span>  '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"chat"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"cb"</span> 'erc-switch-to-buffer
  <span style="color: #2d9574;">"cc"</span> 'dw/connect-irc
  <span style="color: #2d9574;">"ca"</span> 'erc-track-switch-buffer<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</li>

<li><a id="org40a966e"></a>Sharing Files with 0x0<br />
<div class="outline-text-5" id="text-org40a966e">
<p>
I use this nice package from <a href="https://gitlab.com/willvaughn">nackjicholson</a> to make sharing files and images on IRC much easier.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> 0x0 <span style="color: #3a81c3;">:host</span> gitlab <span style="color: #3a81c3;">:repo</span> <span style="color: #2d9574;">"willvaughn/emacs-0x0"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-orgc9e7a22" class="outline-3">
<h3 id="orgc9e7a22">RSS with Elfeed</h3>
<div class="outline-text-3" id="text-orgc9e7a22">
<p>
<a href="https://github.com/skeeto/elfeed">Elfeed</a> looks like a great RSS feed reader.  Not using it much yet, but definitely looking forward to using it to keep track of a few different blogs I follow using Twitter.  Also seems to be great for following subreddits like /r/Emacs.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> elfeed<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> elfeed-feeds
    '<span style="color: #2d9574;">(</span><span style="color: #2d9574;">"https://nullprogram.com/feed/"</span>
      <span style="color: #2d9574;">"https://ambrevar.xyz/atom.xml"</span>
      <span style="color: #2d9574;">"https://guix.gnu.org/feeds/blog.atom"</span>
      <span style="color: #2d9574;">"https://valdyas.org/fading/feed/"</span>
      <span style="color: #2d9574;">"https://www.reddit.com/r/emacs/.rss"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-elfeed"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgf28aac0" class="outline-3">
<h3 id="orgf28aac0">Media</h3>
<div class="outline-text-3" id="text-orgf28aac0">
</div>
<div id="outline-container-org1a1722f" class="outline-4">
<h4 id="org1a1722f">mpv</h4>
<div class="outline-text-4" id="text-org1a1722f">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> mpv <span style="color: #3a81c3;">:straight</span> t<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org3e42756" class="outline-4">
<h4 id="org3e42756">EMMS</h4>
<div class="outline-text-4" id="text-org3e42756">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> emms<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">require</span> '<span style="color: #4e3163;">emms-setup</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>emms-standard<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>emms-default-players<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>emms-mode-line-disable<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> emms-source-file-default-directory <span style="color: #2d9574;">"~/Music/"</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>dw/leader-key-def
    <span style="color: #2d9574;">"am"</span>  '<span style="color: #2d9574;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"media"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">"amp"</span> '<span style="color: #2d9574;">(</span>emms-pause <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"play / pause"</span><span style="color: #2d9574;">)</span>
    <span style="color: #2d9574;">"amf"</span> '<span style="color: #2d9574;">(</span>emms-play-file <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"play file"</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-emms"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org903685a" class="outline-3">
<h3 id="org903685a">Gemini</h3>
<div class="outline-text-3" id="text-org903685a">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> elpher<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-elpher"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org6954f59" class="outline-2">
<h2 id="org6954f59">System Utilities</h2>
<div class="outline-text-2" id="text-org6954f59">
</div>
<div id="outline-container-org3eee888" class="outline-3">
<h3 id="org3eee888">Guix</h3>
<div class="outline-text-3" id="text-org3eee888">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> guix<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>dw/leader-key-def
  <span style="color: #2d9574;">"G"</span>  '<span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:ignore</span> t <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"Guix"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"Gg"</span> '<span style="color: #6c3163;">(</span>guix <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"Guix"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"Gi"</span> '<span style="color: #6c3163;">(</span>guix-installed-user-packages <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"user packages"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"GI"</span> '<span style="color: #6c3163;">(</span>guix-installed-system-packages <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"system packages"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"Gp"</span> '<span style="color: #6c3163;">(</span>guix-packages-by-name <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"search packages"</span><span style="color: #6c3163;">)</span>
  <span style="color: #2d9574;">"GP"</span> '<span style="color: #6c3163;">(</span>guix-pull <span style="color: #3a81c3;">:which-key</span> <span style="color: #2d9574;">"pull"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-guix"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgb94c540" class="outline-3">
<h3 id="orgb94c540">Daemons</h3>
<div class="outline-text-3" id="text-orgb94c540">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> daemons<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-daemons"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orga6371e2" class="outline-3">
<h3 id="orga6371e2">PulseAudio</h3>
<div class="outline-text-3" id="text-orga6371e2">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> pulseaudio-control<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> pulseaudio-control-pactl-path <span style="color: #2d9574;">"/run/current-system/profile/bin/pactl"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-pulseaudio-control"</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org5142af5" class="outline-3">
<h3 id="org5142af5">Bluetooth</h3>
<div class="outline-text-3" id="text-org5142af5">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/bluetooth-connect-q30</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>start-process-shell-command <span style="color: #2d9574;">"bluetoothctl"</span> nil <span style="color: #2d9574;">"bluetoothctl -- connect 11:14:00:00:1E:1A"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/bluetooth-connect-qc35</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>start-process-shell-command <span style="color: #2d9574;">"bluetoothctl"</span> nil <span style="color: #2d9574;">"bluetoothctl -- connect 04:52:C7:5E:5C:A8"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">defun</span> <span style="color: #6c3163; font-weight: bold;">dw/bluetooth-disconnect</span> <span style="color: #6c3163;">()</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">interactive</span><span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>start-process-shell-command <span style="color: #2d9574;">"bluetoothctl"</span> nil <span style="color: #2d9574;">"bluetoothctl -- disconnect"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org5631a2c" class="outline-3">
<h3 id="org5631a2c">Proced</h3>
<div class="outline-text-3" id="text-org5631a2c">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup proced
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> proced-auto-update-interval 1<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span>add-hook 'proced-mode-hook
            <span style="color: #2d9574;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> <span style="color: #67b11d;">()</span>
              <span style="color: #67b11d;">(</span>proced-toggle-auto-update 1<span style="color: #67b11d;">)</span><span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org4e20a13" class="outline-3">
<h3 id="org4e20a13">Docker</h3>
<div class="outline-text-3" id="text-org4e20a13">
<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> docker<span style="color: #6c3163;">)</span>
  <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:also-load</span> docker-tramp<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">(</span>setup <span style="color: #6c3163;">(</span><span style="color: #3a81c3;">:pkg</span> docker-tramp<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
<b>Guix Packages</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #2d9574;">"emacs-docker"</span>
<span style="color: #2d9574;">"emacs-docker-tramp"</span>
<span style="color: #2d9574;">"emacs-dockerfile-mode"</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org134c8eb" class="outline-2">
<h2 id="org134c8eb">Runtime Performance</h2>
<div class="outline-text-2" id="text-org134c8eb">
<p>
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">
<span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Make gc pauses faster by decreasing the threshold.</span>
<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">setq</span> gc-cons-threshold <span style="color: #6c3163;">(</span>* 2 1000 1000<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orga3e5168" class="outline-2">
<h2 id="orga3e5168">Emacs Profile</h2>
<div class="outline-text-2" id="text-orga3e5168">
<p>
<b>.config/guix/manifests/emacs.scm:</b>
</p>

<div class="org-src-container">
<pre class="src src-scheme">
<span style="color: #3a81c3;">(</span>specifications-&gt;manifest
 '<span style="color: #6c3163;">(</span><span style="color: #2aa1ae; background-color: #ecf3ec;">;;</span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs"</span>
   <span style="color: #2d9574;">"emacs-native-comp"</span>

   <span style="color: #2d9574;">"emacs-no-littering"</span>

   <span style="color: #2d9574;">"emacs-exwm"</span>
   <span style="color: #2d9574;">"emacs-desktop-environment"</span>

   <span style="color: #2d9574;">"emacs-evil"</span>
   <span style="color: #2d9574;">"emacs-evil-collection"</span>
   <span style="color: #2d9574;">"emacs-undo-tree"</span>

   <span style="color: #2d9574;">"emacs-which-key"</span>

   <span style="color: #2d9574;">"emacs-general"</span>

   <span style="color: #2d9574;">"emacs-doom-themes"</span>
   <span style="color: #2d9574;">"emacs-spacegray-theme"</span>

   <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs-unicode-fonts"</span>

   <span style="color: #2d9574;">"emacs-emojify"</span>

   <span style="color: #2d9574;">"emacs-doom-modeline"</span>
   <span style="color: #2d9574;">"emacs-all-the-icons"</span>
   <span style="color: #2d9574;">"emacs-minions"</span>

   <span style="color: #2d9574;">"emacs-perspective"</span>

   <span style="color: #2d9574;">"emacs-alert"</span>

   <span style="color: #2d9574;">"emacs-super-save"</span>

   <span style="color: #2d9574;">"emacs-pinentry"</span>
   <span style="color: #2d9574;">"pinentry-emacs"</span>

   <span style="color: #2d9574;">"emacs-evil-nerd-commenter"</span>

   <span style="color: #2d9574;">"emacs-ws-butler"</span>

   <span style="color: #2d9574;">"emacs-parinfer-mode"</span>

   <span style="color: #2d9574;">"emacs-origami-el"</span>

   <span style="color: #2d9574;">"emacs-hydra"</span>

   <span style="color: #2d9574;">"emacs-vertico"</span>

   <span style="color: #2d9574;">"emacs-orderless"</span>

   <span style="color: #2d9574;">"emacs-consult"</span>

   <span style="color: #2d9574;">"emacs-marginalia"</span>

   <span style="color: #2d9574;">"emacs-embark"</span>

   <span style="color: #2d9574;">"emacs-app-launcher"</span>

   <span style="color: #2d9574;">"emacs-avy"</span>

   <span style="color: #2d9574;">"emacs-default-text-scale"</span>

   <span style="color: #2d9574;">"emacs-ace-window"</span>

   <span style="color: #2d9574;">"emacs-visual-fill-column"</span>

   <span style="color: #2d9574;">"emacs-password-store"</span>
   <span style="color: #2d9574;">"emacs-auth-source-pass"</span>

   <span style="color: #2d9574;">"emacs-dired-single"</span>
   <span style="color: #2d9574;">"emacs-dired-hacks"</span>
   <span style="color: #2d9574;">"emacs-all-the-icons-dired"</span>

   <span style="color: #2d9574;">"emacs-openwith"</span>

   <span style="color: #2d9574;">"emacs-org"</span>

   <span style="color: #2d9574;">"emacs-org-superstar"</span>

   <span style="color: #2d9574;">"emacs-org-pomodoro"</span>

   <span style="color: #2d9574;">"emacs-evil-org"</span>

   <span style="color: #2d9574;">"emacs-org-make-toc"</span>

   <span style="color: #2d9574;">"emacs-org-caldav"</span>

   <span style="color: #2d9574;">"emacs-org-present"</span>

   <span style="color: #2aa1ae; background-color: #ecf3ec;">; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs-org-roam"</span>

   <span style="color: #2d9574;">"emacs-org-appear"</span>

   <span style="color: #2d9574;">"emacs-magit"</span>
   <span style="color: #2d9574;">"emacs-magit-todos"</span>

   <span style="color: #2d9574;">"emacs-forge"</span>

   <span style="color: #2d9574;">"emacs-magit-todos"</span>

   <span style="color: #2d9574;">"emacs-git-link"</span>

   <span style="color: #2d9574;">"emacs-git-gutter"</span>
   <span style="color: #2d9574;">"emacs-git-gutter-fringe"</span>

   <span style="color: #2d9574;">"git"</span>
   <span style="color: #2d9574;">"git:send-email"</span>

   <span style="color: #2d9574;">"emacs-projectile"</span>
   <span style="color: #2d9574;">"ripgrep"</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">For counsel-projectile-rg</span>
   <span style="color: #2d9574;">"the-silver-searcher"</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">For counsel-projectile-ag</span>

   <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs-lsp-mode"</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"emacs-lsp-ui"</span>

   <span style="color: #2d9574;">"emacs-eglot"</span>

   <span style="color: #2d9574;">"emacs-lispy"</span>
   <span style="color: #2d9574;">"emacs-lispyville"</span>

   <span style="color: #2d9574;">"emacs-js2-mode"</span>
   <span style="color: #2d9574;">"emacs-typescript-mode"</span>
   <span style="color: #2d9574;">"emacs-apheleia"</span>

   <span style="color: #2d9574;">"ccls"</span>
   <span style="color: #2d9574;">"emacs-ccls"</span>

   <span style="color: #2d9574;">"emacs-go-mode"</span>

   <span style="color: #2d9574;">"emacs-rust-mode"</span>

   <span style="color: #2d9574;">"emacs-helpful"</span>

   <span style="color: #2d9574;">"emacs-geiser"</span>

   <span style="color: #2d9574;">"emacs-markdown-mode"</span>

   <span style="color: #2d9574;">"emacs-web-mode"</span>

   <span style="color: #2d9574;">"emacs-yaml-mode"</span>

   <span style="color: #2d9574;">"emacs-flycheck"</span>

   <span style="color: #2d9574;">"emacs-yasnippet"</span>
   <span style="color: #2d9574;">"emacs-yasnippet-snippets"</span>

   <span style="color: #2d9574;">"emacs-smartparens"</span>

   <span style="color: #2d9574;">"emacs-rainbow-delimiters"</span>

   <span style="color: #2d9574;">"emacs-rainbow-mode"</span>

   <span style="color: #2d9574;">"emacs-posframe"</span>
   <span style="color: #2d9574;">"emacs-keycast"</span>

   <span style="color: #2d9574;">"emacs-obs-websocket-el"</span>

   <span style="color: #2d9574;">"emacs-mu4e-alert"</span>

   <span style="color: #2d9574;">"ledger"</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;">;; </span><span style="color: #2aa1ae; background-color: #ecf3ec;">"hledger"</span>
   <span style="color: #2d9574;">"emacs-ledger-mode"</span>

   <span style="color: #2d9574;">"emacs-eshell-z"</span>
   <span style="color: #2d9574;">"emacs-esh-autosuggest"</span>
   <span style="color: #2d9574;">"emacs-xterm-color"</span>
   <span style="color: #2d9574;">"emacs-exec-path-from-shell"</span>

   <span style="color: #2d9574;">"emacs-fish-completion"</span>

   <span style="color: #2d9574;">"emacs-eshell-syntax-highlighting"</span>

   <span style="color: #2d9574;">"emacs-eshell-toggle"</span>

   <span style="color: #2d9574;">"emacs-vterm"</span>

   <span style="color: #2d9574;">"emacs-tracking"</span>

   <span style="color: #2d9574;">"emacs-telega"</span>

   <span style="color: #2d9574;">"emacs-erc-image"</span>
   <span style="color: #2d9574;">"emacs-erc-hl-nicks"</span>

   <span style="color: #2d9574;">"emacs-elfeed"</span>

   <span style="color: #2d9574;">"emacs-emms"</span>

   <span style="color: #2d9574;">"emacs-elpher"</span>

   <span style="color: #2d9574;">"emacs-guix"</span>

   <span style="color: #2d9574;">"emacs-daemons"</span>

   <span style="color: #2d9574;">"emacs-pulseaudio-control"</span>

   <span style="color: #2d9574;">"emacs-docker"</span>
   <span style="color: #2d9574;">"emacs-docker-tramp"</span>
   <span style="color: #2d9574;">"emacs-dockerfile-mode"</span>

<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: karthik</p>
<p class="date">Created: 2023-03-13 Mon 07:57</p>
<p class="validation"><a href="https://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
