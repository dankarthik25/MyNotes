<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2022-08-22 Mon 11:04 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Notes<sub>cpp</sub></title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Cherno" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel="stylesheet" type="text/css" href="/home/jayradhey/mynotes/org2html/org-theme-collection/readtheorg-htmlize.css"/>
<link rel="stylesheet" type="text/css" href="/home/jayradhey/mynotes/org2html/org-theme-collection/readtheorg.css"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/lib/js/jquery.stickytableheaders.min.js"></script>
<script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/js/readtheorg.js"></script>
<script type="text/javascript">
// @license magnet:?xt=urn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&dn=public-domain.txt Public Domain
<!--/*--><![CDATA[/*><!--*/
     function CodeHighlightOn(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.add("code-highlighted");
         target.classList.add("code-highlighted");
       }
     }
     function CodeHighlightOff(elem, id)
     {
       var target = document.getElementById(id);
       if(null != target) {
         elem.classList.remove("code-highlighted");
         target.classList.remove("code-highlighted");
       }
     }
    /*]]>*///-->
// @license-end
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="content">
<h1 class="title">Notes<sub>cpp</sub></h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org90f330e">C++ basics without class</a>
<ul>
<li><a href="#orgd954ba2">Why C++ ?</a>
<ul>
<li><a href="#org149d107">How C++ complier and linker works</a></li>
<li><a href="#org137eca3">C++ Vs other prg language</a></li>
</ul>
</li>
<li><a href="#orgdeb6f60">C complier why use cmake</a></li>
<li><a href="#org6e3ac58">Data types</a>
<ul>
<li><a href="#org95a9e21">Introduction</a></li>
<li><a href="#org27e21b3">String</a></li>
<li><a href="#org0311093">Array</a></li>
<li><a href="#orgbb3d2af">Enumerator</a></li>
<li><a href="#org4898c20">Union</a></li>
<li><a href="#org2236306">Structor</a></li>
<li><a href="#org582ec07">mutable : it can chanage</a></li>
</ul>
</li>
<li><a href="#org44841f1">Typedef</a></li>
<li><a href="#org5d8d945">Operator</a>
<ul>
<li><a href="#orgea9ee4b">arithematic operator</a></li>
<li><a href="#orga7f967b">relation operator</a></li>
<li><a href="#org19e156c">Logical</a></li>
<li><a href="#org133bac1">Conditoin Opearator (Ternary operator)</a></li>
<li><a href="#org6bc8a0f">assignment operator</a></li>
<li><a href="#orge12e47a">Bitwise Opearator</a></li>
<li><a href="#orgb4d7425">other</a></li>
</ul>
</li>
<li><a href="#orgb8960d5">Escape sequence</a></li>
<li><a href="#org4f34d56">Constant</a>
<ul>
<li><a href="#org421b273">#define</a></li>
<li><a href="#org7b671dd">const:</a></li>
</ul>
</li>
<li><a href="#orgba3509f">Structure</a></li>
<li><a href="#orgbdb521b">Pointer Vs Reference</a>
<ul>
<li><a href="#org971ee42">Pro and Cons for Pointer and Ref</a></li>
<li><a href="#orga6a078e">Example</a></li>
</ul>
</li>
<li><a href="#org4115ecc">Function</a>
<ul>
<li><a href="#org0a77594">Syntax</a></li>
<li><a href="#org4112d69">Declaration</a></li>
<li><a href="#org17acce3">Defination</a></li>
<li><a href="#org5f8fad8">Call by value :</a></li>
<li><a href="#org79e2334">Call by ref Vs Call by pointer</a></li>
<li><a href="#orgbe50bd7">Function return pointer</a></li>
<li><a href="#org062fd1f">Inline Functions</a></li>
<li><a href="#org2139c3c">Function Overload</a></li>
<li><a href="#org51580d8">Recurssion</a></li>
</ul>
</li>
<li><a href="#orgea5d793">Static data members and static functions</a></li>
<li><a href="#org890b069">Storage Class</a>
<ul>
<li><a href="#orgff15b81">Intro</a></li>
<li><a href="#org98d1231">auto     :(default) stores in primary memory (RAm)</a></li>
<li><a href="#orgd3c04aa">registor : register eg: counter</a></li>
<li><a href="#org90a7cd0">static   : complier will keep var existance throughout the prg(.cpp file) eg: total</a></li>
<li><a href="#org4c7b959">external : refer to all global var visible in all prg file</a></li>
<li><a href="#org58447f2">mutable  :</a></li>
</ul>
</li>
<li><a href="#org26a1a8d">include and namespace</a></li>
<li><a href="#orgf069141">Namespace</a></li>
</ul>
</li>
<li><a href="#org85fb97c">Basic II</a>
<ul>
<li><a href="#orgcb226d2">Vector</a></li>
<li><a href="#org021dc8f">Libraries</a>
<ul>
<li><a href="#org013a2fe">Create own lib</a></li>
</ul>
</li>
<li><a href="#orgf50facd">Templet</a>
<ul>
<li><a href="#org7eda087">Function Templet</a></li>
<li><a href="#org4523e1c">Class Templet</a></li>
<li><a href="#org90c996d">Std Temple library</a></li>
</ul>
</li>
<li><a href="#org95c3aeb">Preprocess</a>
<ul>
<li><a href="#org01ba6e2">include</a></li>
<li><a href="#org3cc36e2">pragma</a></li>
<li><a href="#orgfd3efe6">ifndefin</a></li>
<li><a href="#orga149880">macro</a></li>
</ul>
</li>
<li><a href="#org5080381">Exception Handling</a></li>
<li><a href="#org2d2279b">multi-threading</a>
<ul>
<li><a href="#org9544f26">Creating Threads</a></li>
<li><a href="#org985d281">Terminating Threads</a></li>
<li><a href="#org71810b4">Passing Arguments to Threads</a></li>
<li><a href="#org2cb8ba3">Joining &amp; Detaching Threads</a></li>
</ul>
</li>
<li><a href="#org98edd76">Files and Streams:</a>
<ul>
<li><a href="#org48aace2">syanatx</a></li>
<li><a href="#org69af4ae">Example</a></li>
<li><a href="#org1ae6483">Closing a file</a></li>
</ul>
</li>
<li><a href="#org4330f5f">Auto keyword</a></li>
<li><a href="#orgd363497">std::array</a></li>
<li><a href="#org589d830">Dynamic memory allocation</a>
<ul>
<li><a href="#org97bef87">new and delete</a></li>
<li><a href="#org15ac702">Example: [heap using (new but not del) or (auto delete ) heap having scope ]</a></li>
<li><a href="#orga7fc27b">Stack vs heap</a></li>
<li><a href="#org255752e">heap</a></li>
<li><a href="#org837e204">Smart Pointer</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org8db0196">Class and objects</a>
<ul>
<li><a href="#org4684982">Syntax</a></li>
<li><a href="#org157b069">Defining member function outside class by scope resolution(::)</a></li>
<li><a href="#orgec7781b">this</a>
<ul>
<li><a href="#orgd452c43">Example</a></li>
</ul>
</li>
<li><a href="#org7036040">Constructor</a>
<ul>
<li><a href="#org2390f6d">Intro</a></li>
<li><a href="#orgbc011a4">(Default,Parameter, Copy) Constructor</a></li>
<li><a href="#orgd426755">Construction DEPTH</a></li>
<li><a href="#org86f31ff">Initializer List</a></li>
<li><a href="#org8a5bb47">member initializer</a></li>
<li><a href="#org839f9db">Copying and Copy Constructor</a></li>
</ul>
</li>
<li><a href="#orgc7d323e">Destructor</a>
<ul>
<li><a href="#orgb9e563c">Syntax</a></li>
<li><a href="#orgd9f040f">Exampel mem as a pointer</a></li>
</ul>
</li>
<li><a href="#orgde20f80">Class as Pointer</a></li>
<li><a href="#org6294595">Visibility</a></li>
<li><a href="#orgaad66b9">Function overload</a>
<ul>
<li><a href="#org4f2f36c">Introduction</a></li>
<li><a href="#org6c56596">Example</a></li>
<li><a href="#org6358ecf">How it work</a></li>
<li><a href="#org946f482">Rules where function overload doesn't work</a></li>
<li><a href="#org63bd1fc">Function Hiding using scope</a></li>
</ul>
</li>
<li><a href="#orgdcc46c7">Operator Overloading</a>
<ul>
<li><a href="#org3e37840">Syntax for class members</a></li>
<li><a href="#orgc5f5d16">Syntax for non-members functions</a></li>
<li><a href="#org0302d38">Example</a></li>
<li><a href="#org67f327a">Example without operator overloading</a></li>
<li><a href="#orgc66da8d">Example with operator overloading</a></li>
</ul>
</li>
<li><a href="#org15263a5">Object (Create / Instantiate Object)</a></li>
</ul>
</li>
<li><a href="#org685d012">oops</a>
<ul>
<li><a href="#org8f42e14">Inheritance</a>
<ul>
<li><a href="#org9aa38d7">Introduction</a></li>
<li><a href="#org66dabf7">Syntax</a></li>
<li><a href="#orgadcef49">Example</a></li>
<li><a href="#orgcd1bf78">Types of inheritance by Acess Specifier</a></li>
<li><a href="#orgb261b75">multipule Inheritance:</a></li>
</ul>
</li>
<li><a href="#org5c3a2d6">Virtual and Pure Virtual Function:</a>
<ul>
<li><a href="#orgc65e443">Example</a></li>
<li><a href="#org5e9d3de">Syntax</a></li>
<li><a href="#org4cbd785">Example for virtual function</a></li>
<li><a href="#org79c581f">Pure virtual function :</a></li>
<li><a href="#org3c70704">Example for Pure Virtual Function</a></li>
<li><a href="#org222162b">Example 2: Create fucntion which print class name</a></li>
<li><a href="#org0cceb8f">How it work</a></li>
<li><a href="#orgf7aeff8">Dynamic Linkage :</a></li>
</ul>
</li>
<li><a href="#org291bf9d">Interfaces by Abstract Class</a>
<ul>
<li><a href="#org9e3cbb3">Defination</a></li>
<li><a href="#orgdb08ad7">Example :</a></li>
</ul>
</li>
<li><a href="#org55bd721">Abstraction</a>
<ul>
<li><a href="#org35c8883">Explination</a></li>
<li><a href="#org1a73200">Data Abstracting</a></li>
<li><a href="#orgeff843a">Abstract Data Type:</a></li>
</ul>
</li>
<li><a href="#org9d8ef6e">Encapsulation</a></li>
<li><a href="#org48ad6ba">Data hiding</a></li>
<li><a href="#org9cfe3e4">Data Hiding vs Encapsulation</a></li>
<li><a href="#org0af5899">Polymorhism</a>
<ul>
<li><a href="#org5ba5a75">Introduction</a></li>
<li><a href="#org7a06e60">Example</a></li>
<li><a href="#org4a94b3b">How it work</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orga4f7ac2">Interview Questions</a>
<ul>
<li><a href="#org9aef151">Difference between void and void pointer:</a></li>
<li><a href="#orgdc27963">Difference in Reference variable and pointer variable</a></li>
<li><a href="#org21d9936">multiple return value</a></li>
</ul>
</li>
</ul>
</div>
</div>
<p>
CppNuts : tutorial is like how to apply c++ and techincal details
<a href="https://www.youtube.com/watch?v=6Q0Cff29YwU&amp;index=36&amp;list=PLk6CEY9XxSIAQ2vE_Jb4Dbmum7UfQrXgt">https://www.youtube.com/watch?v=6Q0Cff29YwU&amp;index=36&amp;list=PLk6CEY9XxSIAQ2vE_Jb4Dbmum7UfQrXgt</a>
Cherno Project
<a href="https://www.youtube.chttps//www.quora.com/If-Linux-is-open-source-Android-is-open-source-then-why-dont-Android-apps-are-open-sourceom/playlist?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb&amp;disable_polymer=true">https://www.youtube.chttps//www.quora.com/If-Linux-is-open-source-Android-is-open-source-then-why-dont-Android-apps-are-open-sourceom/playlist?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb&amp;disable_polymer=true</a>
</p>

<div id="outline-container-org90f330e" class="outline-2">
<h2 id="org90f330e">C++ basics without class</h2>
<div class="outline-text-2" id="text-org90f330e">
</div>
<div id="outline-container-orgd954ba2" class="outline-3">
<h3 id="orgd954ba2">Why C++ ?</h3>
<div class="outline-text-3" id="text-orgd954ba2">
<p>
If we want to write fast and easy prg then c++ is the most widly used prg lang (untill go came ) 
Because it give direct control of hardware 
Widely used platform windows, mac, linux, andriod, emebeded system
</p>
</div>
<div id="outline-container-org149d107" class="outline-4">
<h4 id="org149d107">How C++ complier and linker works</h4>
<div class="outline-text-4" id="text-org149d107">
<p>
when (.cpp) is compiled it will create a (.obj) 
this  obj file is assembly level instructions that
obj file are give to  linker to create a binary file or executable file.
</p>
</div>
</div>
<div id="outline-container-org137eca3" class="outline-4">
<h4 id="org137eca3">C++ Vs other prg language</h4>
<div class="outline-text-4" id="text-org137eca3">
<p>
C++ is one of the oldest prg lang 80's having a large background and community (gameing, linux, open-source)
Other Prg language like c#, Jave the code is converted to intermediate language by  virtual meachine 
then a translator(basically c or c++) is used to convert intermediate lang to binary code
This make c++ faster but it does't mean code is c++ is faster if you code eis bad code
</p>
</div>

<ul class="org-ul">
<li><a id="orgbc5ec63"></a>Con's<br />
<div class="outline-text-5" id="text-orgbc5ec63">
<p>
C#, Java , Python make optimize virtual meachine which make code faster and matches with C++
</p>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-orgdeb6f60" class="outline-3">
<h3 id="orgdeb6f60">C complier why use cmake</h3>
</div>
<div id="outline-container-org6e3ac58" class="outline-3">
<h3 id="org6e3ac58">Data types</h3>
<div class="outline-text-3" id="text-org6e3ac58">
</div>
<div id="outline-container-org95a9e21" class="outline-4">
<h4 id="org95a9e21">Introduction</h4>
<div class="outline-text-4" id="text-org95a9e21">
<ul class="org-ul">
<li>Primative Types (Build-in Type) :
<ul class="org-ul">
<li>void</li>
<li>Integral type 
<ul class="org-ul">
<li>int</li>
<li>char</li>
</ul></li>
<li>Float type :
<ul class="org-ul">
<li>float</li>
<li>double</li>
</ul></li>
</ul></li>
<li>Derived Data Type :
<ul class="org-ul">
<li>Array</li>
<li>pointer</li>
<li>reference</li>
<li>functions</li>
</ul></li>
<li>User Defined Data Type :
<ul class="org-ul">
<li>Enumerator</li>
<li>Structure</li>
<li>Union</li>
<li>Class</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org27e21b3" class="outline-4">
<h4 id="org27e21b3">String</h4>
<div class="outline-text-4" id="text-org27e21b3">
<p>
char uft-8 : 128 char
uft-16,uft-32 used for other languages 
</p>

<p>
string end with null '\0'or 0 (no. notation of ascii null)
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">char</span> <span style="color: #715ab1;">name</span>[6] = {<span style="color: #2d9574;">'C'</span>,<span style="color: #2d9574;">'h'</span>,<span style="color: #2d9574;">'e'</span>, <span style="color: #2d9574;">'n'</span>, <span style="color: #2d9574;">'o'</span>,<span style="color: #2d9574;">'\0'</span>}; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">or 0 </span>
<span style="color: #ba2f59; font-weight: bold;">char</span>* <span style="color: #715ab1;">name</span> = <span style="color: #2d9574;">"Cherno"</span> 
</pre>
</div>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">PrintString</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">string</span>&amp; <span style="color: #715ab1;">str1</span>)
{
  str1 = str1 + <span style="color: #2d9574;">"h"</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Error : we defined this function such a way that we should n't  manupulate the data while printing</span>
    cout&lt;&lt; str1&lt;&lt; endl;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org0311093" class="outline-4">
<h4 id="org0311093">Array</h4>
<div class="outline-text-4" id="text-org0311093">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>[5];
  <span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #715ab1;">p</span> = a;
  <span style="color: #3a81c3; font-weight: bold;">for</span> (<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span> = 0; i&lt; 5;i++)
    example[i] =i*i;
  a[2] = 5;
  <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">OR WE CAN USE POINTER</span>
  *(ptr +2)= 5;
  <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">OR using different data type pointer</span>
  *(<span style="color: #ba2f59; font-weight: bold;">int</span>*) ( (<span style="color: #ba2f59; font-weight: bold;">char</span>*) ptr +2*(4/1) ) = 6; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">ptr is char type so size is 1byte but data is 4byte so we use 2*4</span>


}

</pre>
</div>
</div>
</div>
<div id="outline-container-orgbb3d2af" class="outline-4">
<h4 id="orgbb3d2af">Enumerator</h4>
<div class="outline-text-4" id="text-orgbb3d2af">
<p>
Var or identifier has fixed set of o/p 
</p>
<div class="org-src-container">
<pre class="src src-cpp">  <span style="color: #3a81c3; font-weight: bold;">enum</span> <span style="color: #ba2f59; font-weight: bold;">enumType_Name</span> {<span style="color: #715ab1;">list_of_output</span> } <span style="color: #715ab1;">var_name</span>;
  <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">eg:</span>
  <span style="color: #3a81c3; font-weight: bold;">enum</span> <span style="color: #ba2f59; font-weight: bold;">color</span> {<span style="color: #715ab1;">red</span>,<span style="color: #715ab1;">green</span>=6, <span style="color: #715ab1;">blue</span>, <span style="color: #715ab1;">black</span>} <span style="color: #715ab1;">c</span>;
  c = blue;

  <span style="color: #ba2f59; font-weight: bold;">color</span> <span style="color: #715ab1;">mycolor</span> = red;

<span style="color: #3a81c3; font-weight: bold;">enum</span> <span style="color: #ba2f59; font-weight: bold;">Example</span> : uns igned <span style="color: #ba2f59; font-weight: bold;">char</span>
  { A = 5, B,C}
</pre>
</div>
</div>
</div>
<div id="outline-container-org4898c20" class="outline-4">
<h4 id="org4898c20">Union</h4>
<div class="outline-text-4" id="text-org4898c20">
<p>
has same memory
use for typeplanning (vector3, or, rgb   same memory but different name )
</p>
</div>
</div>

<div id="outline-container-org2236306" class="outline-4">
<h4 id="org2236306">Structor</h4>
</div>
<div id="outline-container-org582ec07" class="outline-4">
<h4 id="org582ec07">mutable : it can chanage</h4>
<div class="outline-text-4" id="text-org582ec07">
<ul class="org-ul">
<li>Two uses
<ul class="org-ul">
<li><p>
const in class 
</p>
<div class="org-src-container">
<pre class="src src-cpp"> <span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">m_name</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">int_debugcount</span>;
  mutalbe <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">mut_debugcount</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  cosnt <span style="color: #ba2f59; font-weight: bold;">string</span>&amp; <span style="color: #6c3163; font-weight: bold;">Getx</span>() <span style="color: #3a81c3; font-weight: bold;">const</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">this method can't modify any of class mem variables </span>
  {
    int_debugcount++;   <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">ERROR : can't change</span>
    mut_debugcount++;    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">No error : can change var in const function</span>
    <span style="color: #3a81c3; font-weight: bold;">return</span> m_x;
  }
};
</pre>
</div></li>
<li><p>
lamdas 
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span> = 8;
  <span style="color: #3a81c3; font-weight: bold;">auto</span> <span style="color: #715ab1;">f</span> = [=]() mutalbe <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">pass x by value </span>
    {
      x++;
      cout&lt;&lt; x&lt;&lt; <span style="color: #4e3163;">std</span>:: endl;
    }
  f();


  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">x = 8</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">without mutable</span>
  <span style="color: #3a81c3; font-weight: bold;">auto</span> <span style="color: #715ab1;">f</span> = [=]()  
    {
      <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">y</span> = x;
      y++;
      cout&lt;&lt; y&lt;&lt; <span style="color: #4e3163;">std</span>:: endl;
    }
  f();

}
</pre>
</div></li>
</ul></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org44841f1" class="outline-3">
<h3 id="org44841f1">Typedef</h3>
<div class="outline-text-3" id="text-org44841f1">
<p>
User defined name for existing type is done by typedef
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #3a81c3; font-weight: bold;">typedef</span>          <span style="color: #ba2f59; font-weight: bold;">short</span> <span style="color: #ba2f59; font-weight: bold;">int</span>  <span style="color: #ba2f59; font-weight: bold;">int16</span>;       <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[-2^15  2^15]</span>
  <span style="color: #3a81c3; font-weight: bold;">typedef</span> <span style="color: #ba2f59; font-weight: bold;">unsigned</span> <span style="color: #ba2f59; font-weight: bold;">short</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #ba2f59; font-weight: bold;">uint16</span>;       <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[0 2^16]</span>

  <span style="color: #3a81c3; font-weight: bold;">typedef</span>          <span style="color: #ba2f59; font-weight: bold;">int</span>  <span style="color: #ba2f59; font-weight: bold;">int32</span>;             <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[-2^31 2^31]</span>
  <span style="color: #3a81c3; font-weight: bold;">typedef</span> <span style="color: #ba2f59; font-weight: bold;">unsigned</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #ba2f59; font-weight: bold;">uint32</span>;             <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[0  2^32]</span>

  <span style="color: #3a81c3; font-weight: bold;">typedef</span>          <span style="color: #ba2f59; font-weight: bold;">long</span> <span style="color: #ba2f59; font-weight: bold;">int</span>  <span style="color: #ba2f59; font-weight: bold;">int64</span>;        <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[-2^63 2^63]</span>
  <span style="color: #3a81c3; font-weight: bold;">typedef</span> <span style="color: #ba2f59; font-weight: bold;">unsigned</span> <span style="color: #ba2f59; font-weight: bold;">long</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #ba2f59; font-weight: bold;">uint64</span>;        <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[ 0 2^64]</span>

  <span style="color: #ba2f59; font-weight: bold;">uint16</span> <span style="color: #715ab1;">counter1</span>;        <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">unsigned short int counter1;</span>
  <span style="color: #ba2f59; font-weight: bold;">int32</span>  <span style="color: #715ab1;">x1</span>,<span style="color: #715ab1;">x2</span>,<span style="color: #715ab1;">x3</span>,<span style="color: #715ab1;">x4</span>;     <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">int </span>
  <span style="color: #ba2f59; font-weight: bold;">int64</span>  <span style="color: #715ab1;">x_total</span>;         <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">long int</span>

}

</pre>
</div>
</div>
</div>
<div id="outline-container-org5d8d945" class="outline-3">
<h3 id="org5d8d945">Operator</h3>
<div class="outline-text-3" id="text-org5d8d945">
</div>
<div id="outline-container-orgea9ee4b" class="outline-4">
<h4 id="orgea9ee4b">arithematic operator</h4>
<div class="outline-text-4" id="text-orgea9ee4b">
<p>
Uniary : -, <del>, +</del>, &#x2013;
binary : +, -, *, /, %(remainder)
</p>
</div>
</div>
<div id="outline-container-orga7f967b" class="outline-4">
<h4 id="orga7f967b">relation operator</h4>
<div class="outline-text-4" id="text-orga7f967b">
<p>
&gt;, &lt;,&lt;=,&gt;=,==,!=
</p>
</div>
</div>
<div id="outline-container-org19e156c" class="outline-4">
<h4 id="org19e156c">Logical</h4>
<div class="outline-text-4" id="text-org19e156c">
<p>
!, &amp;&amp;, ||
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">bool</span> <span style="color: #715ab1;">a</span> =0; b =1;

cout&lt;&lt; <span style="color: #4e3163;">!</span>a &lt;&lt;endl;           <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">!a = 1; true</span>
cout &lt;&lt; a&amp;&amp;b &lt;&lt; endl;       <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">a&amp;&amp;b = 0</span>
cout &lt;&lt; a||b &lt;&lt; endl;       <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">a||b = 1</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org133bac1" class="outline-4">
<h4 id="org133bac1">Conditoin Opearator (Ternary operator)</h4>
<div class="outline-text-4" id="text-org133bac1">
<div class="org-src-container">
<pre class="src src-cpp">(x&gt;y)? x:y;


<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">s_Level</span> = 1;s_Speed = 5;
s_Speed  = (s_Level&gt;5)? 10:5;

<span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">rank</span> = s_Level&gt; 10 ? <span style="color: #2d9574;">"master"</span> : <span style="color: #2d9574;">"Begineer"</span>;

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">or</span>

<span style="color: #3a81c3; font-weight: bold;">if</span> (s_Level &gt; 10)
  rank = <span style="color: #2d9574;">"master"</span>;
<span style="color: #3a81c3; font-weight: bold;">else</span>
  rank = <span style="color: #2d9574;">"begineer"</span>;


</pre>
</div>
</div>
</div>

<div id="outline-container-org6bc8a0f" class="outline-4">
<h4 id="org6bc8a0f">assignment operator</h4>
<div class="outline-text-4" id="text-org6bc8a0f">
<p>
<code>, =</code>,+=,-<code>,/</code>,%=
</p>
</div>
</div>

<div id="outline-container-orge12e47a" class="outline-4">
<h4 id="orge12e47a">Bitwise Opearator</h4>
<div class="outline-text-4" id="text-orge12e47a">
<p>
uniary  : ~, &lt;&lt;(left shift) , &gt;&gt; (right shift)
binary  : ~, &amp;, | , ^(xor) 
</p>
<div class="org-src-container">
<pre class="src src-cpp">A= 60;   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">A= 0011 1100</span>
B = 13;  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">B = 000 1101</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">A&amp;B = 0000 1101</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">A|B = 0011 1101</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">A^B = 0011 0001</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgb4d7425" class="outline-4">
<h4 id="orgb4d7425">other</h4>
<div class="outline-text-4" id="text-orgb4d7425">
<p>
sizeof()
comma
.(dot)
-&gt;(arrow)
</p>
</div>
</div>
</div>
<div id="outline-container-orgb8960d5" class="outline-3">
<h3 id="orgb8960d5">Escape sequence</h3>
<div class="outline-text-3" id="text-orgb8960d5">
<p>
\n      new line
\t      tab
\"      "
\'      ' 
\\      \      &#x2026;&#x2026;.etc
</p>
</div>
</div>

<div id="outline-container-org4f34d56" class="outline-3">
<h3 id="org4f34d56">Constant</h3>
<div class="outline-text-3" id="text-org4f34d56">
</div>
<div id="outline-container-org421b273" class="outline-4">
<h4 id="org421b273">#define</h4>
<div class="outline-text-4" id="text-org421b273">
<p>
eg: 
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;"># define</span> <span style="color: #715ab1;">newline</span> <span style="color: #2d9574;">'\n'</span>
</pre>
</div>

<p>
'#' any line starting with is called complier directive
means:
     provide direc to complier so preprocessor will can be done
</p>

<p>
'#define':
          before exe code during compilation preprocess will replace newline with '\n'
</p>
</div>
</div>

<div id="outline-container-org7b671dd" class="outline-4">
<h4 id="org7b671dd">const:</h4>
<div class="outline-text-4" id="text-org7b671dd">
<p>
It a promise that we are n't going to change who ever you can break your promise
</p>

<p>
The reason we use const is it will help to keep code clean alot and&#x2026;.
</p>

<p>
pointer :
</p>

<p>
similar to varilabe but can't change the contant memory is allocated, used in
</p>

<p>
fake keyword 
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">max_age</span> = 55; 

</pre>
</div>
</div>

<ul class="org-ul">
<li><a id="orgc668c18"></a>Use of Constant and pointer<br />
<div class="outline-text-5" id="text-orgc668c18">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Normal Const </span>

  <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">MAX_AGE</span> =90;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #715ab1;">MAX_AGE</span> =90;


  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Normal Pointer pointing a cont var </span>

  <span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #715ab1;">a</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>;     <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">create a normal pointer </span>
  *a  = 2;              <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">ASSINING VALUE </span>
  a = (<span style="color: #ba2f59; font-weight: bold;">int</span>*) &amp;MAX_AGE;  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">poin A cosnt value </span>
  cout &lt;&lt; a&lt;&lt;endl;

  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Pointer pointing to a constant value</span>
  <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">int</span> * <span style="color: #715ab1;">a</span>  = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #3a81c3; font-weight: bold;">const</span> * <span style="color: #715ab1;">a</span>  = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>;      <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">Both give same result as const is left side of  * </span>
  *a =2;                        <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">Error we can't  modify contant(value) of pointer</span>
  a = (<span style="color: #ba2f59; font-weight: bold;">int</span>*) &amp;MAX_AGE;
  cout &lt;&lt; a&lt;&lt;endl;

  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Pointer pointing to a constant address</span>

  <span style="color: #ba2f59; font-weight: bold;">int</span> * <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #715ab1;">a</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>;
  *a = 2;
  a = (<span style="color: #ba2f59; font-weight: bold;">int</span>*) &amp;MAX_AGE;   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Error : we created pointer to point constant address </span>
  cout &lt;&lt; a &lt;&lt; endl;


  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Pointer pointing to a constant address and constant value</span>
  <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #715ab1;">a</span>  = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #3a81c3; font-weight: bold;">const</span> * <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #715ab1;">a</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>;
  *a = 2;                <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Error : we created pointer pointing to value</span>
  a = (<span style="color: #ba2f59; font-weight: bold;">int</span>*) &amp;MAX_AGE;   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Error : we created pointer to point constant address </span>
  cout &lt;&lt; a &lt;&lt; endl;

  <span style="color: #4e3163;">std</span>::cin.get();
}
</pre>
</div>
</div>
</li>

<li><a id="orgd869bad"></a>Constant  and Class<br />
<ul class="org-ul">
<li><a id="org5ad7205"></a>Creating a class method which does't change class variables<br />
<div class="outline-text-6" id="text-org5ad7205">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">m_x</span>, <span style="color: #715ab1;">m_y</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">Getx</span>() <span style="color: #3a81c3; font-weight: bold;">const</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">this method can't modify any of class mem variables </span>
  {
    m_x =2; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Error : Class mem can't  be modified in this function</span>
    <span style="color: #3a81c3; font-weight: bold;">return</span> m_x;
  }
};
</pre>
</div>
</div>
</li>
<li><a id="orgdc017e2"></a>Example :<br />
<div class="outline-text-6" id="text-orgdc017e2">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #715ab1;">m_x</span>, <span style="color: #715ab1;">m_y</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #6c3163; font-weight: bold;">GetX</span>() <span style="color: #3a81c3; font-weight: bold;">const</span>       <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">const int*    : we return  a  int that can't be modified</span>
                                      <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">const GetX()  : The contant functin cant't be modified</span>
                                      <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Get const     : the class mem can't  be modified</span>
  {
    <span style="color: #3a81c3; font-weight: bold;">return</span> m_x;
  }
}
</pre>
</div>
</div>
</li>
<li><a id="orgf75745e"></a>Why we  use const methods ?<br />
<div class="outline-text-6" id="text-orgf75745e">
<p>
If other programer  is extending this function we telling this can't  we used to modify the class variables
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">m_x</span>, <span style="color: #715ab1;">m_y</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">Getx</span>() <span style="color: #3a81c3; font-weight: bold;">const</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">this method can't modify any of class mem variables </span>
  {
    m_x =2; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Error : Class mem can't  be modified in this function</span>
    <span style="color: #3a81c3; font-weight: bold;">return</span> m_x;
  }
};

<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">PrintEntity</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span> &amp;<span style="color: #715ab1;">e</span>)       <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">we no't want to copy  obj ('.' large pointer and we can't  modify the obj)</span>
{
  cout&lt;&lt; e.Get()&lt;&lt; endl; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">for (const Entity &amp;e) attributes for function we use only const method such as int GetX() const </span>
}
</pre>
</div>
</div>
</li>

<li><a id="org2e1645c"></a>Need to change class var in const function<br />
<div class="outline-text-6" id="text-org2e1645c">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">m_x</span>, <span style="color: #715ab1;">m_y</span>;
  mutalbe <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">var</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">Getx</span>() <span style="color: #3a81c3; font-weight: bold;">const</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">this method can't modify any of class mem variables </span>
  {

    var =2; <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">We can change class var in const methods</span>
    <span style="color: #3a81c3; font-weight: bold;">return</span> m_x;
  }
};
</pre>
</div>
</div>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div id="outline-container-orgba3509f" class="outline-3">
<h3 id="orgba3509f">Structure</h3>
</div>
<div id="outline-container-orgbdb521b" class="outline-3">
<h3 id="orgbdb521b">Pointer Vs Reference</h3>
<div class="outline-text-3" id="text-orgbdb521b">
</div>
<div id="outline-container-org971ee42" class="outline-4">
<h4 id="org971ee42">Pro and Cons for Pointer and Ref</h4>
<div class="outline-text-4" id="text-org971ee42">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">comparision</th>
<th scope="col" class="org-left">Pointer</th>
<th scope="col" class="org-left">Referance</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Null</td>
<td class="org-left">can point to Null</td>
<td class="org-left">Can't point to Null</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Change memory address</td>
<td class="org-left">Yes</td>
<td class="org-left">No</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">inicailized after created</td>
<td class="org-left">Yes</td>
<td class="org-left">No</td>
<td class="org-left">(mush inicalize when created)</td>
</tr>

<tr>
<td class="org-left">Re-assignment memory</td>
<td class="org-left">Yes</td>
<td class="org-left">No</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">Ex:</td>
<td class="org-left">int i = 17;</td>
<td class="org-left">int i = 17;</td>
<td class="org-left">// i is int type</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">int *p = &amp;i;</td>
<td class="org-left">int&amp; r = i</td>
<td class="org-left">// p is pointer type and *p,r is pointer type</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">// re-assigned value *p = &#x2026;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">*p= 20; // i  =20</td>
<td class="org-left">r=20;  //i =20</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">int *p;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">// re-assigned value  r = &#x2026;.</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">p = &amp;i;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">// re-assign address p = &#x2026;..</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">//Can't re-assign addresss &amp;r !=</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">int *p =0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">//point to mem = 0 or null or null pointer</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">int *p =NULL</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">// Point to Null</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">int *p = nullptr;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">//int in C++11</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">Ex:</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">struct Book{</td>
<td class="org-left">struct Book b1;</td>
<td class="org-left">struct Book b1;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">char name[50],title[50];</td>
<td class="org-left">struct Book *p<sub>b1</sub>;</td>
<td class="org-left">struct Book&amp; r<sub>b1</sub>=b1;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">int page,id;</td>
<td class="org-left">p<sub>b1</sub> = &amp;Book1;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">}b1;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">accessing members</td>
<td class="org-left">p<sub>b1</sub>-&gt;title</td>
<td class="org-left">r<sub>b1.title</sub></td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">(*p<sub>b1</sub>).title</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">function foramal arg</td>
<td class="org-left">swap(int *x, int *y)</td>
<td class="org-left">swap(int&amp; x ,int&amp; y)</td>
<td class="org-left">in function defination formal arg we specify</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">which datatype is used to define a function</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">function actual arg</td>
<td class="org-left">swap(int&amp; a, int&amp; b)</td>
<td class="org-left">swap(int a, int b)</td>
<td class="org-left">In function call or actual arg we specify</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">which datatype is required to pass</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">Both required address and in general</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">In pointer we use (&amp;) addrress to assign</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">In ref we only use (&amp;) one time to declare ref</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">later we use ref-varaiable are normal var</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">only diff is it has same address</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orga6a078e" class="outline-4">
<h4 id="orga6a078e">Example</h4>
<div class="outline-text-4" id="text-orga6a078e">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #715ab1;">m_x</span>, <span style="color: #715ab1;">m_y</span>;         <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">m_x is a pointer , m_y is not a pointer</span>
<span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #715ab1;">m_x</span>, *<span style="color: #715ab1;">m_y</span>;        <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">m_x, m_y are pointer</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org4115ecc" class="outline-3">
<h3 id="org4115ecc">Function</h3>
<div class="outline-text-3" id="text-org4115ecc">
</div>
<div id="outline-container-org0a77594" class="outline-4">
<h4 id="org0a77594">Syntax</h4>
<div class="outline-text-4" id="text-org0a77594">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">print</span>(x,y);         <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">fuction declaration</span>

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span> = 10, <span style="color: #715ab1;">b</span> = 3;
  print(a,b);            <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">function call</span>
  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}                       <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">a,b is actual arguments</span>


<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">print</span>(x, y)         <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">function defination</span>
{cout&lt;&lt; x &lt;&lt; y ;}       <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">x,y is formal arguments</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org4112d69" class="outline-4">
<h4 id="org4112d69">Declaration</h4>
<div class="outline-text-4" id="text-org4112d69">
<p>
Tell complier that this  identifer(this identifier exisit ) name (function, varialbe or calss ..etc) and its this argument type and this   return type
</p>

<p>
Then compiler  search for path for  defination either in file or folder or Project
</p>

<p>
If no result is present for var then,  declaration create(instanziate) an var by  describes its type, be it a type, object, or function. 
</p>

<p>
A declaration is what the compiler needs to accept references to that identifier. 
</p>



<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">extern</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">bar</span>;
<span style="color: #3a81c3; font-weight: bold;">extern</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">g</span>(<span style="color: #ba2f59; font-weight: bold;">int</span>, <span style="color: #ba2f59; font-weight: bold;">int</span>);
<span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #6c3163; font-weight: bold;">f</span>(<span style="color: #ba2f59; font-weight: bold;">int</span>, <span style="color: #ba2f59; font-weight: bold;">double</span>); <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">extern can be omitted for function declarations</span>
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">foo</span>; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">no extern allowed for type declarations</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org17acce3" class="outline-4">
<h4 id="org17acce3">Defination</h4>
<div class="outline-text-4" id="text-org17acce3">
<p>
A statement that tells the compiler to allocate memory for variable,function, or class and to store in memory.
</p>

<p>
A definition actually instantiates/implements this identifier. 
</p>

<p>
It's what the linker needs in order to link references to those entities.
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">bar</span>;
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">g</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">lhs</span>, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">rhs</span>) {<span style="color: #3a81c3; font-weight: bold;">return</span> lhs*rhs;}
<span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #6c3163; font-weight: bold;">f</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span>, <span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #715ab1;">d</span>) {<span style="color: #3a81c3; font-weight: bold;">return</span> i+d;}
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">foo</span> {};
</pre>
</div>
</div>
</div>
<div id="outline-container-org5f8fad8" class="outline-4">
<h4 id="org5f8fad8">Call by value :</h4>
<div class="outline-text-4" id="text-org5f8fad8">
<div class="org-src-container">
<pre class="src src-cpp">
</pre>
</div>

<p>
when function call occure : then variable-value (actuall argument) will be used to create in another memory for formal argument
</p>
</div>
</div>

<div id="outline-container-org79e2334" class="outline-4">
<h4 id="org79e2334">Call by ref Vs Call by pointer</h4>
<div class="outline-text-4" id="text-org79e2334">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Call by referance</th>
<th scope="col" class="org-left">Call by Pointer</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">int main {</td>
<td class="org-left">int main{</td>
</tr>

<tr>
<td class="org-left">int a = 5, b =10;</td>
<td class="org-left">int a = 5, b =10</td>
</tr>

<tr>
<td class="org-left">swap(a, b)</td>
<td class="org-left">swap(&amp;a, &amp;b)</td>
</tr>

<tr>
<td class="org-left">}</td>
<td class="org-left">}</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">void swap(int&amp; x, int&amp; y)</td>
<td class="org-left">void swap(int *x, int *y)</td>
</tr>

<tr>
<td class="org-left">{</td>
<td class="org-left">{</td>
</tr>

<tr>
<td class="org-left">int temp = x;</td>
<td class="org-left">int temp = *x;</td>
</tr>

<tr>
<td class="org-left">x=y;</td>
<td class="org-left">*x = *y;</td>
</tr>

<tr>
<td class="org-left">y = temp;</td>
<td class="org-left">*y = temp;</td>
</tr>

<tr>
<td class="org-left">}</td>
<td class="org-left">}</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">comparision</th>
<th scope="col" class="org-left">Call by referance</th>
<th scope="col" class="org-left">Call by pointer</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">re-assign</td>
<td class="org-left">Can't re-assign</td>
<td class="org-left">can re-assign</td>
</tr>

<tr>
<td class="org-left">assign null point</td>
<td class="org-left">Can't assign to null pointer</td>
<td class="org-left">assign to Null pointer</td>
</tr>

<tr>
<td class="org-left">access mem in (class/struct)</td>
<td class="org-left">obj.member</td>
<td class="org-left">obj -&gt; member</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">.(dot operator)</td>
<td class="org-left">(-&gt;) (arrow operator )</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orgbe50bd7" class="outline-4">
<h4 id="orgbe50bd7">Function return pointer</h4>
<div class="outline-text-4" id="text-orgbe50bd7">
</div>
<ul class="org-ul">
<li><a id="org5d6931c"></a>syntax<br />
<div class="outline-text-5" id="text-org5d6931c">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> *<span style="color: #6c3163; font-weight: bold;">function_name</span> (agr){
  statements;
  <span style="color: #3a81c3; font-weight: bold;">return</span> xxx..;
}
</pre>
</div>
</div>
</li>

<li><a id="org35c0e60"></a>Example<br />
<div class="outline-text-5" id="text-org35c0e60">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> *<span style="color: #6c3163; font-weight: bold;">getRandom</span>();

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span> (){

  <span style="color: #ba2f59; font-weight: bold;">int</span> *<span style="color: #715ab1;">p</span>;
  p = getRandom();
  <span style="color: #3a81c3; font-weight: bold;">for</span> (<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span> = 0;i&lt;10;++i){
    cout&lt;&lt; *(p+i) &lt;&lt;endl;
  }

}

<span style="color: #ba2f59; font-weight: bold;">int</span> *<span style="color: #6c3163; font-weight: bold;">getRandom</span>(){
  <span style="color: #3a81c3; font-weight: bold;">static</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">r</span>[10];

  <span style="color: #3a81c3; font-weight: bold;">for</span>(i =0; i&lt;10;++i){
    r[i] = i; 
  }
  <span style="color: #3a81c3; font-weight: bold;">return</span> r;       <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">return pointer</span>
}
</pre>
</div>
</div>
</li>
</ul>
</div>

<div id="outline-container-org062fd1f" class="outline-4">
<h4 id="org062fd1f">Inline Functions</h4>
<div class="outline-text-4" id="text-org062fd1f">
<p>
in cpp not in c
</p>
</div>
<ul class="org-ul">
<li><a id="orgb84df35"></a>synatx<br />
<div class="outline-text-5" id="text-orgb84df35">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">inline</span> <span style="color: #6c3163; font-weight: bold;">sum</span> (<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>, inty ) { <span style="color: #3a81c3; font-weight: bold;">return</span> x+y;}
</pre>
</div>
</div>
</li>
<li><a id="org842b7a3"></a>Advantages<br />
<div class="outline-text-5" id="text-org842b7a3">
<p>
Function calling overhead reduced
variable push/pop on stack is reduced
retun call from a function overhead is reduced
increase locality of refrence by utilizing instruction cache.
once inline is done compiler can also apply intra-procedural optimazation if specified
</p>
</div>
</li>

<li><a id="org87f7512"></a>Disadvantages<br />
<div class="outline-text-5" id="text-org87f7512">
<p>
If use too many inline function (if size of inline is large) the code size increase
Compilation overhead increase if some changes code  inside function then
</p>

<p>
Some function can't be inline like recurssion, virtual function
</p>
</div>
</li>
</ul>
</div>
<div id="outline-container-org2139c3c" class="outline-4">
<h4 id="org2139c3c">Function Overload</h4>
</div>
<div id="outline-container-org51580d8" class="outline-4">
<h4 id="org51580d8">Recurssion</h4>
</div>
</div>
<div id="outline-container-orgea5d793" class="outline-3">
<h3 id="orgea5d793">Static data members and static functions</h3>
<div class="outline-text-3" id="text-orgea5d793">
<div class="org-src-container">
<pre class="src src-cpp">
</pre>
</div>
</div>
</div>
<div id="outline-container-org890b069" class="outline-3">
<h3 id="org890b069">Storage Class</h3>
<div class="outline-text-3" id="text-org890b069">
</div>
<div id="outline-container-orgff15b81" class="outline-4">
<h4 id="orgff15b81">Intro</h4>
<div class="outline-text-4" id="text-orgff15b81">
<p>
Every variable in C,C++ programming has two properties: type and storage class.
</p>

<p>
Type refers to the data type of a variable. And, storage class determines the scope and lifetime of a variable.
</p>

<p>
There are 4 types of storage class:
</p>

<p>
automatic:  stores in primary memory (RAm) 
external :
static   :
register : declare register variables
</p>
</div>

<ul class="org-ul">
<li><a id="orgde58739"></a>Scope &amp; Lifetime<br />
<div class="outline-text-5" id="text-orgde58739">
<p>
The scope of a declaration is the part of the program for which the declaration is in acessable or effective.
</p>

<p>
The lifetime of a variable or object is the time period in which the variable/object has valid memory.
Lifetime is also called "allocation method" or "storage duration."
</p>
</div>

<ul class="org-ul">
<li><a id="org78bf2da"></a>Lifetime<br />
<div class="outline-text-6" id="text-org78bf2da">
<p>
<b>Static</b>: A static variable is stored in the data segment of the "object file" of a program. Its lifetime is the entire duration of the program's execution.
<b>Automatic</b>: An automatic variable has a lifetime that begins when program execution enters the function or statement block or compound and ends when execution leaves the block. Automatic variables are stored in a "function call stack".
<b>Dynamic</b>: The lifetime of a dynamic object begins when memory is allocated for the object (e.g., by a call to malloc() or using new) and ends when memory is deallocated (e.g., by a call to free() or using delete). Dynamic objects are stored in "the heap".
</p>
</div>
</li>
<li><a id="org33284d1"></a>Scope:<br />
<div class="outline-text-6" id="text-org33284d1">
<p>
The scope of any variable is actually a subset of life time. A variable may be in the memory but may not be accessible though. So, the area of our program where we can actually access our entity (variable in this case) is the scope of that variable.
</p>

<p>
The scope of any variable can be broadly categorized into three categories :
</p>

<p>
Global scope : When variable is defined outside all functions. It is then available to all the functions of the program and all the blocks program contains.
</p>

<p>
<b>Local scope</b>    :  defined inside a function or block and locally accessible within the block 
<b>Function scope</b> :  formal arguments, it is said to have function scope.
<b>Class scope</b>    : "seen" by class members.
<b>Namespace scope</b>: visible within namespace block.
<b>File scope</b>     : visible within current text file.
<b>Global scope</b>   : visible everywhere unless "hidden".
</p>
</div>
</li>

<li><a id="org1582f93"></a>Scope :: operator<br />
<div class="outline-text-6" id="text-org1582f93">
<p>
For understand scope operator  1st we see this example 
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span><span style="color: #2d9574;">&lt;stdio.h&gt;</span>
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span> = 100;          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">global variable declared</span>
<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
   <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span> = 10;         <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">local variable declared</span>
   cout&lt;&lt;<span style="color: #2d9574;">"Global variable : "</span>::i&lt;&lt;endl;
   cout&lt;&lt;<span style="color: #2d9574;">"Local variable  : "</span>&lt;&lt;i&lt;&lt;endl;

}
</pre>
</div>
<p>
Here our variable named global has global scope and lifetime, hence it outlives in memory till the program execution is completed and can be accessed by any function / block locally too. But in case of our local variable, it may outlives in memory till program execution is completed but it can be accessed from only within  the function or block it is defined in.
</p>

<p>
The basic problem here can be, we can have variable with same name defined as a global as well as local variable, and hence, it would be ambiguos as to which variable we want to actually refer to. We can resolve this issue in C++ (Advancement of C language) by the use of a special operator known as <b>scope resolution operator</b>
.
</p>
</div>
</li>
</ul>
</li>


<li><a id="orge7e5b46"></a>Local Variable<br />
<div class="outline-text-5" id="text-orge7e5b46">
<p>
The variables declared inside the function are automatic or local variables.
</p>

<p>
The local variables exist only inside the function in which it is declared. When the function exits, the local variables are destroyed. 
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>() {
    <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">n</span>; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">n is a local variable to main() function</span>
    ... .. ...
}

<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">func</span>() {
   <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">n1</span>; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">n1 is local to func() function</span>
}
</pre>
</div>
</div>
</li>

<li><a id="orgca05c3b"></a>Global Variable<br />
<div class="outline-text-5" id="text-orgca05c3b">
<p>
Variables that are declared outside of all functions are known as external variables. External or global variables are accessible to any function.
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;stdio.h&gt;</span>
<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">display</span>();

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">n</span> = 5;  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">global variable</span>

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
    ++n;     <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">variable n is not declared in the main() function</span>
    display();
    <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}

<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">display</span>()
{
    ++n;     <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">variable n is not declared in the display() function</span>
    printf(<span style="color: #2d9574;">"n = %d"</span>, n);
}
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org98d1231" class="outline-4">
<h4 id="org98d1231">auto     :(default) stores in primary memory (RAm)</h4>
</div>
<div id="outline-container-orgd3c04aa" class="outline-4">
<h4 id="orgd3c04aa">registor : register eg: counter</h4>
<div class="outline-text-4" id="text-orgd3c04aa">
<p>
The register keyword is used to declare register variables. Register variables were supposed to be faster than local variables.
</p>

<p>
However, modern compilers are very good at code optimization and there is a rare chance that using register variables will make your program faster. 
</p>

<p>
Unless you are working on embedded system where you know how to optimize code for the given application, there is no use of register variables.
</p>
</div>
</div>
<div id="outline-container-org90a7cd0" class="outline-4">
<h4 id="org90a7cd0">static   : complier will keep var existance throughout the prg(.cpp file) eg: total</h4>
<div class="outline-text-4" id="text-org90a7cd0">
</div>
<ul class="org-ul">
<li><a id="org13fc886"></a>static inside file<br />
<div class="outline-text-5" id="text-org13fc886">
<ol class="org-ol">
<li>If you define a var in static it can only be access only in that .cpp file and can't access outside .cpp file
means the variable can private in file can't  access in other file 
inicialize(instanciated) once even if you iniciallize twice complier will ignore the statement because already iniciallized</li>
</ol>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">static</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span> =10;
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #3a81c3; font-weight: bold;">static</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span> = 0; <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">static var are n't inciallize twice this stat is n't ece</span>
  <span style="color: #3a81c3; font-weight: bold;">for</span> (j=0;j&lt;5;j++)
    {
      cout&lt;&lt; i++&lt;&lt;endl;
    }
}
</pre>
</div>
<ol class="org-ol">
<li>All functions in file can acess static varialbe</li>
</ol>
</div>
</li>
<li><a id="org5a8d177"></a>Static inside class<br />
<div class="outline-text-5" id="text-org5a8d177">
<ol class="org-ol">
<li>All obj has (shared memory) for (static var or functions)</li>
<li>Can't access outside the class</li>
<li>Inicialized one</li>
</ol>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">struct</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
  <span style="color: #3a81c3; font-weight: bold;">static</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>,<span style="color: #715ab1;">y</span>;                          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">static variable in str\class</span>
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">Print</span>(){ cout &lt;&lt;x&lt;&lt;y&lt;&lt;endl;}
  <span style="color: #3a81c3; font-weight: bold;">static</span> <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">Sprint</span>(){ count&lt;&lt;x&lt;&lt;y&lt;&lt;endl;} <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">static fun inside struct\class</span>
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #4e3163;">Entity</span>::<span style="color: #715ab1;">x</span>;  <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">define static variable</span>
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #4e3163;">Entity</span>::<span style="color: #715ab1;">y</span>;

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">Entity</span> <span style="color: #715ab1;">e</span>;
  e.x = 2;
  e.y = 3;

  <span style="color: #ba2f59; font-weight: bold;">Entity</span> <span style="color: #715ab1;">e1</span>;
  e1.x = 5;
  e1.y = 8;

  e.Print();
  e1.Print();

  <span style="color: #4e3163;">Entity</span>::x = 10;
  <span style="color: #4e3163;">Entity</span>::y = 15;
  <span style="color: #4e3163;">Entity</span>::Sprint();
  e.print();
  e1.print();
}
</pre>
</div>
</div>
</li>

<li><a id="org42d890d"></a>Static inside function:<br />
<div class="outline-text-5" id="text-org42d890d">
<p>
Static inside function means the var/obj has entire  the function 
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">extern</span> <span style="color: #ba2f59; font-weight: bold;">j</span> = 0;
<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">fun</span>()
{
  <span style="color: #3a81c3; font-weight: bold;">static</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span> = 0;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">k</span> = 0;
  cout&lt;&lt;<span style="color: #2d9574;">"extern j++ :"</span>&lt;&lt; j++&lt;&lt;<span style="color: #2d9574;">"Static i++ :"</span>&lt;&lt; i++&lt;&lt;<span style="color: #2d9574;">"local k++:"</span>&lt;&lt;k++&lt;&lt;endl;
}

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  fun();          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">extern j++ : 0   Static i++ : 0   Local k++ : 0</span>
  fun();          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">extern j++ : 1   Static i++ : 1   Local k++ : 1</span>
  j = 10;
  fun();          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">extern j++ : 10  Static i++ : 2   Local k++ : 2</span>
  fun();          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">extern j++ : 11  Static i++ : 3   Local k++ : 3</span>
  fun();          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">extern j++ : 12  Static i++ : 4   Local k++ : 4</span>
} 
</pre>
</div>
</div>
</li>
<li><a id="orgd9967ec"></a>Advantages<br />
<div class="outline-text-5" id="text-orgd9967ec">
<ol class="org-ol">
<li>In creating a prj with mulipile files then it is best to use static variable or else it will make var global and mess entire whole prj
In general compiling prj static var make linker n't to look outside the scope of file</li>
</ol>
</div>
</li>
</ul>
</div>
<div id="outline-container-org4c7b959" class="outline-4">
<h4 id="org4c7b959">external : refer to all global var visible in all prg file</h4>
</div>
<div id="outline-container-org58447f2" class="outline-4">
<h4 id="org58447f2">mutable  :</h4>
</div>
</div>
<div id="outline-container-org26a1a8d" class="outline-3">
<h3 id="org26a1a8d">include and namespace</h3>
<div class="outline-text-3" id="text-org26a1a8d">
<p>
cout is definded in std
cout is declared in iostream or ostream
</p>
</div>
</div>

<div id="outline-container-orgf069141" class="outline-3">
<h3 id="orgf069141">Namespace</h3>
</div>
</div>

<div id="outline-container-org85fb97c" class="outline-2">
<h2 id="org85fb97c">Basic II</h2>
<div class="outline-text-2" id="text-org85fb97c">
</div>
<div id="outline-container-orgcb226d2" class="outline-3">
<h3 id="orgcb226d2">Vector</h3>
<div class="outline-text-3" id="text-orgcb226d2">
<p>
dynamic array or size of the array is dynamic (resize)
</p>

<p>
generally dynamic array of std lib is not optimal so cooperating compay will have there own std lib 
</p>



<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span><span style="color: #2d9574;">&lt;iostream&gt;</span>
<span style="color: #6c3163;">#include</span><span style="color: #2d9574;">&lt;string&gt;</span>
<span style="color: #6c3163;">#include</span><span style="color: #2d9574;">&lt;vector&gt;</span>

<span style="color: #3a81c3; font-weight: bold;">struct</span> <span style="color: #ba2f59; font-weight: bold;">Ver3</span>
{
  <span style="color: #ba2f59; font-weight: bold;">float</span> <span style="color: #715ab1;">x</span>,<span style="color: #715ab1;">y</span>,<span style="color: #715ab1;">z</span>;
};

<span style="color: #ba2f59; font-weight: bold;">ostream</span>&amp; <span style="color: #3a81c3; font-weight: bold;">operator</span><span style="color: #6c3163; font-weight: bold;">&lt;&lt;</span> (<span style="color: #ba2f59; font-weight: bold;">ostream</span>&amp; <span style="color: #715ab1;">stm1</span>, <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">ver3</span>&amp; <span style="color: #715ab1;">v3</span>)
{
  stream&lt;&lt; v3.x&lt;&lt; <span style="color: #2d9574;">", "</span>&lt;&lt; v3.y&lt;&lt;<span style="color: #2d9574;">", "</span>&lt;&lt;v3.z;
  <span style="color: #3a81c3; font-weight: bold;">return</span> steam;
}
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">vector</span>&lt;<span style="color: #ba2f59; font-weight: bold;">Ver3</span>&gt; <span style="color: #715ab1;">vertices</span>;
  vertices.push_back({1, 2, 3});
  vertices.push_back({4, 5, 6});

  <span style="color: #3a81c3; font-weight: bold;">for</span> (<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span> = 0; i&lt; vertices.size(); i++)
    cout&lt;&lt; vertices[i]&lt;&lt;endl;

  <span style="color: #3a81c3; font-weight: bold;">for</span> (<span style="color: #ba2f59; font-weight: bold;">Ver3</span>&amp; <span style="color: #715ab1;">v</span> : vertices)
    cout&lt;&lt; v&lt;&lt; endl;
  vertices.clear();
}

</pre>
</div>
</div>
</div>
<div id="outline-container-org021dc8f" class="outline-3">
<h3 id="org021dc8f">Libraries</h3>
<div class="outline-text-3" id="text-org021dc8f">
<p>
there are two part as
</p>
<ul class="org-ul">
<li>file consist of includes (consist of headear flies)</li>
<li>binary (lib dir has binary(.dll or .lib) )</li>
</ul>

<p>
there are two libeary 
</p>
<ul class="org-ul">
<li>static ( inside exe)</li>
<li>dynamic (linked run-time) //</li>
</ul>

<p>
add libraries
</p>

<p>
linking binarys
</p>
</div>
<div id="outline-container-org013a2fe" class="outline-4">
<h4 id="org013a2fe">Create own lib</h4>
<div class="outline-text-4" id="text-org013a2fe">
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #2aa1ae; background-color: #ecf3ec;">## </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Create a Project</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">game            consist of Application(.exe,.o)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Engine          consist of libraries (Dynamic Library(.dll), Static library (.lib)) for all configuration and platform(32bit,64bit)</span>

mkdir gameProjectName Engine

<span style="color: #3a81c3;">cd</span> gameProjectName
mkdir scr &amp;&amp; <span style="color: #3a81c3;">cd</span> scr
touch Application.cpp

<span style="color: #3a81c3;">cd</span> ../Engine
mkdir scr &amp;&amp; <span style="color: #3a81c3;">cd</span> scr
touch Engine.cpp Engine.h
</pre>
</div>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">file name : Engine.h</span>

<span style="color: #6c3163;">#pragma</span> once
<span style="color: #3a81c3; font-weight: bold;">namespace</span> <span style="color: #4e3163;">engine</span>
{ <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">PrintMessage</span>();}


<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">file name : Engine.cpp</span>

<span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">"Engine.h"</span>
<span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;iostream&gt;</span>

<span style="color: #3a81c3; font-weight: bold;">namespace</span> <span style="color: #4e3163;">engine</span>{
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">PrintMessage</span>()
  {
    <span style="color: #4e3163;">std</span>::out&lt;&lt;<span style="color: #2d9574;">"Hello World"</span>&lt;&lt; <span style="color: #4e3163;">std</span>::endl;
  }
}


<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">application.cpp</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Below used a relavtive path</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">cons : if different prj is using same lib then relative path is messing</span>
<span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">"../Engine/src/Engine.h"</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">// below we  complier path then</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">#include "Engine.h"</span>

<span style="color: #6c3163;">#include</span><span style="color: #2d9574;">&lt;iostream&gt;</span>
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #4e3163;">engine</span>::PrintMessage();
}

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgf50facd" class="outline-3">
<h3 id="orgf50facd">Templet</h3>
<div class="outline-text-3" id="text-orgf50facd">
</div>
<div id="outline-container-org7eda087" class="outline-4">
<h4 id="org7eda087">Function Templet</h4>
<div class="outline-text-4" id="text-org7eda087">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span><span style="color: #2d9574;">&lt;iostream&gt;</span>
<span style="color: #6c3163;">#include</span><span style="color: #2d9574;">&lt;string&gt;</span>

<span style="color: #3a81c3; font-weight: bold;">template</span>&lt;<span style="color: #3a81c3; font-weight: bold;">typename</span> <span style="color: #ba2f59; font-weight: bold;">T</span>&gt;
<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">Print</span>(<span style="color: #ba2f59; font-weight: bold;">T</span> <span style="color: #715ab1;">value</span>)
  {cout&lt;&lt; value&lt;&lt; endl;}

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  Print(5);
  Print(<span style="color: #2d9574;">"Cherno"</span>);
  Print(5.0f);

  <span style="color: #4e3163;">std</span>::cin.get();
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org4523e1c" class="outline-4">
<h4 id="org4523e1c">Class Templet</h4>
<div class="outline-text-4" id="text-org4523e1c">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;iostream&gt;</span>
<span style="color: #6c3163;">#include</span><span style="color: #2d9574;">&lt;strings&gt;</span>

<span style="color: #3a81c3; font-weight: bold;">template</span>&lt;<span style="color: #3a81c3; font-weight: bold;">typename</span> <span style="color: #ba2f59; font-weight: bold;">T</span>, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">N</span>&gt;
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Array</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">T</span> <span style="color: #715ab1;">m_Arrany</span>[N];
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">GetSize</span>() <span style="color: #3a81c3; font-weight: bold;">const</span> { <span style="color: #3a81c3; font-weight: bold;">return</span> N}
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">Array</span>&lt;<span style="color: #ba2f59; font-weight: bold;">int</span>, 5&gt; <span style="color: #715ab1;">array</span>;
  cout&lt;&lt; array.Getsize()&lt;&lt; <span style="color: #4e3163;">std</span>::endl;
  cin.get();
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org90c996d" class="outline-4">
<h4 id="org90c996d">Std Temple library</h4>
</div>
</div>
<div id="outline-container-org95c3aeb" class="outline-3">
<h3 id="org95c3aeb">Preprocess</h3>
<div class="outline-text-3" id="text-org95c3aeb">
<p>
Function like macros
condition Compilation
'#' and ## operator
predefine macro
</p>
</div>
<div id="outline-container-org01ba6e2" class="outline-4">
<h4 id="org01ba6e2">include</h4>
</div>
<div id="outline-container-org3cc36e2" class="outline-4">
<h4 id="org3cc36e2">pragma</h4>
</div>
<div id="outline-container-orgfd3efe6" class="outline-4">
<h4 id="orgfd3efe6">ifndefin</h4>
</div>
<div id="outline-container-orga149880" class="outline-4">
<h4 id="orga149880">macro</h4>
<div class="outline-text-4" id="text-orga149880">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt; iostream&gt;</span>

<span style="color: #6c3163;">#define</span> <span style="color: #715ab1;">WAIT</span> <span style="color: #4e3163;">std</span>::cin.get()    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">macro</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Note : some time we need to see the output during debugging the code but should be removed when release the we use below version </span>

<span style="color: #6c3163;">#if</span> PR_DEBUG == 1                      
<span style="color: #6c3163;">#define</span> <span style="color: #6c3163; font-weight: bold;">LOG</span>(<span style="color: #715ab1;">x</span>) <span style="color: #4e3163;">std</span>::cout&lt;&lt; x&lt;&lt; endl
<span style="color: #6c3163;">#elif</span> define(PR_RELEASE)
<span style="color: #6c3163;">#define</span> <span style="color: #6c3163; font-weight: bold;">LOG</span>(<span style="color: #715ab1;">x</span>)
<span style="color: #6c3163;">#endif</span>

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  LOG(<span style="color: #2d9574;">"Hello"</span>);
  WAIT;  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">THIS IS Wrong way because if </span>
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org5080381" class="outline-3">
<h3 id="org5080381">Exception Handling</h3>
</div>
<div id="outline-container-org2d2279b" class="outline-3">
<h3 id="org2d2279b">multi-threading</h3>
<div class="outline-text-3" id="text-org2d2279b">
</div>
<div id="outline-container-org9544f26" class="outline-4">
<h4 id="org9544f26">Creating Threads</h4>
</div>
<div id="outline-container-org985d281" class="outline-4">
<h4 id="org985d281">Terminating Threads</h4>
</div>
<div id="outline-container-org71810b4" class="outline-4">
<h4 id="org71810b4">Passing Arguments to Threads</h4>
</div>
<div id="outline-container-org2cb8ba3" class="outline-4">
<h4 id="org2cb8ba3">Joining &amp; Detaching Threads</h4>
</div>
</div>
<div id="outline-container-org98edd76" class="outline-3">
<h3 id="org98edd76">Files and Streams:</h3>
<div class="outline-text-3" id="text-org98edd76">
<p>
To read and write a file C++ provides lib in standard C++ library called fstream, which provides 3 new data types.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">Data type</td>
<td class="org-left">Description</td>
</tr>

<tr>
<td class="org-left">ofstream</td>
<td class="org-left">data type : output file stream (create file or write info )</td>
</tr>

<tr>
<td class="org-left">ifstream</td>
<td class="org-left">data type : input file stream (read info from files )</td>
</tr>

<tr>
<td class="org-left">ifsteam</td>
<td class="org-left">data type :  both input and output file stream</td>
</tr>
</tbody>
</table>
</div>

<div id="outline-container-org48aace2" class="outline-4">
<h4 id="org48aace2">syanatx</h4>
<div class="outline-text-4" id="text-org48aace2">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">open</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">char</span> <span style="color: #2d9574;">"filename"</span>, <span style="color: #4e3163;">ios</span>::<span style="color: #ba2f59; font-weight: bold;">openmode</span> <span style="color: #715ab1;">mode</span>);
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">mode flag</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">ios::app</td>
<td class="org-left">append mode. All output of file to be appended in end</td>
</tr>

<tr>
<td class="org-left">ios::ate</td>
<td class="org-left">open file for output and move read/write control to end of file</td>
</tr>

<tr>
<td class="org-left">ios::in</td>
<td class="org-left">open a file for reading</td>
</tr>

<tr>
<td class="org-left">ios::out</td>
<td class="org-left">file for writing</td>
</tr>

<tr>
<td class="org-left">ios::trunc</td>
<td class="org-left">if file already existed, it contents will be truncated before opening file</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-org69af4ae" class="outline-4">
<h4 id="org69af4ae">Example</h4>
<div class="outline-text-4" id="text-org69af4ae">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">write and truncate </span>
ofstream outfile;
outfile.open(<span style="color: #2d9574;">"file.dat"</span>, <span style="color: #4e3163;">ios</span>::out | <span style="color: #4e3163;">ios</span>::trunc);

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">read and write</span>
<span style="color: #ba2f59; font-weight: bold;">fstream</span> <span style="color: #715ab1;">afile</span>;
afile.open(<span style="color: #2d9574;">"file.dat"</span>, <span style="color: #4e3163;">ios</span>::out | <span style="color: #4e3163;">ios</span>::in);
</pre>
</div>
</div>
</div>

<div id="outline-container-org1ae6483" class="outline-4">
<h4 id="org1ae6483">Closing a file</h4>
<div class="outline-text-4" id="text-org1ae6483">
<p>
In c++ when prg is terminates it automatically closes flushes all streams. But it is always good practice that a programmer should close all the opended files before programm termination
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">close</span>();
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org4330f5f" class="outline-3">
<h3 id="org4330f5f">Auto keyword</h3>
<div class="outline-text-3" id="text-org4330f5f">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;iostream&gt;</span>
<span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;string&gt;</span>
<span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;vector&gt;</span>
<span style="color: #ba2f59; font-weight: bold;">char</span>* <span style="color: #6c3163; font-weight: bold;">GetName</span>()
{
  <span style="color: #3a81c3; font-weight: bold;">return</span> <span style="color: #2d9574;">"Cherno"</span>;
}
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Device</span>{};


<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">DeviceManager</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">unordered_map</span>&lt;<span style="color: #ba2f59; font-weight: bold;">string</span>, <span style="color: #ba2f59; font-weight: bold;">vector</span>&lt;<span style="color: #ba2f59; font-weight: bold;">Device</span>*&gt; &gt; <span style="color: #715ab1;">m_Devices</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">unorderd_map</span>&lt;<span style="color: #ba2f59; font-weight: bold;">string</span>, <span style="color: #ba2f59; font-weight: bold;">vector</span>&lt;<span style="color: #ba2f59; font-weight: bold;">Device</span>*&gt; &gt;&amp; <span style="color: #6c3163; font-weight: bold;">GetDevices</span>() <span style="color: #3a81c3; font-weight: bold;">const</span>;
  { <span style="color: #3a81c3; font-weight: bold;">return</span> m_Devices}
}
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #4e3163;">std</span>:: <span style="color: #ba2f59; font-weight: bold;">vector</span> &lt;<span style="color: #4e3163;">std</span>::string&gt; <span style="color: #715ab1;">str</span>
  str.push_back(<span style="color: #2d9574;">"Apple"</span>);
  str.push_back(<span style="color: #2d9574;">"Orange"</span>);

  <span style="color: #3a81c3; font-weight: bold;">for</span> (<span style="color: #3a81c3; font-weight: bold;">auto</span> <span style="color: #715ab1;">it</span> = str.begin();it != str.end();it++)
    {
     cout&lt;&lt; *it &lt;&lt; endl;
    }

  <span style="color: #ba2f59; font-weight: bold;">DeviceManager</span> <span style="color: #715ab1;">dm</span>;
  <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #4e3163;">std</span>::<span style="color: #ba2f59; font-weight: bold;">unorderd_map</span>&lt; <span style="color: #4e3163;">std</span>::string, <span style="color: #4e3163;">std</span>::<span style="color: #ba2f59; font-weight: bold;">vector</span>&lt;<span style="color: #ba2f59; font-weight: bold;">Device</span>*&gt; &gt; <span style="color: #715ab1;">device</span> = dm.GetDevices()
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd363497" class="outline-3">
<h3 id="orgd363497">std::array</h3>
<div class="outline-text-3" id="text-orgd363497">
<p>
simillar to secodory array but has advangaes
debug setting for auto size set, bounce checks, sort,&#x2026;etc
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;iostream&gt;</span>
<span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;array&gt;</span>

<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">PrintArray</span>(<span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #715ab1;">array</span>)
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">array</span>&lt;<span style="color: #ba2f59; font-weight: bold;">int</span>,5&gt; <span style="color: #715ab1;">data</span>;
  data[0]=2;
  data[4]=1;
  data[5]=2;    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">bounce checks</span>

  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">data</span>[5];
  data[0]= 0;
  data[5]= 0;

  <span style="color: #4e3163;">std</span>::cin.get();

}
</pre>
</div>
</div>
</div>

<div id="outline-container-org589d830" class="outline-3">
<h3 id="org589d830">Dynamic memory allocation</h3>
<div class="outline-text-3" id="text-org589d830">
</div>
<div id="outline-container-org97bef87" class="outline-4">
<h4 id="org97bef87">new and delete</h4>
<div class="outline-text-4" id="text-org97bef87">
<p>
new will call malloc and  stores  size , 
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">s1</span>;
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span> =2;
  <span style="color: #ba2f59; font-weight: bold;">int</span> *<span style="color: #715ab1;">b</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>[50];
  <span style="color: #ba2f59; font-weight: bold;">Entity</span> *<span style="color: #715ab1;">e</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>;


  <span style="color: #3a81c3; font-weight: bold;">delete</span> e;
  <span style="color: #3a81c3; font-weight: bold;">delete</span> [] b;
  cin.get();
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org15ac702" class="outline-4">
<h4 id="org15ac702">Example: [heap using (new but not del) or (auto delete ) heap having scope ]</h4>
<div class="outline-text-4" id="text-org15ac702">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entilty</span>
{

};

<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">ScopedPtr</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">Entity</span>* <span style="color: #715ab1;">m_Ptr</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #6c3163; font-weight: bold;">ScopedPrt</span>(<span style="color: #ba2f59; font-weight: bold;">Entity</span>* <span style="color: #715ab1;">ptr</span>)
    :m_Ptr(ptr){}
  ~<span style="color: #6c3163; font-weight: bold;">ScopedPrt</span>()
  { <span style="color: #3a81c3; font-weight: bold;">delete</span> m_Ptr; }
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span> ()
{
  {
    <span style="color: #ba2f59; font-weight: bold;">ScopePtr</span> <span style="color: #715ab1;">e</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>();
  }

}
</pre>
</div>
</div>
</div>
<div id="outline-container-orga7fc27b" class="outline-4">
<h4 id="orga7fc27b">Stack vs heap</h4>
<div class="outline-text-4" id="text-orga7fc27b">
<p>
stack is 2 megabite
heap is large 
both stack and heap are stored in ram
</p>
</div>
<ul class="org-ul">
<li><a id="org09ee95f"></a>How it allocate memory in stack vs heap ?<br />
<div class="outline-text-5" id="text-org09ee95f">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">value</span> = 5;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">array</span>[5];
  <span style="color: #3a81c3; font-weight: bold;">for</span> (<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span>=0 ; i&lt;5;i++)
    {array[i] = i;}

  <span style="color: #ba2f59; font-weight: bold;">Vector3</span> <span style="color: #715ab1;">vector</span>;

  <span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #715ab1;">hvalue</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>;
  *hvalue= 5;

  <span style="color: #ba2f59; font-weight: bold;">int</span>* <span style="color: #715ab1;">harray</span> = newint[5];
  <span style="color: #3a81c3; font-weight: bold;">for</span> (<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span>=0 ; i&lt;5;i++)
    {harray[i] = i;}

  <span style="color: #ba2f59; font-weight: bold;">Vector3</span>* <span style="color: #715ab1;">hvector</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Vector3</span>();

  <span style="color: #3a81c3; font-weight: bold;">delete</span> hvalue;
  <span style="color: #3a81c3; font-weight: bold;">delete</span>[] harray;
  <span style="color: #3a81c3; font-weight: bold;">delete</span> hvector;
  cin.get();

}
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org255752e" class="outline-4">
<h4 id="org255752e">heap</h4>
</div>
<div id="outline-container-org837e204" class="outline-4">
<h4 id="org837e204">Smart Pointer</h4>
<div class="outline-text-4" id="text-org837e204">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #6c3163;">#include</span> <span style="color: #2d9574;">&lt;memory&gt;</span>

<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{

};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">shared_ptr</span>&lt;<span style="color: #ba2f59; font-weight: bold;">Entity</span>&gt; <span style="color: #715ab1;">sh_Enty</span> = make_shared&lt;<span style="color: #ba2f59; font-weight: bold;">Entity</span>&gt;();
  <span style="color: #ba2f59; font-weight: bold;">shared_ptr</span>&lt;<span style="color: #ba2f59; font-weight: bold;">Entity</span>&gt; <span style="color: #715ab1;">sh_Enty1</span> = make_shared&lt;<span style="color: #ba2f59; font-weight: bold;">Entity</span>&gt;();

  <span style="color: #ba2f59; font-weight: bold;">unique_ptr</span>&lt;<span style="color: #ba2f59; font-weight: bold;">Entity</span>&gt; <span style="color: #715ab1;">sh_Enty</span> = make_shared&lt;<span style="color: #ba2f59; font-weight: bold;">Entity</span>&gt;();
  <span style="color: #ba2f59; font-weight: bold;">weak_ptr</span>&lt;<span style="color: #ba2f59; font-weight: bold;">Entity</span>&gt; <span style="color: #715ab1;">sh_Enty</span> = make_shared&lt;<span style="color: #ba2f59; font-weight: bold;">Entity</span>&gt;();
  }
}
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-org8db0196" class="outline-2">
<h2 id="org8db0196">Class and objects</h2>
<div class="outline-text-2" id="text-org8db0196">
</div>
<div id="outline-container-org4684982" class="outline-3">
<h3 id="org4684982">Syntax</h3>
<div class="outline-text-3" id="text-org4684982">
<p>
calss is blueprint of a obj,  has some properties(attributes) and behavior(functions) 
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">ClassName</span> {
<span style="color: #3a81c3; font-weight: bold;">private</span>:                  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">by default </span>
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>,<span style="color: #715ab1;">y</span>;
<span style="color: #3a81c3; font-weight: bold;">protected</span>:
  <span style="color: #ba2f59; font-weight: bold;">char</span> <span style="color: #715ab1;">name</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">getX</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>){x = a;}
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">getY</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span>){y =b;}
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">ClassName</span> <span style="color: #715ab1;">ObjectName</span> ;
  ObjectName.getX(10); 
}
</pre>
</div>

<p>
default acess specifier : private 
private is used for store attribues or variables
</p>
</div>
</div>
<div id="outline-container-org157b069" class="outline-3">
<h3 id="org157b069">Defining member function outside class by scope resolution(::)</h3>
<div class="outline-text-3" id="text-org157b069">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">ClassName</span> {
<span style="color: #3a81c3; font-weight: bold;">private</span>:                  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">by default </span>
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>,<span style="color: #715ab1;">y</span>;
<span style="color: #3a81c3; font-weight: bold;">protected</span>:
  <span style="color: #ba2f59; font-weight: bold;">char</span> <span style="color: #715ab1;">name</span>;
};
<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #4e3163;">ClassName</span>::<span style="color: #6c3163; font-weight: bold;">getX</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>) {x = a;}
<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #4e3163;">ClassName</span>::<span style="color: #6c3163; font-weight: bold;">getY</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span>) {y =b;}

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">ClassName</span> <span style="color: #715ab1;">ObjectName</span> ;
  ObjectName.getX(10); 
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgec7781b" class="outline-3">
<h3 id="orgec7781b">this</h3>
<div class="outline-text-3" id="text-orgec7781b">
<p>
only in member function
</p>
</div>
<div id="outline-container-orgd452c43" class="outline-4">
<h4 id="orgd452c43">Example</h4>
<div class="outline-text-4" id="text-orgd452c43">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">PrintEntity</span>( <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>&amp; <span style="color: #715ab1;">e</span>);
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>,<span style="color: #715ab1;">y</span>;
  <span style="color: #6c3163; font-weight: bold;">Entity</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">y</span>)
  {
    <span style="color: #ba2f59; font-weight: bold;">Entity</span>*  <span style="color: #715ab1;">e</span> = <span style="color: #3a81c3; font-weight: bold;">this</span>;    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span>
    <span style="color: #3a81c3; font-weight: bold;">this</span>-&gt;x= x;
    <span style="color: #3a81c3; font-weight: bold;">this</span>-&gt;y = y;
    PrintEntity(<span style="color: #3a81c3; font-weight: bold;">this</span>);
  }

  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">GetX</span>() <span style="color: #3a81c3; font-weight: bold;">const</span>
  {
    <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>&amp; <span style="color: #715ab1;">e</span> = *<span style="color: #3a81c3; font-weight: bold;">this</span>;
  }

};

<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">PrintEntity</span>( <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>&amp; <span style="color: #715ab1;">e</span>)
{
  <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>&amp; <span style="color: #715ab1;">e</span> = *<span style="color: #3a81c3; font-weight: bold;">this</span>;
}


</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org7036040" class="outline-3">
<h3 id="org7036040">Constructor</h3>
<div class="outline-text-3" id="text-org7036040">
<p>
To iniciallize the when obj is created
</p>

<p>
Three type of Constructor
</p>
<ol class="org-ol">
<li>Default</li>
<li>Patameterize</li>
<li>Copy Constructor</li>
<li>Dynamic by using heap</li>
</ol>
</div>

<div id="outline-container-org2390f6d" class="outline-4">
<h4 id="org2390f6d">Intro</h4>
<div class="outline-text-4" id="text-org2390f6d">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">ClassName</span> {
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #6c3163; font-weight: bold;">ClassName</span>(){a = 0}                               <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Constructor name is Class Name</span>
                                                   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Auto matically call when we create a obj of class</span>
                                                   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">No return type</span>
                                                   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if Not defined compiler will create it self</span>
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgbc011a4" class="outline-4">
<h4 id="orgbc011a4">(Default,Parameter, Copy) Constructor</h4>
<div class="outline-text-4" id="text-orgbc011a4">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Point</span> {
  <span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #715ab1;">x</span>, <span style="color: #715ab1;">y</span> ;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #6c3163; font-weight: bold;">Point</span> () { x= 0, y = 0;}                     <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">default constructors</span>
  <span style="color: #6c3163; font-weight: bold;">Point</span> (<span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #715ab1;">X</span>, <span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #715ab1;">Y</span>) {x= X; y = Y;}    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">parameter constructor  </span>
  <span style="color: #6c3163; font-weight: bold;">Point</span> (<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Point</span>&amp; <span style="color: #715ab1;">rhs</span>) {x = rhs.x; y = rhs.y;}  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">copy constructor</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">we are using constant so that we should n't accidenly change what we have to copy</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">we are copy one poperty to another property,</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">when you create a obj and want to assing it property</span>

  <span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #6c3163; font-weight: bold;">getx</span>(X) {<span style="color: #3a81c3; font-weight: bold;">return</span> x;}
  <span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #6c3163; font-weight: bold;">gety</span>(Y) {<span style="color: #3a81c3; font-weight: bold;">return</span> y;}
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>() {
   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">when obj created then constructor is called</span>
  <span style="color: #ba2f59; font-weight: bold;">Point</span> <span style="color: #715ab1;">p1</span>;             <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">default cons is call</span>
  <span style="color: #ba2f59; font-weight: bold;">Point</span> <span style="color: #715ab1;">p2</span>(1.2, 3.4);   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">para cons</span>
  <span style="color: #ba2f59; font-weight: bold;">Point</span> <span style="color: #715ab1;">p3</span>= p1;         <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">copy one obj to other type</span>


}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd426755" class="outline-4">
<h4 id="orgd426755">Construction DEPTH</h4>
<div class="outline-text-4" id="text-orgd426755">
<p>
Construction doesn't run if don't create a obj 
eg : static method
</p>
</div>
<ul class="org-ul">
<li><a id="org9039565"></a>Class which doesn't allow creating obj<br />
<div class="outline-text-5" id="text-org9039565">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Log</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span> :
  <span style="color: #6c3163; font-weight: bold;">Log</span>(){}; <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">hidding constructor to stop creating obj</span>
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">OR insted of making cons private we can delete</span>
  <span style="color: #6c3163; font-weight: bold;">Log</span>()= <span style="color: #3a81c3; font-weight: bold;">delete</span>;
  <span style="color: #3a81c3; font-weight: bold;">static</span> <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">Write</span>()
  {
    <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">sfadffa</span>
  }
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #4e3163;">Log</span>::Write();
  <span style="color: #ba2f59; font-weight: bold;">Log</span> <span style="color: #715ab1;">wr</span> ;<span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">ERROR</span>
}
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org86f31ff" class="outline-4">
<h4 id="org86f31ff">Initializer List</h4>
<div class="outline-text-4" id="text-org86f31ff">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Base</span> {
  <span style="color: #ba2f59; font-weight: bold;">int</span>  <span style="color: #715ab1;">x</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span>  <span style="color: #715ab1;">y</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:

   <span style="color: #2aa1ae; background-color: #ecf3ec;">//</span><span style="color: #2aa1ae; background-color: #ecf3ec;">NOTE : this is not iniciallizeing but assignment</span>
  <span style="color: #6c3163; font-weight: bold;">Base</span> (<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span>) {x = a; y=b; }

  <span style="color: #6c3163; font-weight: bold;">Base</span> (<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span>):x{a},y{b}               <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">This is inicallization</span>
  <span style="color: #6c3163; font-weight: bold;">Base</span>( <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span>)
    :x{a},y{b}                              <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Different formate                        </span>

}
</pre>
</div>

<p>
There are two ways to do 
Using {} : uniform initialization and should be prefered 
Using () : round of it convert formal argument data type to data type of actual argument and then assing
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Base</span>{
  <span style="color: #ba2f59; font-weight: bold;">char</span> <span style="color: #715ab1;">x</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span> :
  <span style="color: #6c3163; font-weight: bold;">Base</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>):<span style="color: #6c3163; font-weight: bold;">x</span>(a) {}
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">print</span>() { cout &lt;&lt; (<span style="color: #ba2f59; font-weight: bold;">int</span>)x &lt;&lt; endl;}
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Base</span> <span style="color: #715ab1;">b</span>(300);
  b.print();            <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">prints: 44</span>
}

</pre>
</div>
</div>
</div>

<div id="outline-container-org8a5bb47" class="outline-4">
<h4 id="org8a5bb47">member initializer</h4>
<div class="outline-text-4" id="text-org8a5bb47">
<p>
Should be in order :
      the members should be inicialized in order it are defined in classe or some complier give error
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">m_Name</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">score</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #6c3163; font-weight: bold;">Entity</span>() :m_Name(<span style="color: #2d9574;">"Unknown"</span>),score(0)            <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">member inicializer</span>
  {    
  }
  <span style="color: #6c3163; font-weight: bold;">Entity</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">stirng</span>&amp; <span style="color: #715ab1;">name</span>)
    :m_Name(name)
  {}
  <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">string</span>&amp; <span style="color: #6c3163; font-weight: bold;">GetName</span>() <span style="color: #3a81c3; font-weight: bold;">const</span> {<span style="color: #3a81c3; font-weight: bold;">return</span> m_Name;}
};
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">Enity</span> <span style="color: #715ab1;">e0</span>;
  cout&lt;&lt;e0.GetName()&lt;&lt;endl;

  <span style="color: #ba2f59; font-weight: bold;">Entity</span> <span style="color: #715ab1;">e1</span>(<span style="color: #2d9574;">"Cherno"</span>);
  cout&lt;&lt;e0.GetName()&lt;&lt;endl;
  cin.get();
}
</pre>
</div>
</div>
<ul class="org-ul">
<li><a id="orgd517527"></a>Why?<br />
<div class="outline-text-5" id="text-orgd517527">
<ul class="org-ul">
<li>code style is easy to write and read</li>
<li>Function Defernece</li>
</ul>

<p>
Without using member inicializer 
</p>
<div class="org-src-container">
<pre class="src src-cpp">   <span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Example</span>
   {
   <span style="color: #3a81c3; font-weight: bold;">public</span>:
     <span style="color: #6c3163; font-weight: bold;">Example</span>()
     { cout&lt;&lt; <span style="color: #2d9574;">"Create Entity! "</span>&lt;&lt; endl;}
     <span style="color: #6c3163; font-weight: bold;">Example</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>)
     {cout&lt;&lt; <span style="color: #2d9574;">"Create Entity  with "</span>&lt;&lt;x&lt;&lt;<span style="color: #2d9574;">"!"</span>&lt;&lt;endl;}
   }
   <span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
   {
   <span style="color: #3a81c3; font-weight: bold;">private</span>:
     <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">m_Name</span>;
     <span style="color: #ba2f59; font-weight: bold;">Example</span> <span style="color: #715ab1;">m_Example</span>;     <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">it create a object</span>
   <span style="color: #3a81c3; font-weight: bold;">public</span>:
     <span style="color: #6c3163; font-weight: bold;">Entity</span>()          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">NO-member inicializer</span>
     {
       m_Name =  string(<span style="color: #2d9574;">"Unknow"</span>);
       m_Example = Example(8); <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">over writen the </span>
     }
     <span style="color: #6c3163; font-weight: bold;">Entity</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">stirng</span>&amp; <span style="color: #715ab1;">name</span>)
       :m_Name(name)
     {}

   };
   <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
   {
     <span style="color: #ba2f59; font-weight: bold;">Enity</span> <span style="color: #715ab1;">e0</span>;
     cin.get();
   }

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">// Result is </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Create Entity !</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Create Entitywith 8 !</span>
</pre>
</div>
<p>
We can see if there is no member inicilizer the we are createing two object of enitiy
</p>

<p>
By using member iniclizer 
</p>
<div class="org-src-container">
<pre class="src src-cpp">   <span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Example</span>
   {
   <span style="color: #3a81c3; font-weight: bold;">public</span>:
     <span style="color: #6c3163; font-weight: bold;">Example</span>()
     { cout&lt;&lt; <span style="color: #2d9574;">"Create Entity! "</span>&lt;&lt; endl;}
     <span style="color: #6c3163; font-weight: bold;">Example</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>)
     {cout&lt;&lt; <span style="color: #2d9574;">"Create Entity  with "</span>&lt;&lt;x&lt;&lt;<span style="color: #2d9574;">"!"</span>&lt;&lt;endl;}
   }
   <span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>
   {
   <span style="color: #3a81c3; font-weight: bold;">private</span>:
     <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">m_Name</span>;
     <span style="color: #ba2f59; font-weight: bold;">Example</span> <span style="color: #715ab1;">m_Example</span>;     <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">it create a object c++ will not do it for primitive data types</span>
   <span style="color: #3a81c3; font-weight: bold;">public</span>:
     <span style="color: #6c3163; font-weight: bold;">Entity</span>()          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">NO-member inicializer</span>
       : m_Example(8)
     {
       m_Name =  string(<span style="color: #2d9574;">"Unknow"</span>);

     }
     <span style="color: #6c3163; font-weight: bold;">Entity</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">stirng</span>&amp; <span style="color: #715ab1;">name</span>)
       :m_Name(name)
     {}

   };
   <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
   {
     <span style="color: #ba2f59; font-weight: bold;">Enity</span> <span style="color: #715ab1;">e0</span>;
     cin.get();
   }

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">// Result is </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Create Entity !</span>

</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org839f9db" class="outline-4">
<h4 id="org839f9db">Copying and Copy Constructor</h4>
</div>
</div>
<div id="outline-container-orgc7d323e" class="outline-3">
<h3 id="orgc7d323e">Destructor</h3>
<div class="outline-text-3" id="text-orgc7d323e">
</div>
<div id="outline-container-orgb9e563c" class="outline-4">
<h4 id="orgb9e563c">Syntax</h4>
<div class="outline-text-4" id="text-orgb9e563c">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Base</span>{
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>;
  <span style="color: #6c3163; font-weight: bold;">Base</span> () {cout &lt;&lt; <span style="color: #2d9574;">"Default constructor "</span> &lt;&lt; endl;}
  <span style="color: #6c3163; font-weight: bold;">Base</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>):x{a}{cout &lt;&lt; <span style="color: #2d9574;">"Parameter Construtor "</span>&lt;&lt; endl;}
  ~<span style="color: #6c3163; font-weight: bold;">Base</span>(){ cout &lt;&lt; <span style="color: #2d9574;">"Destructor"</span>&lt;&lt; endl;}                         <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">start with ~</span>
                                                                 <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">used to destroy memory of obj </span>
                                                                  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">get call automatically by complier simillar to constructor</span>
                                                                 <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">we use manually or explicity for dyanmic memory allocation(new, pointer)</span>
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Base</span> <span style="color: #715ab1;">b</span> (19);
  b.~Base();

  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgd9f040f" class="outline-4">
<h4 id="orgd9f040f">Exampel mem as a pointer</h4>
<div class="outline-text-4" id="text-orgd9f040f">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Base</span>{
  <span style="color: #ba2f59; font-weight: bold;">int</span> *<span style="color: #715ab1;">x</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span> *<span style="color: #715ab1;">y</span>;
  <span style="color: #6c3163; font-weight: bold;">Base</span> ():x{<span style="color: #4e3163;">nullptr</span>} {cout &lt;&lt; <span style="color: #2d9574;">"Default constructor "</span> &lt;&lt; endl;}
  <span style="color: #6c3163; font-weight: bold;">Base</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span>):x{a}{cout &lt;&lt; <span style="color: #2d9574;">"Parameter Construtor "</span>&lt;&lt; endl;}
  ~<span style="color: #6c3163; font-weight: bold;">Base</span>(){   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">generally used to dele dynamic memory otherwise complier will delete it</span>
    <span style="color: #3a81c3; font-weight: bold;">delete</span> x;
    <span style="color: #3a81c3; font-weight: bold;">delete</span> y;
    cout &lt;&lt; <span style="color: #2d9574;">"Destructor"</span>&lt;&lt; endl;}
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Base</span> <span style="color: #715ab1;">b</span>(<span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">int</span>(10));    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">new is used for allocating dynamic memory</span>

  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgde20f80" class="outline-3">
<h3 id="orgde20f80">Class as Pointer</h3>
<div class="outline-text-3" id="text-orgde20f80">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Base</span>{
  <span style="color: #ba2f59; font-weight: bold;">char</span> <span style="color: #715ab1;">x</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span> :
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">y</span>;
  <span style="color: #6c3163; font-weight: bold;">Base</span>(<span style="color: #ba2f59; font-weight: bold;">char</span> <span style="color: #715ab1;">a</span>):x{a}{}
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">print</span>(){cout &lt;&lt; x &lt;&lt; endl;}
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Base</span> <span style="color: #715ab1;">b1</span>(<span style="color: #2d9574;">"A"</span>);
  b1.y = 100;
  b1.print();
  cout&lt;&lt;b.y&lt;&lt;endl;
  <span style="color: #ba2f59; font-weight: bold;">Base</span>* <span style="color: #715ab1;">e</span> = &amp;b1;
  e -&gt;print();
  cout&lt;&lt;e-&gt;y&lt;&lt;endl;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org6294595" class="outline-3">
<h3 id="org6294595">Visibility</h3>
<div class="outline-text-3" id="text-org6294595">
<p>
In c++ has visibility of class are of three types: private, protected, public, friend (function and class)
</p>

<p>
C++ restricts acess of class mem (var and funct) based on acess sepecifer
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">acess\Class</th>
<th scope="col" class="org-left">base Class Public</th>
<th scope="col" class="org-left">base Class Protected</th>
<th scope="col" class="org-left">base Class Private</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">ouside side</td>
<td class="org-left">can acess public mem</td>
<td class="org-left">can't acess procted mem</td>
<td class="org-left">can't  acess privat mem</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">baseclass pubic function</td>
<td class="org-left">can acess public mem</td>
<td class="org-left">can acess proteced mem</td>
<td class="org-left">can acess private mem</td>
</tr>

<tr>
<td class="org-left">baseclass procted function</td>
<td class="org-left">can acess public mem</td>
<td class="org-left">can acess proteced mem</td>
<td class="org-left">can acess private mem</td>
</tr>

<tr>
<td class="org-left">baseclass private function</td>
<td class="org-left">can acess public mem</td>
<td class="org-left">can acess proteced mem</td>
<td class="org-left">can acess private mem</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">friends function/class</td>
<td class="org-left">can acess public mem</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">can acess private mem</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">derived class</td>
<td class="org-left">can acess public mem</td>
<td class="org-left">can acess protected mem</td>
<td class="org-left">can't acess private mem</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<p>
Public    :    can acess  by everybody        :  either u are ouside, inside class or  derived class
Protected :    can't acess outide class 
Private   :    can acess only inside class and friend    
</p>
</div>
</div>

<div id="outline-container-orgaad66b9" class="outline-3">
<h3 id="orgaad66b9">Function overload</h3>
<div class="outline-text-3" id="text-orgaad66b9">
</div>
<div id="outline-container-org4f2f36c" class="outline-4">
<h4 id="org4f2f36c">Introduction</h4>
<div class="outline-text-4" id="text-org4f2f36c">
<p>
Function overloading You can have multiple definitions for the same function name in the same scope. The definition of the function must differ from each other by the types and/or the number of arguments in the argument list. You can not overload function declarations that differ only by return type.
</p>

<p>
Following is the example where same function print() is being used to print different data types:
</p>
</div>
</div>

<div id="outline-container-org6c56596" class="outline-4">
<h4 id="org6c56596">Example</h4>
<div class="outline-text-4" id="text-org6c56596">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">printData</span> {
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">print</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span>)     { cout &lt;&lt; <span style="color: #2d9574;">"Printing int: "</span> &lt;&lt; i &lt;&lt; endl; }                 <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Function overload</span>
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">print</span>(<span style="color: #ba2f59; font-weight: bold;">double</span>  <span style="color: #715ab1;">f</span>) { cout &lt;&lt; <span style="color: #2d9574;">"Printing float: "</span> &lt;&lt; f &lt;&lt; endl; }               <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Function overload</span>
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">print</span>(<span style="color: #ba2f59; font-weight: bold;">char</span>* <span style="color: #715ab1;">c</span>)   { cout &lt;&lt; <span style="color: #2d9574;">"Printing character: "</span> &lt;&lt; c &lt;&lt; endl; }           <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Function overload</span>
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(<span style="color: #ba2f59; font-weight: bold;">void</span>) {
  <span style="color: #ba2f59; font-weight: bold;">printData</span> <span style="color: #715ab1;">pd</span>;
  pd.print(5);              <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Call print to print integer</span>
  pd.print(500.263);        <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Call print to print float</span>
  pd.print(<span style="color: #2d9574;">"Hello C++"</span>);    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Call print to print character</span>
  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org6358ecf" class="outline-4">
<h4 id="org6358ecf">How it work</h4>
<div class="outline-text-4" id="text-org6358ecf">
<p>
when you comiple a prg and in function is called the function address is used to call a function know as (name mangling)  
</p>

<p>
compiler wil change name and stores it address of change name thus it wil overload function are not depend
</p>

<p>
so if prg call function(defined more than 1 function ) comiler know which function to call 
</p>
</div>
</div>

<div id="outline-container-org946f482" class="outline-4">
<h4 id="org946f482">Rules where function overload doesn't work</h4>
<div class="outline-text-4" id="text-org946f482">
<ol class="org-ol">
<li>differ only in return type</li>
</ol>
<p>
void add(int x, int y)
int  add (int x, int y)
</p>
<ol class="org-ol">
<li>In Class: 
simillar function name and parameters  but one is static function another is non-static</li>
</ol>

<p>
static void add(int x, int y)
add (int x, int y)
</p>

<ol class="org-ol">
<li>same data type (int, double..) or (array, str) but one is var other is pointer or ref</li>
</ol>
<p>
int add (int a)
int add (int *a)
</p>

<ol class="org-ol">
<li>constant and volatile</li>
</ol>
<p>
int add(int arr)
void add ( volatile int x)
</p>

<ol class="org-ol">
<li>default parameter</li>
</ol>
<p>
void add (int x)
void add (int x =0)
</p>
</div>
</div>
<div id="outline-container-org63bd1fc" class="outline-4">
<h4 id="org63bd1fc">Function Hiding using scope</h4>
<div class="outline-text-4" id="text-org63bd1fc">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Base</span> {
<span style="color: #3a81c3; font-weight: bold;">public</span> :
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">fun</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">i</span>) { count &lt;&lt; <span style="color: #2d9574;">" Base "</span>&lt;&lt;endl; }
};

<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Derived</span> : <span style="color: #3a81c3; font-weight: bold;">public</span> <span style="color: #ba2f59; font-weight: bold;">Base</span>{
<span style="color: #3a81c3; font-weight: bold;">public</span> :
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">using Base :: fun;       // all 'fun' name in base should share same scope in Derived class</span>
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">fun</span>(<span style="color: #ba2f59; font-weight: bold;">char</span> <span style="color: #715ab1;">c</span>) { count &lt;&lt; <span style="color: #2d9574;">"Derived"</span>&lt;&lt; endl; }

};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>() {

  <span style="color: #ba2f59; font-weight: bold;">Derived</span> <span style="color: #715ab1;">d</span>;
  d.fun(1);                          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Result : Derived</span>
  d.fun(<span style="color: #2d9574;">'a'</span>);                        <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Result : Derived</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">insted of fun(int i) it call fun(char c) but it call derived function</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">This is hidding but we can use base class fuction by using scope</span>

  d.<span style="color: #4e3163;">Base</span>:: fun(2)

}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgdcc46c7" class="outline-3">
<h3 id="orgdcc46c7">Operator Overloading</h3>
<div class="outline-text-3" id="text-orgdcc46c7">
<p>
Overloading operator : User-define or re-define built-in operator of c++
</p>
</div>

<div id="outline-container-org3e37840" class="outline-4">
<h4 id="org3e37840">Syntax for class members</h4>
<div class="outline-text-4" id="text-org3e37840">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">ClassName</span> <span style="color: #3a81c3; font-weight: bold;">operator</span><span style="color: #6c3163; font-weight: bold;">+</span> (<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">ClassName</span>&amp; <span style="color: #715ab1;">obj</span>){
  obj.var = <span style="color: #3a81c3; font-weight: bold;">this</span>-&gt;lenght + obj.lenght;
  ...........
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgc5f5d16" class="outline-4">
<h4 id="orgc5f5d16">Syntax for non-members functions</h4>
<div class="outline-text-4" id="text-orgc5f5d16">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">ClassName</span> <span style="color: #3a81c3; font-weight: bold;">operator</span><span style="color: #6c3163; font-weight: bold;">+</span> (<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">ClassName</span>&amp;, <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">ClassName</span>&amp;){

  ............
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org0302d38" class="outline-4">
<h4 id="org0302d38">Example</h4>
<div class="outline-text-4" id="text-org0302d38">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Box</span>{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #715ab1;">lenght</span>, <span style="color: #715ab1;">breadth</span>, <span style="color: #715ab1;">height</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #6c3163; font-weight: bold;">getVolume</span>(<span style="color: #ba2f59; font-weight: bold;">void</span>) {<span style="color: #3a81c3; font-weight: bold;">return</span> (<span style="color: #ba2f59; font-weight: bold;">lenght</span>*<span style="color: #715ab1;">breath</span>* height);}
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">getlenght</span>(<span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #715ab1;">len</span>) {lenght= len;}
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">getbreath</span>(<span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #715ab1;">bre</span>) {breadth= bre;}
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">setheight</span>(<span style="color: #ba2f59; font-weight: bold;">double</span> <span style="color: #715ab1;">hei</span>) {height= hei;}

  <span style="color: #ba2f59; font-weight: bold;">Box</span> <span style="color: #3a81c3; font-weight: bold;">operator</span><span style="color: #6c3163; font-weight: bold;">+</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Box</span>&amp; <span style="color: #715ab1;">obj2</span>)                 <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">operator overloading</span>
  {
   <span style="color: #ba2f59; font-weight: bold;">Box</span> <span style="color: #715ab1;">obj1</span>;
   obj1.lenght = <span style="color: #3a81c3; font-weight: bold;">this</span>-&gt;lenght + obj2.lenght;
   obj1.breadth = <span style="color: #3a81c3; font-weight: bold;">this</span>-&gt;breadth + obj2.breadth;
   obj1.height = <span style="color: #3a81c3; font-weight: bold;">this</span>-&gt;height + obj2.height;
   <span style="color: #3a81c3; font-weight: bold;">return</span> obj1;
   }
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Box</span> <span style="color: #715ab1;">box1</span>, <span style="color: #715ab1;">box2</span>, <span style="color: #715ab1;">box3</span>;            <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">declare box1, box2, box3</span>
  box1.setLength(6.0);
  box1.setBreadth(7.0);
  box1.setHeight(5.0);

  box2.setLength(12.0);
  box2.setBreadth(13.0);
  box2.setHeight(10.0);

  box3 = box1 + box2;
  volume = box3.getVolume();
  cout&lt;&lt; <span style="color: #2d9574;">"Volume of box3 :"</span>&lt;&lt; volume &lt;&lt; endl;
  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}  
</pre>
</div>
</div>
</div>

<div id="outline-container-org67f327a" class="outline-4">
<h4 id="org67f327a">Example without operator overloading</h4>
<div class="outline-text-4" id="text-org67f327a">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">struct</span> <span style="color: #ba2f59; font-weight: bold;">Vec2</span>
{
  <span style="color: #ba2f59; font-weight: bold;">float</span> <span style="color: #715ab1;">x</span>,<span style="color: #715ab1;">y</span>;

  <span style="color: #6c3163; font-weight: bold;">Vec2</span>(<span style="color: #ba2f59; font-weight: bold;">float</span> <span style="color: #715ab1;">x</span>, <span style="color: #ba2f59; font-weight: bold;">float</span> <span style="color: #715ab1;">y</span>):x(x),y(y){};

  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #6c3163; font-weight: bold;">Add</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Vec2</span> &amp;<span style="color: #715ab1;">other</span>) <span style="color: #3a81c3; font-weight: bold;">const</span>
  { <span style="color: #3a81c3; font-weight: bold;">return</span>  Vec2(x+ other.x , y + other.y); }

  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #6c3163; font-weight: bold;">mul</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Vec2</span> &amp;<span style="color: #715ab1;">other</span>) <span style="color: #3a81c3; font-weight: bold;">const</span>
  { <span style="color: #3a81c3; font-weight: bold;">return</span> Vec2 (<span style="color: #ba2f59; font-weight: bold;">x</span> * <span style="color: #715ab1;">other</span>.x, y+ other.y);}
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #715ab1;">p1</span>(4.0f, 4.0f);
  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #715ab1;">speed</span>(0.5f, 1.5f);
  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #715ab1;">powerup</span>(1.1f, 1.2f);

  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #715ab1;">result</span> = p1.add(speed.mul(powerup)); <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">which means p1 + speed * powerup</span>
}

</pre>
</div>
</div>
</div>
<div id="outline-container-orgc66da8d" class="outline-4">
<h4 id="orgc66da8d">Example with operator overloading</h4>
<div class="outline-text-4" id="text-orgc66da8d">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">struct</span> <span style="color: #ba2f59; font-weight: bold;">Vec2</span>
{
  <span style="color: #ba2f59; font-weight: bold;">float</span> <span style="color: #715ab1;">x</span>,<span style="color: #715ab1;">y</span>;

  <span style="color: #6c3163; font-weight: bold;">Vec2</span>(<span style="color: #ba2f59; font-weight: bold;">float</span> <span style="color: #715ab1;">x</span>, <span style="color: #ba2f59; font-weight: bold;">float</span> <span style="color: #715ab1;">y</span>):x(x),y(y){}

  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #3a81c3; font-weight: bold;">operator</span><span style="color: #6c3163; font-weight: bold;">+</span> (<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Vect</span> &amp;<span style="color: #715ab1;">other</span>) <span style="color: #3a81c3; font-weight: bold;">const</span>
  { <span style="color: #3a81c3; font-weight: bold;">return</span> Vec2(x + other.x , y + other.y); }

  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #3a81c3; font-weight: bold;">operator</span><span style="color: #6c3163; font-weight: bold;">*</span>(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Vec2</span> &amp;<span style="color: #715ab1;">other</span>) <span style="color: #3a81c3; font-weight: bold;">const</span>
  { <span style="color: #3a81c3; font-weight: bold;">return</span> Vec2 (<span style="color: #ba2f59; font-weight: bold;">x</span> * <span style="color: #715ab1;">other</span>.x, <span style="color: #ba2f59; font-weight: bold;">y</span>* <span style="color: #715ab1;">other</span>.y);}

};

<span style="color: #ba2f59; font-weight: bold;">ostream</span>&amp; <span style="color: #3a81c3; font-weight: bold;">operator</span><span style="color: #6c3163; font-weight: bold;">&lt;&lt;</span>(<span style="color: #ba2f59; font-weight: bold;">osteam</span>&amp; <span style="color: #715ab1;">stream1</span>, <span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">Vec2</span>&amp; <span style="color: #715ab1;">other</span>)
{
  stream1 &lt;&lt;other.x&lt;&lt;<span style="color: #2d9574;">","</span>&lt;&lt;other.y;
  <span style="color: #3a81c3; font-weight: bold;">return</span> steam1;
}

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>()
{
  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #715ab1;">p1</span>(4.0f, 4.0f);
  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #715ab1;">speed</span>(0.5f, 1.5f);
  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #715ab1;">powerup</span>(1.1f, 1.2f);
  <span style="color: #ba2f59; font-weight: bold;">Vec2</span> <span style="color: #715ab1;">result</span> =  p1 + speed * powerup   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">operator overloading</span>
  cout &lt;&lt; result2&lt;&lt; endl;  
}

</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org15263a5" class="outline-3">
<h3 id="org15263a5">Object (Create / Instantiate Object)</h3>
<div class="outline-text-3" id="text-org15263a5">
<p>
Oject are create in two ways
stacks is small 1 or 2megabytes, faster
heap is slower 
</p>

<ul class="org-ul">
<li>Stacks (normal way to create a obj)</li>
<li>Heaps (using new and delete )</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org685d012" class="outline-2">
<h2 id="org685d012">oops</h2>
<div class="outline-text-2" id="text-org685d012">
</div>
<div id="outline-container-org8f42e14" class="outline-3">
<h3 id="org8f42e14">Inheritance</h3>
<div class="outline-text-3" id="text-org8f42e14">
</div>
<div id="outline-container-org9aa38d7" class="outline-4">
<h4 id="org9aa38d7">Introduction</h4>
<div class="outline-text-4" id="text-org9aa38d7">
<p>
Allow to define a class in terms of another class
A new class is created based on exisiting(previous class)
</p>

<p>
NOTE: new class is called derived class
      existing class is called base class
</p>

<p>
Pros :
easier to create
reuse code
</p>
</div>
</div>
<div id="outline-container-org66dabf7" class="outline-4">
<h4 id="org66dabf7">Syntax</h4>
<div class="outline-text-4" id="text-org66dabf7">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">DerivedClass_Name</span> : <span style="color: #ba2f59; font-weight: bold;">acess_specifier</span> BaseClass_Name{ 
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">default acess specifier : privte</span>
  ........
};
</pre>
</div>
</div>
</div>
<div id="outline-container-orgadcef49" class="outline-4">
<h4 id="orgadcef49">Example</h4>
<div class="outline-text-4" id="text-orgadcef49">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">base class</span>
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span>{
<span style="color: #3a81c3; font-weight: bold;">public</span> :
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">setWidth</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">w</span>){
    width = w;
  }
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">setHeight</span>(inth){
    height = h;
  }
<span style="color: #3a81c3; font-weight: bold;">protected</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">width</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">height</span>;
};

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Derived Class</span>
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Rectangle</span>: <span style="color: #3a81c3; font-weight: bold;">public</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span>{
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">getArea</span>(){
    <span style="color: #3a81c3; font-weight: bold;">return</span> (width * height);
  }
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Rectangle</span> <span style="color: #715ab1;">Rect</span>;
  Rect.setWidth(5);
  Rect.setHeight(7);

  cout &lt;&lt; <span style="color: #2d9574;">"Total area :"</span> &lt;&lt;Rect.getArea() &lt;&lt; endl;
  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-orgcd1bf78" class="outline-4">
<h4 id="orgcd1bf78">Types of inheritance by Acess Specifier</h4>
<div class="outline-text-4" id="text-orgcd1bf78">
<p>
In c++ there are 3 acess specifiers : public,private, protected
</p>

<p>
Inheritanec can be classifed into three types
</p>
</div>
<ul class="org-ul">
<li><a id="org577c06e"></a>Public Inheritance :<br />
<div class="outline-text-5" id="text-org577c06e">
<p>
base class public    members become derived   class public    members
base class protected members become protected class protected members
base class private   member  are indirectly become private   class private   members
</p>
</div>

<ul class="org-ul">
<li><a id="org8f7294a"></a>NOTE: Base class members are never accessible directly form a derived class, but an be access through public and private mem of base class<br /></li>
</ul>
</li>

<li><a id="org432c730"></a>Protected Inheritance:<br />
<div class="outline-text-5" id="text-org432c730">
<p>
Base class public,protected members become protected members of derived class
</p>
</div>
</li>

<li><a id="orgebc7475"></a>Private Inheritane:<br />
<div class="outline-text-5" id="text-orgebc7475">
<p>
Base class public,protected members become private members of derived class
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">acess\class</th>
<th scope="col" class="org-left">inside base class</th>
<th scope="col" class="org-left">Insidederived class</th>
<th scope="col" class="org-left">outside class</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">public</td>
<td class="org-left">Yes</td>
<td class="org-left">Yes</td>
<td class="org-left">Yes</td>
</tr>

<tr>
<td class="org-left">protected</td>
<td class="org-left">Yes</td>
<td class="org-left">Yes</td>
<td class="org-left">No</td>
</tr>

<tr>
<td class="org-left">privte</td>
<td class="org-left">Yes</td>
<td class="org-left">No</td>
<td class="org-left">No</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</li>
</ul>
</div>
<div id="outline-container-orgb261b75" class="outline-4">
<h4 id="orgb261b75">multipule Inheritance:</h4>
<div class="outline-text-4" id="text-orgb261b75">
</div>
<ul class="org-ul">
<li><a id="org96365d7"></a>Syntax<br />
<div class="outline-text-5" id="text-org96365d7">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">derive_ClassName</span> : <span style="color: #ba2f59; font-weight: bold;">acess</span> baseA, acess <span style="color: #ba2f59; font-weight: bold;">base</span> <span style="color: #715ab1;">B</span>....{
  statemetns;
}
</pre>
</div>
</div>
</li>
<li><a id="org54284e1"></a>Example<br />
<div class="outline-text-5" id="text-org54284e1">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Base class </span>
<span style="color: #3a81c3; font-weight: bold;">class</span> Shape {
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">setWidth</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">w</span>){ width = w; }
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">setHeight</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">h</span>){ height = h;}
<span style="color: #3a81c3; font-weight: bold;">protected</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">width</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">height</span>;
};

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">base class</span>
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">PaintCost</span>{
<span style="color: #3a81c3; font-weight: bold;">public</span> :
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">getCost</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">area</span>){ <span style="color: #3a81c3; font-weight: bold;">return</span> area*70;}
};

<span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Derived class</span>
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Rectangle</span>: <span style="color: #3a81c3; font-weight: bold;">public</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span>, <span style="color: #3a81c3; font-weight: bold;">public</span> <span style="color: #ba2f59; font-weight: bold;">PaintConst</span>{
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">getArea</span>() {<span style="color: #3a81c3; font-weight: bold;">return</span> (width * height);}
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Rectangle</span> <span style="color: #715ab1;">Rect</span>;
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">area</span>;
  Rect.setWidth(5);
  Rect.setWidth(7);
  area = Rect.getArea();

  cout&lt;&lt; <span style="color: #2d9574;">"Total area :"</span> &lt;&lt; Rect.getArea()&lt;&lt; endl;
  cound&lt;&lt; <span style="color: #2d9574;">"Total paint cost :$"</span> &lt;&lt; Rect.getCost(area)&lt;&lt;endl;
  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}    
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div id="outline-container-org5c3a2d6" class="outline-3">
<h3 id="org5c3a2d6">Virtual and Pure Virtual Function:</h3>
<div class="outline-text-3" id="text-org5c3a2d6">
</div>
<div id="outline-container-orgc65e443" class="outline-4">
<h4 id="orgc65e443">Example</h4>
<div class="outline-text-4" id="text-orgc65e443">
<p>
Base Class :
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">class: shape</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">method Draw()</td>
</tr>
</tbody>
</table>

<p>
Derived classes :
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">class: line</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">method Draw()</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">class: rectangle</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">method Draw()</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">class: triange</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">method Draw()</td>
</tr>
</tbody>
</table>


<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span>{
<span style="color: #3a81c3; font-weight: bold;">protected</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">width</span>, <span style="color: #715ab1;">height</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #6c3163; font-weight: bold;">Shape</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span> = 0, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span> = 0){ width = a; height = b;}
  <span style="color: #3a81c3; font-weight: bold;">virtual</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">area</span>()= 0;             <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">pure virtual function</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">=0 tell compiler that this function has no body and it is pure virtual function</span>
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org5e9d3de" class="outline-4">
<h4 id="org5e9d3de">Syntax</h4>
<div class="outline-text-4" id="text-org5e9d3de">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">virtual</span> &lt;<span style="color: #ba2f59; font-weight: bold;">data</span>-type&gt; functionName(args);    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">virtual function</span>
<span style="color: #3a81c3; font-weight: bold;">virtual</span> &lt;<span style="color: #ba2f59; font-weight: bold;">data</span>-type&gt; functionName(args)=0;    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">pure virtual function</span>
</pre>
</div>

<p>
virtual function is a defined in a base class with another version (same function name ) in derived class, tells compiler that we don't want static linkage for this function
</p>
</div>
</div>
<div id="outline-container-org4cbd785" class="outline-4">
<h4 id="org4cbd785">Example for virtual function</h4>
<div class="outline-text-4" id="text-org4cbd785">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">Class</span> <span style="color: #715ab1;">Entity</span>{
 <span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #3a81c3; font-weight: bold;">virtual</span> <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">GetName</span>(){ <span style="color: #3a81c3; font-weight: bold;">return</span> <span style="color: #2d9574;">"Entity"</span>;}
};

<span style="color: #ba2f59; font-weight: bold;">Class</span> <span style="color: #715ab1;">Player</span> : <span style="color: #3a81c3; font-weight: bold;">public</span> Entity{
 <span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">m_Name</span>;
 <span style="color: #3a81c3; font-weight: bold;">public</span>:
  Player(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">string</span>&amp; <span style="color: #715ab1;">name</span>):m_Name{name}{}
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">GetName</span>() {<span style="color: #3a81c3; font-weight: bold;">return</span> m_Name;}
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">in C++ new keywork override is used to specify this is used to override other function</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">string GenName() override { retun m_Name;} </span>
}
<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">PrintName</span>( <span style="color: #ba2f59; font-weight: bold;">Entity</span> * <span style="color: #715ab1;">entity</span>){
  cout&lt;&lt; entity-&gt; GetName()&lt;&lt;endl;
}

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Entity</span>* <span style="color: #715ab1;">e</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>();
  PrintName(e);
  <span style="color: #ba2f59; font-weight: bold;">Player</span>* <span style="color: #715ab1;">p</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Player</span>(<span style="color: #2d9574;">"Tony"</span>);

  cin.get();
}
</pre>
</div>
</div>
</div>

<div id="outline-container-org79c581f" class="outline-4">
<h4 id="org79c581f">Pure virtual function :</h4>
<div class="outline-text-4" id="text-org79c581f">
<ul class="org-ul">
<li>has no body (implementation part)</li>
<li>Pure Virtual function  is same as abstract method or interface in other prg language like java or c#.</li>
<li>Basically it allow us to define a function in base class which doesn't have implementatin and force (sub class or derived class) to actally implement</li>
</ul>
</div>
</div>
<div id="outline-container-org3c70704" class="outline-4">
<h4 id="org3c70704">Example for Pure Virtual Function</h4>
<div class="outline-text-4" id="text-org3c70704">
<p>
In above virtual function example 
</p>
<ul class="org-ul">
<li>we have a virtual function (GetName) in base class(Entity) which has a body</li>
<li>Then we have overide it by a (subclass)derived class fucntion</li>
<li>By having a body in base class means overiding function of base class is entirely optional</li>
<li>means by default compiler will exe base class function but n't derived class and</li>
<li>Some case it does't  make sense implemention in base class wt we want to force derived class to provied own defination</li>
</ul>

<p>
In OOP it is quite common to have base class consist of unimplemented method and force subclass to implement them is know as <b>Interface Class</b> or <b>Absstract Class</b>
</p>

<p>
Interface Class  doesn't have any implementation part so it n't instanciate a object. and forces derived class to implement 
</p>


<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">Class</span> <span style="color: #715ab1;">Entity</span>{
 <span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #3a81c3; font-weight: bold;">virtual</span> <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">GetName</span>()= 0;
};

<span style="color: #ba2f59; font-weight: bold;">Class</span> <span style="color: #715ab1;">Player</span> : <span style="color: #3a81c3; font-weight: bold;">public</span> Entity{
 <span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">m_Name</span>;
 <span style="color: #3a81c3; font-weight: bold;">public</span>:
  Player(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">string</span>&amp; <span style="color: #715ab1;">name</span>):m_Name{name}{}
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">GetName</span>() {<span style="color: #3a81c3; font-weight: bold;">return</span> m_Name;}
}

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Entity</span>* <span style="color: #715ab1;">e</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>(); <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">ERROR : Entity is virtual or abstract can't  instanciate</span>
  PrintName(e);
  <span style="color: #ba2f59; font-weight: bold;">Player</span>* <span style="color: #715ab1;">p</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Player</span>(<span style="color: #2d9574;">"Tony"</span>);

  cin.get();
</pre>
</div>
</div>
</div>

<div id="outline-container-org222162b" class="outline-4">
<h4 id="org222162b">Example 2: Create fucntion which print class name</h4>
<div class="outline-text-4" id="text-org222162b">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #ba2f59; font-weight: bold;">Class</span> <span style="color: #715ab1;">Printable</span>
{
 <span style="color: #3a81c3; font-weight: bold;">public</span> :
  <span style="color: #3a81c3; font-weight: bold;">virtual</span> <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">GetClassName</span>()=0;
};

<span style="color: #ba2f59; font-weight: bold;">Class</span> <span style="color: #715ab1;">Entity</span> : <span style="color: #3a81c3; font-weight: bold;">public</span> Printable
{
 <span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #3a81c3; font-weight: bold;">virtual</span> <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">GetName</span>(){<span style="color: #3a81c3; font-weight: bold;">return</span> <span style="color: #2d9574;">"Entity"</span>;}
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">GetClassName</span>(){<span style="color: #3a81c3; font-weight: bold;">return</span> <span style="color: #2d9574;">"Entity"</span>;} 
};

<span style="color: #ba2f59; font-weight: bold;">Class</span> <span style="color: #715ab1;">Player</span> : <span style="color: #3a81c3; font-weight: bold;">public</span> Entity{
 <span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">m_Name</span>;
 <span style="color: #3a81c3; font-weight: bold;">public</span>:
  Player(<span style="color: #3a81c3; font-weight: bold;">const</span> <span style="color: #ba2f59; font-weight: bold;">string</span>&amp; <span style="color: #715ab1;">name</span>):m_Name{name}{}
  <span style="color: #ba2f59; font-weight: bold;">string</span> <span style="color: #715ab1;">GetName</span>() {<span style="color: #3a81c3; font-weight: bold;">return</span> m_Name;}
}

<span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">Print</span>(<span style="color: #ba2f59; font-weight: bold;">Printable</span>* <span style="color: #715ab1;">obj</span>)
{
  cout&lt;&lt; obj-&gt;GetClassName()&lt;&lt;endl;
}
<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Entity</span>* <span style="color: #715ab1;">e</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Entity</span>();
  <span style="color: #2aa1ae; background-color: #ecf3ec;">//  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">PrintName(e);</span>
  <span style="color: #ba2f59; font-weight: bold;">Player</span>* <span style="color: #715ab1;">p</span> = <span style="color: #3a81c3; font-weight: bold;">new</span> <span style="color: #ba2f59; font-weight: bold;">Player</span>(<span style="color: #2d9574;">"Tony"</span>);
  Print(e);
  Print(p);

  cin.get();
</pre>
</div>
</div>
</div>
<div id="outline-container-org0cceb8f" class="outline-4">
<h4 id="org0cceb8f">How it work</h4>
<div class="outline-text-4" id="text-org0cceb8f">
</div>
<ul class="org-ul">
<li><a id="org7f0e210"></a>V table :<br />
<div class="outline-text-5" id="text-org7f0e210">
<p>
How does compiler know which Draw function should be used ?
Virtual function has some thing called dynamic dispach which compile implement by V table 
V table : TABLE consisting of all virtual function inside base class and map them
</p>
</div>
</li>
<li><a id="org1eaf900"></a>Virtual Function is costly<br />
<div class="outline-text-5" id="text-org1eaf900">
<p>
There are two run time cost 
</p>
<ol class="org-ol">
<li>memory to store V-table  (to dispach correct function include member pointer in base class)</li>

<li>every time we use function we need to go through this table to determine to which function</li>
</ol>
</div>
</li>
</ul>
</div>
<div id="outline-container-orgf7aeff8" class="outline-4">
<h4 id="orgf7aeff8">Dynamic Linkage :</h4>
<div class="outline-text-4" id="text-orgf7aeff8">
<p>
(when a function is called which version of function to be selected based on what kind of obj is called. This is also know as late binding ) 
</p>
</div>
</div>
</div>
<div id="outline-container-org291bf9d" class="outline-3">
<h3 id="org291bf9d">Interfaces by Abstract Class</h3>
<div class="outline-text-3" id="text-org291bf9d">
<p>
Interface : class without  committing to a particular implementation of class
</p>

<p>
Implemented by abstract class
</p>
</div>
<div id="outline-container-org9e3cbb3" class="outline-4">
<h4 id="org9e3cbb3">Defination</h4>
<div class="outline-text-4" id="text-org9e3cbb3">
<p>
A class is called Abstract if declares at least one pure virtual function 
</p>

<p>
Abstract class does't have any implementation part hence it give error if we create(instantiate ) a object.
</p>

<p>
So abstract class are use to provide interface  to derived class where implementation part is present
</p>

<p>
If a derived class if there is atleast one pure virtual function then it is also called a abstract class and it can't instatiate obj
</p>

<p>
If in derived class (all pure function in base class) are implemented then it can used to create obj and called <code>concrete classes</code>
</p>
</div>
</div>

<div id="outline-container-orgdb08ad7" class="outline-4">
<h4 id="orgdb08ad7">Example :</h4>
<div class="outline-text-4" id="text-orgdb08ad7">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span>{
<span style="color: #3a81c3; font-weight: bold;">protected</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">width</span>, <span style="color: #715ab1;">height</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #3a81c3; font-weight: bold;">virtual</span> <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">getArea</span>()= 0;                <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">pure virtual function def</span>
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">setWidth</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">w</span>) {width = w}
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">setHeight</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">h</span>){height = h;}
};
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Rectangle</span>: <span style="color: #3a81c3; font-weight: bold;">public</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span>{             
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">getArea</span>() {<span style="color: #3a81c3; font-weight: bold;">return</span> (width * height);} <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">implementation of pure virtual function</span>
};
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Triangle</span>: <span style="color: #3a81c3; font-weight: bold;">public</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span>{              
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">getArea</span>(){<span style="color: #3a81c3; font-weight: bold;">return</span> (width*height/2);}  <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">implementation of pure virtual function</span>
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">Rectangle</span> <span style="color: #715ab1;">Rect</span>;
  <span style="color: #ba2f59; font-weight: bold;">Triangle</span> <span style="color: #715ab1;">Tri</span>;
  Rect.setWidth(5);
  Rect.setHeight(7);
  cout&lt;&lt; <span style="color: #2d9574;">"Total Rectangel area : "</span>&lt;&lt;Rect.getArea()&lt;&lt;endl;
  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org55bd721" class="outline-3">
<h3 id="org55bd721">Abstraction</h3>
<div class="outline-text-3" id="text-org55bd721">
<p>
Only show features to prg(outside world)  but hiddens the implementation details 
</p>

<p>
Advantage : 
  Reduce code complexity
  Hidding details and expose essentials part
</p>


<p>
eg: In Database System : hides details of how data is stored and create and mainted  
</p>

<p>
User does not know how data is stored, create, mainted (hiddes details)
</p>

<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Let there is expensive class Rocket</span>

<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Rocket</span>{
  <span style="color: #ba2f59; font-weight: bold;">void</span> fly()          <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">this contain very complex code and does not want to show other</span>
  {.............}

  <span style="color: #2aa1ae; background-color: #ecf3ec;">//   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">In order to not show it others</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">//    </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;  Compile class and convert to lib (showing funtion fly)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">//    </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;   Prg can't  see implementation part but can use the fly  function </span>
}
</pre>
</div>

<p>
Abstraction is a method of expressing the important properties without involving the background details. On the other hand, Data hiding insulates the data from the straight access by the program
</p>
</div>
<div id="outline-container-org35c8883" class="outline-4">
<h4 id="org35c8883">Explination</h4>
<div class="outline-text-4" id="text-org35c8883">
<p>
abstraction is a mechanism of extracting the essential elements for the creation of a system, without its implementation details. In abstraction, we have to focus only on what is to be done instead of how it should be done. Abstraction is a thought process; it solves the problem at the design level.
</p>
</div>
</div>

<div id="outline-container-org1a73200" class="outline-4">
<h4 id="org1a73200">Data Abstracting</h4>
</div>
<div id="outline-container-orgeff843a" class="outline-4">
<h4 id="orgeff843a">Abstract Data Type:</h4>
<div class="outline-text-4" id="text-orgeff843a">
<p>
If you implement class with public &amp; private memberss is called Data Abstraction
</p>

<p>
Explaination :
members (attributes and function ) in public are accessable to outside world            # show features or important details 
members (attributes and function ) in private are n't accessiable to outside world      # hide implementation or background details
</p>
</div>
</div>
</div>

<div id="outline-container-org9d8ef6e" class="outline-3">
<h3 id="org9d8ef6e">Encapsulation</h3>
<div class="outline-text-3" id="text-org9d8ef6e">
<p>
Encapsulation means wrapping the implementation of data member and methods inside a class. When implementation of all the data member and methods inside a class are encapsulated
</p>

<p>
the method name can only describe what action it can perform on an object of that class
</p>

<p>
It also hides data but for protection and binds data and functions
</p>
</div>
</div>

<div id="outline-container-org48ad6ba" class="outline-3">
<h3 id="org48ad6ba">Data hiding</h3>
<div class="outline-text-3" id="text-org48ad6ba">
<p>
Data Hiding means confirms the security of  members of a class from an illegal or unauthorized access. 
</p>

<p>
The main difference between data hiding and encapsulation is that 
</p>

<p>
data hiding focus more on data security and 
encapsulation focuses more on hiding the complexity of the system.
</p>

<p>
Ex: Audio player volume increase
</p>

<p>
Consider we have a vlc player where it volume [0 100] so we have desing this volume parameter
</p>
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">vlcplayer</span>{
<span style="color: #3a81c3; font-weight: bold;">private</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">volume_private</span>;        <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Here volume_private is hidden we can't access outside or accidenally change volume it should by public function</span>
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">volume_public</span>;         <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Here volume_pulic is not hidden we can access outside </span>
  <span style="color: #6c3163; font-weight: bold;">vlcplayer</span>():volume_private{0} {}
  <span style="color: #ba2f59; font-weight: bold;">void</span> <span style="color: #6c3163; font-weight: bold;">setVolume_private</span>(<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">x</span>){ 
    <span style="color: #3a81c3; font-weight: bold;">if</span> (x&gt;=0&amp;&amp; x&lt;= 100){
      volume_private = x;
      cout&lt;&lt; <span style="color: #2d9574;">"set voulume"</span>&lt;&lt; endl;
    }
    <span style="color: #3a81c3; font-weight: bold;">else</span>{
      cout &lt;&lt; <span style="color: #2d9574;">"Can't Set"</span>&lt;&lt; endl;
    }
  }
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>(){
  <span style="color: #ba2f59; font-weight: bold;">vlcplayer</span> <span style="color: #715ab1;">vlc</span>;
  vlc.setVolume_private(50);
  vlc.setVolume_private(-30);
  vlc.volume_public = 10000;  
}
</pre>
</div>

<p>
NOTE: In general data is stored in private and implementation part is done in public
</p>
</div>
</div>
<div id="outline-container-org9cfe3e4" class="outline-3">
<h3 id="org9cfe3e4">Data Hiding vs Encapsulation</h3>
<div class="outline-text-3" id="text-org9cfe3e4">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">comparison</th>
<th scope="col" class="org-left">Data Hiding</th>
<th scope="col" class="org-left">Encapsulation</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Basic</td>
<td class="org-left">About data security along with hiding complexity.</td>
<td class="org-left">About wrapping data to hide the complexity of a system.</td>
</tr>

<tr>
<td class="org-left">Focus</td>
<td class="org-left">Restricting or permitting the use of data inside the capsule.</td>
<td class="org-left">Enveloping or wrapping the complex data.</td>
</tr>

<tr>
<td class="org-left">Access Specifier</td>
<td class="org-left">data under data hiding is always private and inaccessible.</td>
<td class="org-left">Data under encapsulation may be private or public.</td>
</tr>

<tr>
<td class="org-left">Process</td>
<td class="org-left">Data hiding is a process as well as technique</td>
<td class="org-left">Encapsulation is a sub-process in data hiding.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org0af5899" class="outline-3">
<h3 id="org0af5899">Polymorhism</h3>
<div class="outline-text-3" id="text-org0af5899">
</div>
<div id="outline-container-org5ba5a75" class="outline-4">
<h4 id="org5ba5a75">Introduction</h4>
<div class="outline-text-4" id="text-org5ba5a75">
<p>
Polymorphism means having many forms. Typically, polymorphism occurs when there is a hierarchy of classes and they are related by inheritance.
</p>

<p>
C++ polymorphism means that a <code>call to a member function</code> will cause a <code>different function to be executed depending on the type of object</code> that invokes the function.
</p>

<p>
Consider the following example where a base class has been derived by other two classes:
</p>
</div>
</div>
<div id="outline-container-org7a06e60" class="outline-4">
<h4 id="org7a06e60">Example</h4>
<div class="outline-text-4" id="text-org7a06e60">
<div class="org-src-container">
<pre class="src src-cpp"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span> {
<span style="color: #3a81c3; font-weight: bold;">protected</span>:
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">width</span>, <span style="color: #715ab1;">height</span>;
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #6c3163; font-weight: bold;">Shape</span>( <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span> = 0, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span> = 0) {width = a;height = b;}
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">area</span>() { cout &lt;&lt; <span style="color: #2d9574;">"Parent class area :"</span> &lt;&lt;endl;  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;}                       <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Polymorhism obj is shape:  has same name in class</span>
};

<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Rectangle</span>: <span style="color: #3a81c3; font-weight: bold;">public</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span> {
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #6c3163; font-weight: bold;">Rectangle</span>( <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span> = 0, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span> = 0):<span style="color: #6c3163; font-weight: bold;">Shape</span>(a, b) { }
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">area</span> () { cout &lt;&lt; <span style="color: #2d9574;">"Rectangle class area :"</span> &lt;&lt;endl; <span style="color: #3a81c3; font-weight: bold;">return</span> (width * height); }    <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Polymorphism obj is rectangle</span>
};

<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Triangle</span>: <span style="color: #3a81c3; font-weight: bold;">public</span> <span style="color: #ba2f59; font-weight: bold;">Shape</span>{
<span style="color: #3a81c3; font-weight: bold;">public</span>:
  <span style="color: #6c3163; font-weight: bold;">Triangle</span>( <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">a</span> = 0, <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #715ab1;">b</span> = 0):<span style="color: #6c3163; font-weight: bold;">Shape</span>(a, b) { }                                                
  <span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">area</span> () { cout &lt;&lt; <span style="color: #2d9574;">"Triangle class area :"</span> &lt;&lt;endl; <span style="color: #3a81c3; font-weight: bold;">return</span> (width * height / 2);}   <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Polymorphism obj is triangle  </span>
};

<span style="color: #ba2f59; font-weight: bold;">int</span> <span style="color: #6c3163; font-weight: bold;">main</span>( ) {
  <span style="color: #ba2f59; font-weight: bold;">Shape</span> *<span style="color: #715ab1;">shape</span>;
  <span style="color: #ba2f59; font-weight: bold;">Rectangle</span> <span style="color: #715ab1;">rec</span>(10,7);
  <span style="color: #ba2f59; font-weight: bold;">Triangle</span>  <span style="color: #715ab1;">tri</span>(10,5);
  shape = &amp;rec;                <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">store the address of Rectangle</span>
  shape-&gt;area();               <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">call rectangle area.  &gt;&gt; Rectangular class area : 70</span>
  shape = &amp;tri;                
  shape-&gt;area();               <span style="color: #2aa1ae; background-color: #ecf3ec;">// </span><span style="color: #2aa1ae; background-color: #ecf3ec;">call triangel area     &gt;&gt; Triangle class area : 50</span>
  <span style="color: #3a81c3; font-weight: bold;">return</span> 0;
}
</pre>
</div>
</div>
</div>
<div id="outline-container-org4a94b3b" class="outline-4">
<h4 id="org4a94b3b">How it work</h4>
<div class="outline-text-4" id="text-org4a94b3b">
<p>
when callingt  polymorphic mem function is set by compoler as version control in base class this is called <code>static resolution if function call</code> 
or static linkage
</p>

<p>
The function call is fixed before execution know as early bunding because compiler know which polymorphic  function should be called during compiling prg
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-orga4f7ac2" class="outline-2">
<h2 id="orga4f7ac2">Interview Questions</h2>
<div class="outline-text-2" id="text-orga4f7ac2">
</div>
<div id="outline-container-org9aef151" class="outline-3">
<h3 id="org9aef151">Difference between void and void pointer:</h3>
<div class="outline-text-3" id="text-org9aef151">
<p>
void
used to denote nothing                       
if function dont return anything we use void 
</p>
</div>
</div>
<div id="outline-container-orgdc27963" class="outline-3">
<h3 id="orgdc27963">Difference in Reference variable and pointer variable</h3>
<div class="outline-text-3" id="text-orgdc27963">
<p>
References are generally implemented using pointers. A reference is same object, just with a different name and reference must refer to an object. Since references can’t be NULL, they are safer to use.
</p>


<p>
&gt; Pointer can be assigned NULL directly, whereas reference cannot.
&gt; Pointers can iterate over an array, we can use ++ to go to the next item that a pointer is pointing to.
&gt; pointer is a variable that holds a memory address. A reference has the same memory address as the item it references.
&gt; pointer to a class/struct uses ‘-&gt;'(arrow operator) to access it’s members whereas a reference uses a ‘.'(dot operator)
&gt; pointer needs to be dereferenced with * to access the memory location it points to, whereas a reference can be used directly.
</p>
</div>
</div>

<div id="outline-container-org21d9936" class="outline-3">
<h3 id="org21d9936">multiple return value</h3>
<div class="outline-text-3" id="text-org21d9936">
<p>
by using a struct and putting all the return value and 
</p>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Cherno</p>
<p class="date">Created: 2022-08-22 Mon 11:04</p>
<p class="validation"><a href="https://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
