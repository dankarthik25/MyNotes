<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2023-03-16 Thu 15:58 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>My Python Notes</title>
<meta name="author" content="Karthik" />
<meta name="generator" content="Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { }
</style>
<link rel="icon" type="image/png" href="https://deepalgorithms.in/assets/icons/favicon.png">
<link rel="stylesheet" type="text/css" href="/home/karthik/mynotes/org2html/org-theme-collection/readtheorg-htmlize.css"/>
<link rel="stylesheet" type="text/css" href="/home/karthik/mynotes/org2html/org-theme-collection/readtheorg.css"/>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
<script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/lib/js/jquery.stickytableheaders.min.js"></script>
<script type="text/javascript" src="https://fniessen.github.io/org-html-themes/src/readtheorg_theme/js/readtheorg.js"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="content" class="content">
<h1 class="title">My Python Notes</h1>
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgc2062bb">Python Introudctio</a>
<ul>
<li><a href="#org3d7311e">History:</a></li>
<li><a href="#org61270ca">Who uses python</a></li>
<li><a href="#org8c8c118">Features :</a></li>
</ul>
</li>
<li><a href="#org616f1d6"><span class="todo TODO">TODO</span> Installation</a>
<ul>
<li><a href="#org5a55654"><span class="todo TODO">TODO</span> Pip Installation</a></li>
<li><a href="#orgb0b67cd">Conda</a></li>
<li><a href="#org8dbd289"><span class="todo TODO">TODO</span> Virtural Environment</a></li>
<li><a href="#org2a9c194">Conda virtual env</a></li>
<li><a href="#org0f5b03d"><span class="todo TODO">TODO</span> Requirement file</a></li>
<li><a href="#org99873b8">Jupyter</a></li>
</ul>
</li>
<li><a href="#org3fd5893">Operators in python:</a>
<ul>
<li><a href="#org45e215d">1) Arthimetic operator</a></li>
<li><a href="#org4d03814">2) Assignment  operator :</a></li>
<li><a href="#org772ec84">3) Comparison  operator</a></li>
<li><a href="#org14bce67">4) Logical  operator</a></li>
<li><a href="#org92aadf9">5) Bitwise  operator</a></li>
<li><a href="#org642eb6a">6) Identity  operator:checks if var is equal</a></li>
<li><a href="#orged26b9f">7) Membership  operator : checks if a element belongs to (set, list,tubles,string,dict)</a></li>
</ul>
</li>
<li><a href="#org7e95f96">Data types</a>
<ul>
<li><a href="#org2e3d2b0">Intro</a>
<ul>
<li><a href="#orga876030">immutable vs mutable</a></li>
</ul>
</li>
<li><a href="#org8fff780">Number</a></li>
<li><a href="#orgdc61afc">Integers eg 1,4,5,</a></li>
<li><a href="#orgf4bd205">Float    eg 3.5,3.1246,</a></li>
<li><a href="#org6c70148">Complex  eg 3+2j, 4+5j</a></li>
<li><a href="#org427e840">String</a>
<ul>
<li><a href="#org3e3f93d">defination</a></li>
<li><a href="#org98ab97e">Operations</a></li>
<li><a href="#orgf736979">Method</a></li>
<li><a href="#org30eb573">String Encoding Function:</a></li>
</ul>
</li>
<li><a href="#orgb2a8236">String Formating</a>
<ul>
<li><a href="#org88d47ff"><span class="todo TODO">TODO</span> Place Holder(f string or Replace files)</a></li>
<li><a href="#orga9ecec6">Replacement Field(Place Holders)</a></li>
<li><a href="#org3bb86f8">R String</a></li>
<li><a href="#org104d7ea">F String {py3.6}</a></li>
<li><a href="#org1709ab8">Print</a></li>
<li><a href="#org4ae79f1">EVAL : evaluate the string</a></li>
</ul>
</li>
<li><a href="#orgb84ae6b">Tubles</a>
<ul>
<li><a href="#org9bc61da">defination</a></li>
<li><a href="#org5118a36">Operations</a></li>
</ul>
</li>
<li><a href="#org2762aab">List</a>
<ul>
<li><a href="#orgb9d2262">Syntax</a></li>
<li><a href="#org0019c91">Operations</a></li>
<li><a href="#orged9b4bd">Slicing</a></li>
<li><a href="#orgbb2fda9">Sorted vs list.sorted</a></li>
<li><a href="#org8093dc3">Operations</a></li>
</ul>
</li>
<li><a href="#org74b11eb">Tubles</a>
<ul>
<li><a href="#org9539bb8">Defination</a></li>
<li><a href="#orga993628">Operations</a></li>
</ul>
</li>
<li><a href="#org98f0beb">Dictionary</a>
<ul>
<li><a href="#org2805e25">Defination</a></li>
<li><a href="#orgd1b7ac8">Adding New entity</a></li>
<li><a href="#org1169d10">Deleting a key , Dic</a></li>
<li><a href="#orgba1933b">Dict is UnOrder</a></li>
<li><a href="#org7760536">Ordered</a></li>
<li><a href="#org17dec05">Operations</a></li>
<li><a href="#orgf4ae83e">Methods</a></li>
<li><a href="#org9f26121">Loop in dictionary</a></li>
</ul>
</li>
<li><a href="#orge38a021">Set</a>
<ul>
<li><a href="#orgc280e3d">defination</a></li>
<li><a href="#org7a473b9">Syntax</a></li>
<li><a href="#org9612854">Adding elements</a></li>
<li><a href="#orgdac024d">Union,Intersection,difference,symmetric differ</a></li>
<li><a href="#orgbff75cf">Sort</a></li>
<li><a href="#orgff3271f">remove or discard elements</a></li>
<li><a href="#orgbe2b4ce">subset/superset</a></li>
<li><a href="#org7689464">Methods</a></li>
</ul>
</li>
<li><a href="#orgafc0674">Sort</a></li>
<li><a href="#orgb2314cc">Type Conversions</a>
<ul>
<li><a href="#org2b8cbc3">tub2list</a></li>
<li><a href="#orgb463327">list2Str</a></li>
<li><a href="#org4074ac7">tubles2set</a></li>
<li><a href="#org1b4c7e7">Conversion tubles2dic</a></li>
<li><a href="#org2ef6eb1">String2int</a></li>
<li><a href="#orgb430a2c">str2float</a></li>
<li><a href="#org86794ec">str2list,set,tuple</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgecb31a8">Data Binding</a></li>
<li><a href="#org1220d45">Flow Control</a>
<ul>
<li>
<ul>
<li><a href="#orgd5eb09b">if elif else</a></li>
<li><a href="#org8fb9258">Loop</a></li>
<li><a href="#org3296375">Flow control :</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org721109f">Loop</a></li>
<li><a href="#orgdee6c94">Comprehension</a>
<ul>
<li><a href="#orga3537dd">If-else Comprehension</a></li>
<li><a href="#org45b62e8">List Comprehension</a></li>
<li><a href="#orgbbb12d0">List Comprehension for dynamical create List of  integer</a></li>
<li><a href="#org327ad70">Dictitionary Comprehension</a></li>
<li><a href="#org36060a8">Set Comprehension</a></li>
<li><a href="#orgc251aa9">Generator Expression</a></li>
</ul>
</li>
<li><a href="#orgd6f28fb">Keyboard Input:</a></li>
<li><a href="#org884774e">Function</a>
<ul>
<li>
<ul>
<li><a href="#org6f8b57a">Syntax</a></li>
<li><a href="#orgad8fad0">Pass by Reference</a></li>
<li><a href="#org4d32dc1">Pass by Value</a></li>
<li><a href="#org4b9bc32">argument</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgfb3f12f">Namespace &amp; Scope</a>
<ul>
<li>
<ul>
<li><a href="#orga75a4d2">Scope</a></li>
<li><a href="#org3243473">Namespace</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org42aba41">Modules (librays)</a>
<ul>
<li><a href="#org08b8904">Os module</a>
<ul>
<li><a href="#org4a6489a">Intoduction Shortcut method:</a></li>
<li><a href="#org71c03ef">Ex of Dir managements</a></li>
<li><a href="#orgfc8b7c6">Os walk [tree of all file/sub-dir]</a></li>
<li><a href="#orgd870216">Os path [JOIN AND SPLIT PATH]</a></li>
<li><a href="#org32504bb">Os Flags</a></li>
</ul>
</li>
<li><a href="#org52b378c">Datetime module</a>
<ul>
<li><a href="#org24b823a">Introduction</a></li>
<li><a href="#org13b0b17">Date</a></li>
<li><a href="#org930adfd">Time</a></li>
<li><a href="#org9b1b37d">timedelda</a></li>
<li><a href="#orgaf0a1fd">datetime  tz-naive or with default Timezone</a></li>
<li><a href="#org219ca98">From datetime to only time</a></li>
</ul>
</li>
<li><a href="#orgd78892d">datetime tz-aware</a>
<ul>
<li><a href="#org337f4ee">pytz module for Timezone</a></li>
<li><a href="#orge7c96eb">List of Timezone</a></li>
<li><a href="#orgbea1ec4">set timezone with datatime.timezone</a></li>
<li><a href="#org83c9cee">Convert timezone or remove timezone</a></li>
<li><a href="#orgbe56d85">Change one timezone to other timezone(using astimezone)</a></li>
<li><a href="#orgcc4ef6b">Naive to timezone (tz -naive dt) to (tz-aware dt) or (naive dt to datetime withtimezone)</a></li>
<li><a href="#org0ae99c8">String 2 Datetime or Datetime 2 String</a></li>
<li><a href="#orgdb9a28a">Ex Datetime and</a></li>
</ul>
</li>
<li><a href="#orgfb95555">File Module or File Object</a>
<ul>
<li><a href="#orgc8ec7ae">File acess modes</a></li>
<li><a href="#org1415563">Contant manager</a></li>
<li><a href="#orga0518bc">Write mode or Overwrite mode with Contant Manager</a></li>
<li><a href="#org4faf444">Append Mode with Contant Manager</a></li>
<li><a href="#org45fd5d3">Rename mulitple files</a></li>
</ul>
</li>
<li><a href="#org373c61f">Read CSV module- read, parse, write</a></li>
<li><a href="#org1a32691">Time Module</a>
<ul>
<li><a href="#org6c9e537">time</a></li>
<li><a href="#orgd865518">Time Tuple</a></li>
<li><a href="#org8c659dc">Getting Current Time</a></li>
<li><a href="#org1a38c79">Getting Formatted Time</a></li>
<li><a href="#orge7081c6">Getting Calendar for a Month</a></li>
<li><a href="#org655fc5a">Time Module</a></li>
<li><a href="#orgc87a715">Calender Module</a></li>
<li><a href="#org728e452">Other Module &amp; Functions</a></li>
</ul>
</li>
<li><a href="#org2e7cf7f">pprint</a></li>
<li><a href="#org0e201b5">Json Module</a></li>
<li><a href="#org116f82b">Regular expression</a>
<ul>
<li><a href="#org53ae6aa">Cheat Sheet:</a></li>
<li><a href="#orgd8b5193">Quantifiers</a></li>
<li><a href="#orgf130bd2">Example</a></li>
</ul>
</li>
<li><a href="#org7e91e14">Random module</a>
<ul>
<li><a href="#org00a1fc9">Introdution</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org227b0f0">File Management</a>
<ul>
<li>
<ul>
<li><a href="#orgf0626b1">Open/ Closing a File</a></li>
<li><a href="#orgae9e884">flush parameter</a></li>
<li><a href="#org67b7fde">Read and write binary files</a></li>
<li><a href="#org78bfffa">pickle</a></li>
<li><a href="#org75759b1">String Encoding Function</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org6381803">Import</a>
<ul>
<li>
<ul>
<li><a href="#org31115cf">Introduction</a></li>
<li><a href="#org8335902">Import your own obj and functions</a></li>
<li><a href="#org715c6d1">from Import</a></li>
<li><a href="#org44ed170">Executing module as script</a></li>
<li><a href="#org5a5e7eb">Loading Module</a></li>
<li><a href="#org6dfa096">Reload() a module</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org8340f5f">Package</a>
<ul>
<li><a href="#orgce15db8">Create a package</a></li>
<li><a href="#orgd4e415b">Import package from parent directory</a>
<ul>
<li><a href="#org11f2b90">using sys.path.append method</a></li>
<li><a href="#org6d6f392">os.path.abspath method</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org89a414e">Exceptions Handling</a>
<ul>
<li>
<ul>
<li><a href="#org52f7a5c">What is Exception</a></li>
<li><a href="#orgc906db5">How to handle Exception ?</a></li>
<li><a href="#org7a376f0">Try -except with multiple expressions</a></li>
<li><a href="#org7a8bcf6">Finally</a></li>
<li><a href="#orgc42bdbb">Example for Using Finial inside Exception</a></li>
<li><a href="#orgfd4db84">Argument of Exception</a></li>
<li><a href="#org3103635">Raising an Exception</a></li>
<li><a href="#orgb9a8ad2">Standard Exception</a></li>
<li><a href="#org673afe7">User Defined Exception</a></li>
<li><a href="#org3870776">Assertion Error</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org7a10117">DuckTyping</a>
<ul>
<li><a href="#orgc7d0098">Example2</a></li>
<li><a href="#org44c5d00">Why we use EAFP</a></li>
</ul>
</li>
<li><a href="#orgecdded2">Nametuple</a></li>
<li><a href="#org87135db"><span class="todo TODO">TODO</span> Map, Filter &amp; Reduce</a></li>
<li><a href="#org06d8f81">OOP [Objective Oriented Programming]</a>
<ul>
<li>
<ul>
<li><a href="#org205708d">Introductions</a></li>
<li><a href="#org2d12196">Creating Class</a></li>
<li><a href="#orgd20baaf">Creating Object</a></li>
<li><a href="#orgc80f0ad">Example:</a></li>
<li><a href="#org67fa0a3">Accessing Attributes</a></li>
<li><a href="#org6481e22">Build-in-Function for operating of class memb(attribute)</a></li>
<li><a href="#org2225418">Build-in-Class Attributes:(attri for class as whole than indivudual obj)</a></li>
<li><a href="#org98136ae">Example:</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgc31e3ff">Inheritance</a>
<ul>
<li><a href="#orgad58862">Eg</a></li>
</ul>
</li>
<li><a href="#org6169141">Overloading Vs Overriding</a>
<ul>
<li>
<ul>
<li><a href="#orgfcb1dcf">Base Overiding methods</a></li>
</ul>
</li>
<li><a href="#orge9786df">Operator Overloding</a>
<ul>
<li><a href="#org002c280">Example</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org7a05761">Data Hiding (Data Encapulatoin)</a>
<ul>
<li><a href="#org00b2205">EG:</a></li>
</ul>
</li>
<li><a href="#orgcf92239">Garbage Collector</a></li>
<li><a href="#org0f055b1"><span class="todo TODO">TODO</span> Generators [033<sub>Generator</sub>: Coreymschafer]</a></li>
<li><a href="#org30caa8a"><span class="todo TODO">TODO</span> Decorateors [034,035<sub>Decorators</sub>: Dynamics]</a>
<ul>
<li><a href="#org319823b">1st class Functions</a></li>
<li><a href="#org3b52f0a">Decoreators</a></li>
</ul>
</li>
<li><a href="#org859e67b">Logging</a>
<ul>
<li><a href="#orga91816e"><span class="todo TODO">TODO</span> Advance Logging</a></li>
</ul>
</li>
<li><a href="#org0b904f1">Python API Development - Comprehensive Course for Beginners</a></li>
<li><a href="#org76039b2">--------&#x2013;&#x2014; other sources----------</a></li>
<li><a href="#orgf620dbe">Developer</a></li>
<li><a href="#orgb42233a">Python interviews</a>
<ul>
<li><a href="#org047a5e4">begininners</a></li>
<li><a href="#org34c068a"><span class="todo TODO">TODO</span> yield</a></li>
</ul>
</li>
<li><a href="#org1e1eb6a">GENERAL interview</a></li>
<li><a href="#org184011b">Online Learning Resoures:</a></li>
<li><a href="#orgde35043">Question</a>
<ul>
<li><a href="#org2c7cf86">assigment in python</a></li>
<li><a href="#orgcc1b1f1">assignment in list(immutable)</a></li>
</ul>
</li>
</ul>
</div>
</div>


<div id="outline-container-orgc2062bb" class="outline-2">
<h2 id="orgc2062bb">Python Introudctio</h2>
<div class="outline-text-2" id="text-orgc2062bb">
</div>
<div id="outline-container-org3d7311e" class="outline-3">
<h3 id="org3d7311e">History:</h3>
<div class="outline-text-3" id="text-org3d7311e">
<p>
Created by Guido Rossum in 1980 is very easy to learn
Python is 
interpreted logic ,
object-oriented, 
high-level programming language 
</p>
</div>
</div>
<div id="outline-container-org61270ca" class="outline-3">
<h3 id="org61270ca">Who uses python</h3>
<div class="outline-text-3" id="text-org61270ca">
<p>
youtubbe,dropbox,raspberry netfilx,nsa,nasa,bittorrent
</p>
</div>
</div>
<div id="outline-container-org8c8c118" class="outline-3">
<h3 id="org8c8c118">Features :</h3>
<div class="outline-text-3" id="text-org8c8c118">
<ul class="org-ul">
<li>Simple and Easy to learn</li>
<li>High Level Language</li>
<li>Portable: windows,linux,ios</li>
<li>Support differetn Programming Paradigm (procedure-oriented / object-oriented)</li>
<li>Extensible</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org616f1d6" class="outline-2">
<h2 id="org616f1d6"><span class="todo TODO">TODO</span> Installation</h2>
<div class="outline-text-2" id="text-org616f1d6">
</div>
<div id="outline-container-org5a55654" class="outline-3">
<h3 id="org5a55654"><span class="todo TODO">TODO</span> Pip Installation</h3>
<div class="outline-text-3" id="text-org5a55654">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">pip package manger for py </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">pip2 is use for py2</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">pip3 is use for py3</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">install package by pip</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">remove package by pip</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgb0b67cd" class="outline-3">
<h3 id="orgb0b67cd">Conda</h3>
<div class="outline-text-3" id="text-orgb0b67cd">
<div class="org-src-container">
<pre class="src src-sh">conda install 
conda remove &lt;&gt;
conda env list
conda create --name &lt;virtual_env_name&gt; &lt;py modules&gt;
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To activate environment</span>
<span style="color: #3a81c3;">source</span> activate my_project_env
<span style="color: #3a81c3;">source</span> deactive my_project_env
conda remove --name opencv-env --all
conda env create -f enironment.yaml
</pre>
</div>
</div>
</div>
<div id="outline-container-org8dbd289" class="outline-3">
<h3 id="org8dbd289"><span class="todo TODO">TODO</span> Virtural Environment</h3>
<div class="outline-text-3" id="text-org8dbd289">
<p>
Consider math with is global module install in python 
</p>

<p>
If install new package math3.0 then it will mess up old project using math 2.0
</p>

<p>
What Virtural Environment does it will make a
It will allow us to install all our dependencies in local folder(own hub) not effect gobal module (os)
</p>

<div class="org-src-container">
<pre class="src src-sh"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">installing virtualen</span>
sudo pip install virtualev

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">creating a virtual environment</span>
virtualev projectName

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">activate the virtual environement</span>
<span style="color: #3a81c3;">cd</span> projectName
<span style="color: #3a81c3;">source</span> /source/bin/activate

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">which python  we are running (where is the source file of python)</span>
which pip

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">installing package beautifuls</span>
pip list 
pip install beautifulsoup pytz
pip install numpy panda

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">unactivate </span>
deactivate  

<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">pip to install all of the packages in this file using the -r flag:</span>
pip install -r requirements.txt

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">virtual env for  with python version 2.6</span>
virtualenv  -p /usr/bin/python2.6 py26_env
source/bin/activate
which python


</pre>
</div>


<p>
Consider you are using math 2.0  module in one project and 
later on  new features are added in math 3.0 which need in new projects
</p>
</div>
</div>
<div id="outline-container-org2a9c194" class="outline-3">
<h3 id="org2a9c194">Conda virtual env</h3>
<div class="outline-text-3" id="text-org2a9c194">
<div class="org-src-container">
<pre class="src src-sh">python
conda env list
conda create --name &lt;virtual_env_name&gt; &lt;py modules&gt;
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To activate environment</span>
<span style="color: #3a81c3;">source</span> activate my_project_env
<span style="color: #3a81c3;">source</span> deactive my_project_env
conda remove --name opencv-env --all
conda env create -f enironment.yaml

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">EX:</span>
conda create --name my_app python 2.7 flask sqlalchemy
activate my_app
pip list
which python
activate   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">source activate </span>
decativate <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">source deactivate</span>


conda env list

conda remove --name my_app

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">CONDA Virtual Enviroment set :  ENVIROMENT VARIBLE for different project</span>


</pre>
</div>
</div>
</div>

<div id="outline-container-org0f5b03d" class="outline-3">
<h3 id="org0f5b03d"><span class="todo TODO">TODO</span> Requirement file</h3>
</div>
<div id="outline-container-org99873b8" class="outline-3">
<h3 id="org99873b8">Jupyter</h3>
<div class="outline-text-3" id="text-org99873b8">
<div class="org-src-container">
<pre class="src src-sh"><span style="color: #4e3163;">!</span> pip list <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">to run shell cmd also know as line magics</span>

%lsmagiic   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">line magic</span>

%pwd

%ls -la

%matplotlib inline

%%HTML
You can be add youtube videos to your jupyter notebook


%%SVG

%%timeit
<span style="color: #3a81c3; font-weight: bold;">time for</span> execute block


</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org3fd5893" class="outline-2">
<h2 id="org3fd5893">Operators in python:</h2>
<div class="outline-text-2" id="text-org3fd5893">
</div>
<div id="outline-container-org45e215d" class="outline-3">
<h3 id="org45e215d">1) Arthimetic operator</h3>
<div class="outline-text-3" id="text-org45e215d">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">+</td>
<td class="org-left">addition</td>
</tr>

<tr>
<td class="org-left">-</td>
<td class="org-left">substration</td>
</tr>

<tr>
<td class="org-left">*</td>
<td class="org-left">mulitplication</td>
</tr>

<tr>
<td class="org-left">//</td>
<td class="org-left">quoficient (float value)</td>
</tr>

<tr>
<td class="org-left">%</td>
<td class="org-left">remainder</td>
</tr>

<tr>
<td class="org-left">**</td>
<td class="org-left">power</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">############################</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Arthimetic Operator</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">###########################</span>
<span style="color: #715ab1;">a</span>= 12
<span style="color: #715ab1;">b</span>=3
a+b     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 15</span>
+a-b    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 9</span>
a*b     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 36</span>
a**b    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; (12)^3 =1728</span>
a/b     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 4.0 floating point</span>
a//b    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 4 int</span>
a%b     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 0</span>
a+b/3-4*12      <span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; -35.0</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Order of exprssion</span>
3 * 2 +1
3 *<span style="color: #3a81c3;">(</span>2 +1<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">increment</span>

<span style="color: #715ab1;">num</span> =1
<span style="color: #715ab1;">num</span> = num +1
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Or</span>
<span style="color: #715ab1;">num</span> +=1
<span style="color: #715ab1;">num</span> *=10

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">abs</span><span style="color: #6c3163;">(</span>-3<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">round</span><span style="color: #6c3163;">(</span>3.75<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">4</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">round</span><span style="color: #6c3163;">(</span>3.75<span style="color: #6c3163;">)</span>,1<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">3.8</span>

<span style="color: #715ab1;">num_1</span> =3
<span style="color: #715ab1;">num_2</span> =2
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>num_1 &lt;= num_2<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Convert string to numbert</span>

<span style="color: #715ab1;">num_1</span> =  <span style="color: #2d9574;">'100'</span>
<span style="color: #715ab1;">num_2</span> = <span style="color: #2d9574;">'200'</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>num_1 + num_2<span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">100200</span>
<span style="color: #715ab1;">num_1</span> = <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span>num_1<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">num_2</span> = <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span>num_2<span style="color: #3a81c3;">)</span>



</pre>
</div>
</div>
</div>
<div id="outline-container-org4d03814" class="outline-3">
<h3 id="org4d03814">2) Assignment  operator :</h3>
<div class="outline-text-3" id="text-org4d03814">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">=</td>
<td class="org-left">assignment</td>
</tr>

<tr>
<td class="org-left">is</td>
<td class="org-left">data binding</td>
</tr>

<tr>
<td class="org-left">+=</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">-=</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">*=</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">/=</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org772ec84" class="outline-3">
<h3 id="org772ec84">3) Comparison  operator</h3>
<div class="outline-text-3" id="text-org772ec84">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">&gt;</td>
<td class="org-left">less</td>
</tr>

<tr>
<td class="org-left">&lt;</td>
<td class="org-left">greater</td>
</tr>

<tr>
<td class="org-left">&gt;=</td>
<td class="org-left">greater than equal</td>
</tr>

<tr>
<td class="org-left">&lt;=</td>
<td class="org-left">less than equal</td>
</tr>

<tr>
<td class="org-left">==</td>
<td class="org-left">Equal</td>
</tr>

<tr>
<td class="org-left">!=</td>
<td class="org-left">Not Equal</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org14bce67" class="outline-3">
<h3 id="org14bce67">4) Logical  operator</h3>
<div class="outline-text-3" id="text-org14bce67">
<p>
Logiacl Operator wil give output TRUE OR FALSE
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">and</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">or</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">not</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org92aadf9" class="outline-3">
<h3 id="org92aadf9">5) Bitwise  operator</h3>
<div class="outline-text-3" id="text-org92aadf9">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">or</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">and</td>
<td class="org-left">&amp;</td>
</tr>

<tr>
<td class="org-left">xor</td>
<td class="org-left">^</td>
</tr>

<tr>
<td class="org-left">RIGHTSHIFT</td>
<td class="org-left">&gt;&gt;</td>
</tr>

<tr>
<td class="org-left">Leftshift</td>
<td class="org-left">&lt;&lt;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
<div class="org-src-container">
<pre class="src src-python"> 3&gt;&gt;2    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">011 rightshift by 2  000  &gt;   0 </span>
 3&lt;&lt;2    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">011 leftshift  by 2  110  &gt; 12</span>
10 &amp; 11
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">10</span>
8 &amp;11
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">8</span>
8 |11
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">11</span>
8 ^ 11
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">3</span>
3&amp; 11
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">3</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org642eb6a" class="outline-3">
<h3 id="org642eb6a">6) Identity  operator:checks if var is equal</h3>
<div class="outline-text-3" id="text-org642eb6a">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">is</td>
</tr>

<tr>
<td class="org-left">is not</td>
</tr>
</tbody>
</table>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">x</span>=5
x <span style="color: #3a81c3; font-weight: bold;">is</span> 5
x <span style="color: #3a81c3; font-weight: bold;">is</span> <span style="color: #3a81c3; font-weight: bold;">not</span> 5
</pre>
</div>
</div>
</div>
<div id="outline-container-orged26b9f" class="outline-3">
<h3 id="orged26b9f">7) Membership  operator : checks if a element belongs to (set, list,tubles,string,dict)</h3>
<div class="outline-text-3" id="text-orged26b9f">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">in</td>
</tr>

<tr>
<td class="org-left">not in</td>
</tr>
</tbody>
</table>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">x</span>= <span style="color: #3a81c3;">[</span>1,2,3,4,5<span style="color: #3a81c3;">]</span>
3 <span style="color: #3a81c3; font-weight: bold;">in</span> x
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org7e95f96" class="outline-2">
<h2 id="org7e95f96">Data types</h2>
<div class="outline-text-2" id="text-org7e95f96">
</div>
<div id="outline-container-org2e3d2b0" class="outline-3">
<h3 id="org2e3d2b0">Intro</h3>
<div class="outline-text-3" id="text-org2e3d2b0">
<p>
Data types :
</p>
<ul class="org-ul">
<li>Immutalbe (Note : Can't changes the value')
<ul class="org-ul">
<li>Number 
<ul class="org-ul">
<li>Integers eg 1,4,5,</li>
<li>Float    eg 3.5,3.1246,</li>
<li>Complex  eg 3+2j, 4+5j</li>
</ul></li>
<li>Strings</li>
<li><p>
Tuples   : can't  modify
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">tuple_1</span> = <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'History'</span>, <span style="color: #2d9574;">'Math'</span>, <span style="color: #2d9574;">'Physics'</span>, <span style="color: #2d9574;">'CompSci'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">tuple_2</span> = tuple_1

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tuble_1<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tuble_2<span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">tuple_1</span><span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">]</span> = <span style="color: #2d9574;">'Art'</span>                    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Error because tubles are immutable</span>
</pre>
</div></li>
</ul></li>
<li>Mutalbe
<ul class="org-ul">
<li>List         : []</li>
<li>Dictonary    :</li>
<li><p>
Set: values  : UNORDERD and N0-DUBLICATESS
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">cs_course</span> = <span style="color: #3a81c3;">{}</span>
</pre>
</div></li>
</ul></li>
</ul>
</div>
<div id="outline-container-orga876030" class="outline-4">
<h4 id="orga876030">immutable vs mutable</h4>
<div class="outline-text-4" id="text-orga876030">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">list_1</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'History'</span>, <span style="color: #2d9574;">'Math'</span>, <span style="color: #2d9574;">'Physics'</span>, <span style="color: #2d9574;">'CompSci'</span><span style="color: #3a81c3;">]</span>

<span style="color: #715ab1;">list_2</span> = list_1

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tuple_1<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tuple_2<span style="color: #3a81c3;">)</span>            <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; Both are same </span>


<span style="color: #715ab1;">list_1</span><span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">]</span>= <span style="color: #2d9574;">'Art'</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>list_1<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>list_2<span style="color: #3a81c3;">)</span>            <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; Change and list_1 change in Change in list_2</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Immutalbe means : both are same mutable obj</span>


</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org8fff780" class="outline-3">
<h3 id="org8fff780">Number</h3>
</div>
<div id="outline-container-orgdc61afc" class="outline-3">
<h3 id="orgdc61afc">Integers eg 1,4,5,</h3>
</div>
<div id="outline-container-orgf4bd205" class="outline-3">
<h3 id="orgf4bd205">Float    eg 3.5,3.1246,</h3>
</div>
<div id="outline-container-org6c70148" class="outline-3">
<h3 id="org6c70148">Complex  eg 3+2j, 4+5j</h3>
</div>
<div id="outline-container-org427e840" class="outline-3">
<h3 id="org427e840">String</h3>
<div class="outline-text-3" id="text-org427e840">
</div>
<div id="outline-container-org3e3f93d" class="outline-4">
<h4 id="org3e3f93d">defination</h4>
<div class="outline-text-4" id="text-org3e3f93d">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">define by quote</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">"sdfsdfdff"</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">'asdfsdf'</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">"""asdfd"""</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">'''sdfasdfs'''</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
<ul class="org-ul">
<li><a id="org42d84b1"></a>Quotes<br />
<div class="outline-text-5" id="text-org42d84b1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">####################################################</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Text contain " (double quote) or '(single quote)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">####################################################</span>

<span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Using double quote"</span><span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; Using double quote</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Using single quote'</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; Using double quote</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To use " &amp; ' in printing text we can use alternatively</span>

<span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">" It's working "</span><span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; It's working</span>
<span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'He says " It is working "'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; He says "It is working"</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Using both " and ' in same statement</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'He says " It\'s is working "'</span><span style="color: #3a81c3;">)</span>       <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; He says " It's is working"</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"He says \" It's is working \" "</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; He says " It's is working"</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Or we can use triple quote</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"""He says " It's is working" """</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; He says " It's is working"</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'''He says " It's is working" '''</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; He says " It's is working"</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org98ab97e" class="outline-4">
<h4 id="org98ab97e">Operations</h4>
<div class="outline-text-4" id="text-org98ab97e">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Operations</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Concatenation</td>
<td class="org-left">str1+str2</td>
</tr>

<tr>
<td class="org-left">Repetition</td>
<td class="org-left">str1*3</td>
</tr>

<tr>
<td class="org-left">Slicing</td>
<td class="org-left">str1[2:7]</td>
</tr>

<tr>
<td class="org-left">Indexing</td>
<td class="org-left">str1[-1]</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgf736979" class="outline-4">
<h4 id="orgf736979">Method</h4>
<div class="outline-text-4" id="text-orgf736979">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Method</th>
<th scope="col" class="org-left">str1 = Edureka</th>
<th scope="col" class="org-left">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">find</td>
<td class="org-left">str1.find('ureka')</td>
<td class="org-left">2</td>
</tr>

<tr>
<td class="org-left">repalce</td>
<td class="org-left">str1.repalce("Ed","E")</td>
<td class="org-left">'Eureka'</td>
</tr>

<tr>
<td class="org-left">count</td>
<td class="org-left">str1.count('e',beg=0,end=6)</td>
<td class="org-left">2</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">upper Case</td>
<td class="org-left">str1.upper()</td>
<td class="org-left">"EDUREKA</td>
</tr>

<tr>
<td class="org-left">lower Case</td>
<td class="org-left">str1.lower()</td>
<td class="org-left">"edureka"</td>
</tr>

<tr>
<td class="org-left">Captialize</td>
<td class="org-left">' hello users: '.title()</td>
<td class="org-left">' Hello Users: '</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">len</td>
<td class="org-left">str1.len()</td>
<td class="org-left">7</td>
</tr>

<tr>
<td class="org-left">max</td>
<td class="org-left">str1.max()</td>
<td class="org-left">u             (higher alpha order)</td>
</tr>

<tr>
<td class="org-left">min</td>
<td class="org-left">str1.min()</td>
<td class="org-left">a</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">lstrip</td>
<td class="org-left">' hello users: '.lstrip()</td>
<td class="org-left">'hello users: '</td>
</tr>

<tr>
<td class="org-left">rstrip</td>
<td class="org-left">' hello users: '.rstrip()</td>
<td class="org-left">' hello users:'</td>
</tr>

<tr>
<td class="org-left">strip</td>
<td class="org-left">' hello users: '.strip()</td>
<td class="org-left">"hello users:"</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">center aline(justify)</td>
<td class="org-left">'hello user'.center(15,'*')</td>
<td class="org-left"><b><b>Hello users</b></b></td>
</tr>

<tr>
<td class="org-left">left aline</td>
<td class="org-left">'hello user'.ljust(15,'*')</td>
<td class="org-left">Hello users****</td>
</tr>

<tr>
<td class="org-left">right aline(justify)</td>
<td class="org-left">'hello user'.right(15,'*')</td>
<td class="org-left">****Hello users</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">split(str2list)</td>
<td class="org-left">l1 =  str1.split('.')</td>
<td class="org-left">l1 = ["E","d","u","r","e","k","a"]</td>
</tr>

<tr>
<td class="org-left">join(list)</td>
<td class="org-left">','.join(l1)</td>
<td class="org-left">'E,d,u,r,e,k,a'</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">'-'.join(l1)</td>
<td class="org-left">'E-d-u-r-e-k-a'</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">isalpha()</td>
<td class="org-left">str1.isaplha()</td>
<td class="org-left">True</td>
</tr>

<tr>
<td class="org-left">isalnum()</td>
<td class="org-left">if atleast 1char is num and 1char in alpha</td>
<td class="org-left">True</td>
</tr>

<tr>
<td class="org-left">isalpha()</td>
<td class="org-left">if all char are alpha not dig,space,special symbol</td>
<td class="org-left">True</td>
</tr>

<tr>
<td class="org-left">isdigit()</td>
<td class="org-left">if all char are dig</td>
<td class="org-left">True</td>
</tr>

<tr>
<td class="org-left">islower()</td>
<td class="org-left">if char are lower</td>
<td class="org-left">True</td>
</tr>

<tr>
<td class="org-left">isupper()</td>
<td class="org-left">if char are upper</td>
<td class="org-left">True</td>
</tr>

<tr>
<td class="org-left">isnumeric()</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">True</td>
</tr>

<tr>
<td class="org-left">isspace()</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">istitle()</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org30eb573" class="outline-4">
<h4 id="org30eb573">String Encoding Function:</h4>
<div class="outline-text-4" id="text-org30eb573">
<p>
There are two functions decode(),encode() functions to include this functions we need to <code>base64 module</code> which has all function required for converting raw binary data to str vic versa
</p>
</div>
<ul class="org-ul">
<li><a id="org585eef0"></a>defination<br />
<div class="outline-text-5" id="text-org585eef0">
<div class="org-src-container">
<pre class="src src-python">decode<span style="color: #3a81c3;">(</span>encoding=<span style="color: #2d9574;">'UTF-8'</span>,errors=<span style="color: #2d9574;">'strict'</span><span style="color: #3a81c3;">)</span>
encode<span style="color: #3a81c3;">(</span>encoding=<span style="color: #2d9574;">'UTF-8'</span>,errors=<span style="color: #2d9574;">'strict'</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>

<li><a id="org2cd8d49"></a>Eg<br />
<div class="outline-text-5" id="text-org2cd8d49">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> base64
<span style="color: #3a81c3;">str</span> = <span style="color: #2d9574;">'This is string example'</span>
<span style="color: #3a81c3;">str</span> = base64.b64<span style="color: #3a81c3;">(</span>Str.encode<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'utf-8'</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Ecoded String:"</span>,stre<span style="color: #3a81c3;">)</span>                    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">it is a binary formate</span>
<span style="color: #3a81c3;">str</span> = base64.b64<span style="color: #3a81c3;">(</span>Str<span style="color: #3a81c3;">)</span>.decode<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'utf-8'</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Decode String: "</span>,strd<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div id="outline-container-orgb2a8236" class="outline-3">
<h3 id="orgb2a8236">String Formating</h3>
<div class="outline-text-3" id="text-orgb2a8236">
</div>
<div id="outline-container-org88d47ff" class="outline-4">
<h4 id="org88d47ff"><span class="todo TODO">TODO</span> Place Holder(f string or Replace files)</h4>
</div>
<div id="outline-container-orga9ecec6" class="outline-4">
<h4 id="orga9ecec6">Replacement Field(Place Holders)</h4>
<div class="outline-text-4" id="text-orga9ecec6">
</div>
<ul class="org-ul">
<li><a id="orgd8dcd9b"></a>String<br />
<div class="outline-text-5" id="text-orgd8dcd9b">
<p>
Formating Vs Replacement Field(Paleholders{})
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">person</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span>: <span style="color: #2d9574;">'Jenn'</span>, <span style="color: #2d9574;">'age'</span>:23<span style="color: #3a81c3;">}</span>

<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'My name is '</span>+person<span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'name'</span><span style="color: #3a81c3;">]</span> + <span style="color: #2d9574;">'and I am '</span>+<span style="color: #3a81c3;">str</span><span style="color: #3a81c3;">(</span>person<span style="color: #6c3163;">[</span><span style="color: #2d9574;">'age'</span><span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>+ <span style="color: #2d9574;">'year old.'</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>                               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">above is NOT READABLE, EASY WRITABLE</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Using Placeholder</span>
<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'My name is {} and I am {} year old.'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>person <span style="color: #6c3163;">[</span><span style="color: #2d9574;">'name'</span><span style="color: #6c3163;">]</span>, person<span style="color: #6c3163;">[</span><span style="color: #2d9574;">'age'</span><span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
<li><a id="org0beccbd"></a>Passing(assing place holders) inorder, numbers refeance, list, dic members, class attribues<br />
<div class="outline-text-5" id="text-org0beccbd">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">person</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span>: <span style="color: #2d9574;">'Jenn'</span>, <span style="color: #2d9574;">'age'</span>:23<span style="color: #3a81c3;">}</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Dict passing inorder</span>
<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'My name is {} and I am {} year old.'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>person <span style="color: #6c3163;">[</span><span style="color: #2d9574;">'name'</span><span style="color: #6c3163;">]</span>, person<span style="color: #6c3163;">[</span><span style="color: #2d9574;">'age'</span><span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Dict  passing by numbers{0},{1}...etc</span>
<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'My name is {0[name]} and I am {1[age]} year old.'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>person, person<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">passing by dic only values</span>
<span style="color: #715ab1;">person</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span>: <span style="color: #2d9574;">'Jenn'</span>, <span style="color: #2d9574;">'age'</span>:23<span style="color: #3a81c3;">}</span>
<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'My name is {0[name]} and I am {1[age]} year old.'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>person<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">place holders having keywords (basically used in dic)</span>
<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'My name is {name} and I am {age} year old.'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>name =<span style="color: #2d9574;">'Jack'</span>, age = <span style="color: #2d9574;">'30'</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">passing in dic key and values</span>
person = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span>: <span style="color: #2d9574;">'Jenn'</span>, <span style="color: #2d9574;">'age'</span>:23<span style="color: #3a81c3;">}</span>
sentence = <span style="color: #2d9574;">'My name is {name} and I am {age} year old.'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>**person<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">List passing in list members</span>
l1 = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Jenn'</span>,23<span style="color: #3a81c3;">]</span>
sentence = <span style="color: #2d9574;">'My name is {0[0]} and I am {0[1]} year old.'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>person<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>l1<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">passing class attributes</span>

<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Person</span><span style="color: #3a81c3;">()</span>:
  <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>, name, age<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3; font-weight: bold;">self</span>.name = name
    <span style="color: #3a81c3; font-weight: bold;">self</span>.age = age

p1 = Person<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Jack'</span>,<span style="color: #2d9574;">'33'</span><span style="color: #3a81c3;">)</span>
sentence = <span style="color: #2d9574;">'My name is {0.name} and I am {0.age} year old.'</span>.formate<span style="color: #3a81c3;">(</span>p1<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
<li><a id="org1b05cee"></a>Numbers (Padding, Decimals(precession), Comma)<br />
<div class="outline-text-5" id="text-org1b05cee">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Padding</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> i <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">range</span> <span style="color: #3a81c3;">(</span>1,11<span style="color: #3a81c3;">)</span>:
  <span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'This value is {:03}'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>i<span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">The value is 001</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># decimals(pression)</span>

<span style="color: #715ab1;">pi</span> = 3.1415965

<span style="color: #715ab1;">sendence</span> = <span style="color: #2d9574;">'Pi is equal to {:.3f}'</span>.formate<span style="color: #3a81c3;">(</span>pi<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>pi<span style="color: #3a81c3;">)</span>                        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">3.142</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># comma seperator</span>

<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'1 MB is equal to {:,.2f} bytes.'</span>fomate<span style="color: #3a81c3;">(</span>1000**2<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">1MB is equal to 1,000,000.00 bytes</span>

</pre>
</div>
</div>
</li>
<li><a id="org511e3ab"></a>Date String format<br />
<div class="outline-text-5" id="text-org511e3ab">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Date fomate link https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior</span>
<span style="color: #3a81c3; font-weight: bold;">import</span> date time
<span style="color: #715ab1;">my_date</span> = datetime.date<span style="color: #3a81c3;">(</span>2016,9,24,12,45<span style="color: #3a81c3;">)</span> 


<span style="color: #715ab1;">sentence</span> =<span style="color: #2d9574;">'{:%B %d, %Y}'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>my_date<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt; September 24, 2016</span>

<span style="color: #715ab1;">sentence</span> =<span style="color: #2d9574;">'{0:%B %d, %Y} fell on a {0:%A} and was the {0:%j} day of the years.'</span>.fomat<span style="color: #3a81c3;">(</span>my_date<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt; September 24, 2016 fell on a Saturday and was the 268 day of the years</span>
</pre>
</div>
</div>
</li>
<li><a id="orgf6efb15"></a>Example1<br />
<div class="outline-text-5" id="text-orgf6efb15">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">tag</span> = <span style="color: #2d9574;">'h1'</span>
<span style="color: #715ab1;">text</span> = <span style="color: #2d9574;">'This is a headerline'</span>
<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'&lt;{0}&gt; &lt;{1} &lt;/{0}'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>tag,text<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>             <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; &lt;h1&gt;This is a headerline&lt;/h1&gt;</span>
</pre>
</div>
</div>
</li>

<li><a id="org5d7d2d4"></a>Example 2<br />
<div class="outline-text-5" id="text-org5d7d2d4">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">age</span> =24
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"My age is {0} years"</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>age<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>                                                                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; My age is 24 years</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"I am {0} years, {1} mounts, {2} days old"</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>28,4,19<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; I am 28 years, 4 mounts, 19 days old</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"""</span>
<span style="color: #2d9574;"> January     :{2} days</span>
<span style="color: #2d9574;"> February    :{0} days</span>
<span style="color: #2d9574;"> March       :{1} days</span>
<span style="color: #2d9574;"> April       :{1} days</span>
<span style="color: #2d9574;"> May         :{2} days</span>
<span style="color: #2d9574;"> June        :{1} days</span>
<span style="color: #2d9574;"> July        :{2} days</span>
<span style="color: #2d9574;"> August      :{2} days</span>
<span style="color: #2d9574;"> September   :{1} days</span>
<span style="color: #2d9574;"> October     :{2} days</span>
<span style="color: #2d9574;"> November    :{1} days</span>
<span style="color: #2d9574;"> December    :{2} days"""</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>28, 30, 31<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org3bb86f8" class="outline-4">
<h4 id="org3bb86f8">R String</h4>
<div class="outline-text-4" id="text-org3bb86f8">
<p>
R string : is a raw string: the escape sequence are negleted   
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\tTab'</span><span style="color: #3a81c3;">)</span>                          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; \tTab      </span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org104d7ea" class="outline-4">
<h4 id="org104d7ea">F String {py3.6}</h4>
<div class="outline-text-4" id="text-org104d7ea">
<p>
make string formate simple as possible
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">greeting</span> = <span style="color: #2d9574;">'Hello'</span>
<span style="color: #715ab1;">name</span> = <span style="color: #2d9574;">'karthik</span>
<span style="color: #2d9574;">message = f'</span><span style="color: #3a81c3;">{</span>greeting<span style="color: #3a81c3;">}</span>,  <span style="color: #3a81c3;">{</span>name.upper<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">}</span>.Welcome! <span style="color: #2d9574;">'</span>

<span style="color: #2d9574;">print(dir(name))</span>
<span style="color: #2d9574;">print(help (str))</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org1709ab8" class="outline-4">
<h4 id="org1709ab8">Print</h4>
<div class="outline-text-4" id="text-org1709ab8">
<p>
convert convert the expressions you pass into a string and writes the result to standard output device(stdout in sys(sys.stdout and sys.stdin))
</p>
</div>
<ul class="org-ul">
<li><a id="orgf49af46"></a>String Formating<br />
<div class="outline-text-5" id="text-orgf49af46">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Foramt Symbol</th>
<th scope="col" class="org-left">Conversion</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">%c</td>
<td class="org-left">char</td>
</tr>

<tr>
<td class="org-left">%s</td>
<td class="org-left">string</td>
</tr>

<tr>
<td class="org-left">%i</td>
<td class="org-left">signed decimal int</td>
</tr>

<tr>
<td class="org-left">%d</td>
<td class="org-left">signed decimal int</td>
</tr>

<tr>
<td class="org-left">%u</td>
<td class="org-left">unsigned decimal int</td>
</tr>

<tr>
<td class="org-left">%o</td>
<td class="org-left">octal int</td>
</tr>

<tr>
<td class="org-left">%x</td>
<td class="org-left">hexa decimal int</td>
</tr>

<tr>
<td class="org-left">%e</td>
<td class="org-left">exponential</td>
</tr>

<tr>
<td class="org-left">%f</td>
<td class="org-left">floating point real no</td>
</tr>

<tr>
<td class="org-left">%g</td>
<td class="org-left">shorter %f and %e</td>
</tr>
</tbody>
</table>


<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">#############################</span><span style="color: #2aa1ae; background-color: #ecf3ec;">3#</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">String Formating</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">###############################</span>

<span style="color: #715ab1;">age</span> = 24
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"My age is "</span> + <span style="color: #3a81c3;">str</span><span style="color: #6c3163;">(</span>age<span style="color: #6c3163;">)</span> + <span style="color: #2d9574;">"year"</span><span style="color: #3a81c3;">)</span>                         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; My age is 24 year</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"My age is %d years using string formationg "</span> %age<span style="color: #3a81c3;">)</span>       <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; My age is 24 years</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> i <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">range</span><span style="color: #3a81c3;">(</span>1, 12<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"No. %2d square is %4d and cubed is %4d"</span> %<span style="color: #6c3163;">(</span>i, i ** 2, i ** 3<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; %d %2d, %4d  rightspace before var respectively #</span>
</pre>
</div>
</div>
</li>
<li><a id="org6c80488"></a>Right Spacing &amp; Precision<br />
<ul class="org-ul">
<li><a id="org51e6af8"></a>Right Spacing Eg 0<br />
<div class="outline-text-6" id="text-org51e6af8">
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %11f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">11 = 03+1+1+06        &gt;&gt;&gt; Pi value is appox    3.142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %10f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">10 = 02+1+1+06        &gt;&gt;&gt; Pi value is appox   3.142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %9f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>                  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">09 = 01+1+1+06        &gt;&gt;&gt; Pi value is appox  3.142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %8f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">09 = 00+1+1+06        &gt;&gt;&gt; Pi value is appox 3.142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %7f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">09 = 00+1+1+06        &gt;&gt;&gt; Pi value is appox 3.142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %6f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">09 = 00+1+1+06        &gt;&gt;&gt; Pi value is appox 3.142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"         Conclusion :By Default Precission is 6digits"</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
<li><a id="orgdfe0569"></a>Righ Spacing Eg 1<br />
<div class="outline-text-6" id="text-orgdfe0569">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">for</span> i <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">range</span><span style="color: #3a81c3;">(</span>1, 12<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"No. %2d square is %4d and cubed is %4d"</span> %<span style="color: #6c3163;">(</span>i, i ** 2, i ** 3<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; %d %2d, %4d  rightspace before var respectively </span>
</pre>
</div>
</div>
</li>

<li><a id="orgf2d7653"></a>Right Spacing Eg2<br />
<div class="outline-text-6" id="text-orgf2d7653">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">###########################################################</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">%12.50f &gt;&gt; If 12&gt; 50 ==&gt;size = 12  (RightSpace.s + Number.s + Point.s +  DecimalNAumber(precision).s</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">#############################################################</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#                                                      </span><span style="color: #2aa1ae; background-color: #ecf3ec;">S = RS+N+P+DN</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"\n"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>                 <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 04+1+1+06        &gt;&gt;&gt; Pi value is appox     3.142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"\n"</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"         Precision is varied %12.[01-10]f and result is below "</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.1f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 09+1+1+01        &gt;&gt;&gt; Pi value is appox          3.1</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.2f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 08+1+1+02        &gt;&gt;&gt; Pi value is appox         3.14</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.3f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 07+1+1+03        &gt;&gt;&gt; Pi value is appox        3.143</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.4f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 06+1+1+04        &gt;&gt;&gt; Pi value is appox       3.1429</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.5f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 05+1+1+05        &gt;&gt;&gt; Pi value is appox      3.14286</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.6f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 04+1+1+06        &gt;&gt;&gt; Pi value is appox     3.142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.7f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 03+1+1+07        &gt;&gt;&gt; Pi value is appox    3.1428571</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.8f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 02+1+1+08        &gt;&gt;&gt; Pi value is appox   3.14285714</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.9f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 01+1+1+09        &gt;&gt;&gt; Pi value is appox  3.142857143</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.10f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">12 = 00+1+1+10        &gt;&gt;&gt; Pi value is appox 3.1428571429</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"         Conclusion :%12f used for left indexing by 12 spaces only if size No. is less than 12"</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</li>

<li><a id="org2577d71"></a>Precision<br />
<div class="outline-text-6" id="text-org2577d71">
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"         Precission &gt;  Left Indexing then  "</span><span style="color: #3a81c3;">)</span>


<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.11f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">13 = 00+1+1+11        &gt;&gt;&gt; Pi value is appox 3.14285714286</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.12f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">14 = 00+1+1+12        &gt;&gt;&gt; Pi value is appox 3.142857142857</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.13f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">15 = 00+1+1+13        &gt;&gt;&gt; Pi value is appox 3.1428571428571</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.14f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">16 = 00+1+1+14        &gt;&gt;&gt; Pi value is appox 3.14285714285714</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.15f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">17 = 00+1+1+15        &gt;&gt;&gt; Pi value is appox 3.142857142857143</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.16f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">18 = 00+1+1+16        &gt;&gt;&gt; Pi value is appox 3.1428571428571428</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.17f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">19 = 00+1+1+17        &gt;&gt;&gt; Pi value is appox 3.14285714285714279</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.18f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">20 = 00+1+1+18        &gt;&gt;&gt; Pi value is appox 3.142857142857142794</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.19f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">21 = 00+1+1+19        &gt;&gt;&gt; Pi value is appox 3.1428571428571427937</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.20f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">22 = 00+1+1+20        &gt;&gt;&gt; Pi value is appox 3.14285714285714279370</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.30f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">23 = 00+1+1+30        &gt;&gt;&gt; Pi value is appox 3.142857142857142793701541449991</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.40f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">24 = 00+1+1+40        &gt;&gt;&gt; Pi value is appox 3.1428571428571427937015414499910548329353</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Pi value is appox %12.50f"</span> %<span style="color: #6c3163;">(</span>22/7<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">25 = 00+1+1+50        &gt;&gt;&gt; Pi value is appox 3.14285714285714279370154144999105483293533325195312</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"         Conclusion :If precision &gt; Right space then no right shift is done"</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</li>
</ul>
</div>
<div id="outline-container-org4ae79f1" class="outline-4">
<h4 id="org4ae79f1">EVAL : evaluate the string</h4>
<div class="outline-text-4" id="text-org4ae79f1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">a</span> = <span style="color: #2d9574;">'3+4+6'</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">eval</span><span style="color: #6c3163;">(</span>a<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">eval</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'my_list = [12,12,13,54]'</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_list<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgb84ae6b" class="outline-3">
<h3 id="orgb84ae6b">Tubles</h3>
<div class="outline-text-3" id="text-orgb84ae6b">
</div>
<div id="outline-container-org9bc61da" class="outline-4">
<h4 id="org9bc61da">defination</h4>
<div class="outline-text-4" id="text-org9bc61da">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">tuble1</span> = <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Neel"</span>,<span style="color: #2d9574;">"raj"</span>,<span style="color: #2d9574;">"sandeep"</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org5118a36" class="outline-4">
<h4 id="org5118a36">Operations</h4>
<div class="outline-text-4" id="text-org5118a36">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Operations</th>
<th scope="col" class="org-left">tup1=('a') tup2=('b')</th>
<th scope="col" class="org-left">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Concatenation</td>
<td class="org-left">tup1+tup2</td>
<td class="org-left">('a','b')</td>
</tr>

<tr>
<td class="org-left">Repetition</td>
<td class="org-left">tup1*3</td>
<td class="org-left">('a','a','a')</td>
</tr>

<tr>
<td class="org-left">Slicing</td>
<td class="org-left">t= ('a','b','c'),t[1:2]</td>
<td class="org-left">('b','c')</td>
</tr>

<tr>
<td class="org-left">Indexing</td>
<td class="org-left">t[0]</td>
<td class="org-left">'a'</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-org2762aab" class="outline-3">
<h3 id="org2762aab">List</h3>
<div class="outline-text-3" id="text-org2762aab">
</div>
<div id="outline-container-orgb9d2262" class="outline-4">
<h4 id="orgb9d2262">Syntax</h4>
<div class="outline-text-4" id="text-orgb9d2262">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">List iniciallization</span>
<span style="color: #715ab1;">list_1</span> = <span style="color: #3a81c3;">[]</span>                         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">empty list</span>
<span style="color: #715ab1;">list_2</span> = <span style="color: #3a81c3;">list</span><span style="color: #3a81c3;">()</span>                     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">empty list</span>
<span style="color: #715ab1;">mylist</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">"a"</span>, <span style="color: #2d9574;">"b"</span>,<span style="color: #2d9574;">"c"</span>,<span style="color: #2d9574;">"d"</span><span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">mylist</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Edureka'</span>,2.345,<span style="color: #2d9574;">'Python'</span><span style="color: #3a81c3;">]</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">different data type</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org0019c91" class="outline-4">
<h4 id="org0019c91">Operations</h4>
<div class="outline-text-4" id="text-org0019c91">
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Indexing </span>
<span style="color: #715ab1;">my_list</span> = <span style="color: #3a81c3;">[</span>0, 1, 2, 3, 4, 5, 6, 7, 8, 9<span style="color: #3a81c3;">]</span>
           0, 1, 2, 3, 4, 5, 6, 7, 8, 9
         -10,-9,-8,-7,-6,-5,-4,-3,-2,-1


<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>-10<span style="color: #3a81c3;">]</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orged9b4bd" class="outline-4">
<h4 id="orged9b4bd">Slicing</h4>
<div class="outline-text-4" id="text-orged9b4bd">
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">#  Slicing</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">list[start: end:step] and end is not included </span>
my_list

<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>3:8<span style="color: #3a81c3;">]</span>            <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[3, 4, 5, 6, 7]</span>
<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>-7:-2<span style="color: #3a81c3;">]</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[3, 4, 5, 6, 7]</span>

<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>1:-2<span style="color: #3a81c3;">]</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[1, ,2, 3, 4, 5, 6, 7]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">End is not include </span>

<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>1:9<span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>1:<span style="color: #3a81c3;">]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">step : to skip </span>
<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>::2<span style="color: #3a81c3;">]</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[0, 2, 4, 6, 8]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Reverse list</span>

<span style="color: #3a81c3;">print</span> my_list<span style="color: #3a81c3;">[</span>::-1<span style="color: #3a81c3;">]</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[9, 8, 7, 6, 5, 4, 3, 2, 1] </span>

</pre>
</div>

<p>
Try  slicing url into : top level domain, url without <a href="http://">http://</a>
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">url</span> = http://corems.com

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Get top level domain</span>

<span style="color: #3a81c3;">print</span> sample_url<span style="color: #3a81c3;">[</span>-4:<span style="color: #3a81c3;">]</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; .com</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Print url without http:// </span>

<span style="color: #3a81c3;">print</span> sample_url<span style="color: #3a81c3;">[</span>7: <span style="color: #3a81c3;">]</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; corems</span>


</pre>
</div>
</div>
</div>

<div id="outline-container-orgbb2fda9" class="outline-4">
<h4 id="orgbb2fda9">Sorted vs list.sorted</h4>
<div class="outline-text-4" id="text-orgbb2fda9">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">l1</span>= <span style="color: #3a81c3;">[</span>9, 1, 3, 2, 4, 5, 6, 7, 8<span style="color: #3a81c3;">]</span>

<span style="color: #715ab1;">s_l1</span> = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span>l1<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Sorted Varible: \t"</span>, s_li<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Original Variable: \t"</span>,li<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[9, 1, 3, 2, 4, 5, 6, 7, 8]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">list.sort</span>

li.sort<span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Original Variable: \t"</span>,li<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>

li.sort<span style="color: #3a81c3;">(</span>reverse = <span style="color: #4e3163;">True</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Original Variable: \t"</span>,li<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[9, 8, 7, 6, 5, 4, 3, 2, 1]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">sorted</span>

tup =  <span style="color: #3a81c3;">(</span>9, 1, 3, 2, 4, 5, 6, 7, 8<span style="color: #3a81c3;">)</span>
s_tup = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span>tup<span style="color: #3a81c3;">)</span>
printe <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Tuple \t'</span>, s_tup<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span>

l1 = <span style="color: #3a81c3;">[</span>-6, -5, -4, 1, 2, 3<span style="color: #3a81c3;">]</span>
s_li = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span>li, key = <span style="color: #3a81c3;">abs</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>s_li<span style="color: #3a81c3;">)</span>                          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[1, 2, 3, -4, -5, -6]</span>

di =<span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span>: <span style="color: #2d9574;">'Corey'</span>, <span style="color: #2d9574;">'job'</span>: <span style="color: #2d9574;">'programming'</span>, <span style="color: #2d9574;">'age'</span>:<span style="color: #2d9574;">'None'</span>, <span style="color: #2d9574;">'os'</span>: <span style="color: #2d9574;">'Mac'</span><span style="color: #3a81c3;">}</span>

s_di = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span>di<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Dict \t'</span>, s_di<span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">['age','job', 'name', 'os']</span>


<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Employee</span><span style="color: #3a81c3;">()</span>:
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>, name, age, salary<span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">self</span>.name = name
        <span style="color: #3a81c3; font-weight: bold;">self</span>.age= age
        <span style="color: #3a81c3; font-weight: bold;">self</span>.salary= salary

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__repr__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">return</span> <span style="color: #2d9574;">'{}, {}, ${}'</span>.formate<span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>.name, <span style="color: #3a81c3; font-weight: bold;">self</span>.age, <span style="color: #3a81c3; font-weight: bold;">self</span>.salary<span style="color: #3a81c3;">)</span>

e1 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Carl'</span>,37,700<span style="color: #3a81c3;">)</span>
e2 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Sarah'</span>,29,800<span style="color: #3a81c3;">)</span>
e3 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'John'</span>,43,900<span style="color: #3a81c3;">)</span>

e_list = <span style="color: #3a81c3;">[</span>e1, e2, e3<span style="color: #3a81c3;">]</span>

s_employees = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span>e_list, key = lamda e:e.name<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>s_employees<span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[('Carl,37,$700'), (John,43,$400), (Sarah, 29, $800)]</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org8093dc3" class="outline-4">
<h4 id="org8093dc3">Operations</h4>
<div class="outline-text-4" id="text-org8093dc3">
<ul class="org-ul">
<li><p>
adaddfasf
lis1 = ['1','b',2.5]
lis2 = ['a','d',4.6]
lis<sub>str</sub> = ['a', 'b', 'c', 'd']
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Operations</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Concatenation</td>
<td class="org-left">lis1 +lis2</td>
<td class="org-left">['1','b',2.5, 'a','d',4.6]</td>
</tr>

<tr>
<td class="org-left">Repetition</td>
<td class="org-left">lis1*3</td>
<td class="org-left">['1','b',2.5, '1','b',2.5,'1','b',2.5]</td>
</tr>

<tr>
<td class="org-left">Slicing</td>
<td class="org-left">lis1[0:4:2]</td>
<td class="org-left">['1',2.5,]</td>
</tr>

<tr>
<td class="org-left">Indexing</td>
<td class="org-left">lis1[0]</td>
<td class="org-left">'1'</td>
</tr>

<tr>
<td class="org-left">delet</td>
<td class="org-left">del list1[0]</td>
<td class="org-left">['b',2.5]</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">del list1</td>
<td class="org-left">[]</td>
</tr>

<tr>
<td class="org-left">Membership in</td>
<td class="org-left">2.5 in list1</td>
<td class="org-left">True</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">Method</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">append</td>
<td class="org-left">list1.append('e')</td>
<td class="org-left">['1','b',2.5,'e']</td>
</tr>

<tr>
<td class="org-left">extend</td>
<td class="org-left">list1.extend(['c','d'])</td>
<td class="org-left">['1','b',2.5,'c','d']</td>
</tr>

<tr>
<td class="org-left">insert</td>
<td class="org-left">list1 .instert(1,'p')</td>
<td class="org-left">['1','p','b',2.5 ]</td>
</tr>

<tr>
<td class="org-left">remove</td>
<td class="org-left">lis1.remove('1')</td>
<td class="org-left">['1','b,2.5,'a','d',4.6]</td>
</tr>

<tr>
<td class="org-left">pop()</td>
<td class="org-left">list1.pop()</td>
<td class="org-left">['1','b']</td>
</tr>

<tr>
<td class="org-left">len</td>
<td class="org-left">len(list1)</td>
<td class="org-left">3</td>
</tr>

<tr>
<td class="org-left">count</td>
<td class="org-left">how many times obj occure</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">sort</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">list2str</td>
<td class="org-left">' - '.joint(lis<sub>str</sub>)</td>
<td class="org-left">'a - b - c - d'</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table></li>
</ul>
</div>
<ul class="org-ul">
<li><a id="org468f679"></a>list2str<br />
<div class="outline-text-5" id="text-org468f679">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">course</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'History'</span>, <span style="color: #2d9574;">'Math'</span>, <span style="color: #2d9574;">'Physics'</span>, <span style="color: #2d9574;">'CompSci'</span><span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">course_str</span> = <span style="color: #2d9574;">" - "</span>.join<span style="color: #3a81c3;">(</span>courses<span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;  'History - Math - Physics - CompSci'</span>
<span style="color: #715ab1;">my_list</span> = course_str.split<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">" - "</span><span style="color: #3a81c3;">)</span>       <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;  ['History', 'Math', 'Physics', 'CompSci']</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>

<div id="outline-container-org74b11eb" class="outline-3">
<h3 id="org74b11eb">Tubles</h3>
<div class="outline-text-3" id="text-org74b11eb">
</div>
<div id="outline-container-org9539bb8" class="outline-4">
<h4 id="org9539bb8">Defination</h4>
<div class="outline-text-4" id="text-org9539bb8">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">imelda</span> = <span style="color: #2d9574;">"More Mayhem"</span>, <span style="color: #2d9574;">"Imelda May"</span>, 2011, <span style="color: #3a81c3;">(</span> <span style="color: #6c3163;">(</span>1, <span style="color: #2d9574;">"Pulling the Rug"</span><span style="color: #6c3163;">)</span>, <span style="color: #6c3163;">(</span>2, <span style="color: #2d9574;">"Psycho"</span><span style="color: #6c3163;">)</span>, <span style="color: #6c3163;">(</span>3, <span style="color: #2d9574;">"Mayhem"</span><span style="color: #6c3163;">)</span>, <span style="color: #6c3163;">(</span>4, <span style="color: #2d9574;">"Kentish Town Waltz"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>imelda<span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">title</span>, <span style="color: #715ab1;">artist</span>, <span style="color: #715ab1;">year</span>, <span style="color: #715ab1;">tracks</span> = imelda
<span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Unpacking the Tuple</span>
imelda
</pre>
</div>
</div>
</div>
<div id="outline-container-orga993628" class="outline-4">
<h4 id="orga993628">Operations</h4>
<div class="outline-text-4" id="text-orga993628">
<ul class="org-ul">
<li><p>
adaddfasf
tup1 = ('1','b',2.5)
tup2 = ('a','d',4.6)
tup<sub>str</sub> = ('a', 'b', 'c', 'd')
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Operations</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Concatenation</td>
<td class="org-left">tup1 +tup2</td>
<td class="org-left">('1','b',2.5, 'a','d',4.6)</td>
</tr>

<tr>
<td class="org-left">Repetition</td>
<td class="org-left">tup1*3</td>
<td class="org-left">('1','b',2.5, '1','b',2.5,'1','b',2.5)</td>
</tr>

<tr>
<td class="org-left">Slicing</td>
<td class="org-left">tup1[0:4:2]</td>
<td class="org-left">('1',2.5)</td>
</tr>

<tr>
<td class="org-left">Indexing</td>
<td class="org-left">tup1[0]</td>
<td class="org-left">'1'</td>
</tr>

<tr>
<td class="org-left">Delete</td>
<td class="org-left">del tup1</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Membership in</td>
<td class="org-left">2.5 in list1</td>
<td class="org-left">True</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">Method</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">tub2str</td>
<td class="org-left">' - '.joint(tup<sub>str</sub>)</td>
<td class="org-left">'a - b - c - d'</td>
</tr>

<tr>
<td class="org-left">len</td>
<td class="org-left">len(tup1)</td>
<td class="org-left">3</td>
</tr>

<tr>
<td class="org-left">count</td>
<td class="org-left">ele(occures) in tup</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table></li>
</ul>
</div>
</div>
</div>
<div id="outline-container-org98f0beb" class="outline-3">
<h3 id="org98f0beb">Dictionary</h3>
<div class="outline-text-3" id="text-org98f0beb">
</div>
<div id="outline-container-org2805e25" class="outline-4">
<h4 id="org2805e25">Defination</h4>
<div class="outline-text-4" id="text-org2805e25">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">fruit</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">"orange"</span>: <span style="color: #2d9574;">"a sweet, orange, citrus fruit"</span>,
         <span style="color: #2d9574;">"apple"</span> : <span style="color: #2d9574;">"good for making cider"</span>,
         <span style="color: #2d9574;">"lemon"</span> : <span style="color: #2d9574;">"a sour, yellow citrus fruit"</span>,
         <span style="color: #2d9574;">"grape"</span> : <span style="color: #2d9574;">"a small, sweet fruit growing in bunches"</span>,
         <span style="color: #2d9574;">"lime"</span>  : <span style="color: #2d9574;">"a sour, green citrus fruit"</span><span style="color: #3a81c3;">}</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">====================================</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-orgd1b7ac8" class="outline-4">
<h4 id="orgd1b7ac8">Adding New entity</h4>
<div class="outline-text-4" id="text-orgd1b7ac8">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Adding a new key to existing Dic</span>
<span style="color: #715ab1;">fruit</span><span style="color: #3a81c3;">[</span><span style="color: #2d9574;">"pear"</span><span style="color: #3a81c3;">]</span> = <span style="color: #2d9574;">"an odd shaped apple"</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Updating or Replacing existing key</span>
<span style="color: #715ab1;">fruit</span><span style="color: #3a81c3;">[</span><span style="color: #2d9574;">"lime"</span><span style="color: #3a81c3;">]</span> = <span style="color: #2d9574;">"great with tequila"</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>fruit<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org1169d10" class="outline-4">
<h4 id="org1169d10">Deleting a key , Dic</h4>
<div class="outline-text-4" id="text-org1169d10">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">=====================================</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">#   Deleting a key,value from Dic</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">del fruit["lemon"]</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">=====================================</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Deleting a Dic</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">del fruit</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">=====================================</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">#     Emptying the Dictionary</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">fruit.clear()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(fruit)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">====================================</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgba1933b" class="outline-4">
<h4 id="orgba1933b">Dict is UnOrder</h4>
<div class="outline-text-4" id="text-orgba1933b">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">while</span> <span style="color: #4e3163;">True</span>:
        dict_key = <span style="color: #3a81c3;">input</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Please enter a fruit: "</span><span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3; font-weight: bold;">if</span> dict_key == <span style="color: #2d9574;">"quit"</span>:
                <span style="color: #3a81c3; font-weight: bold;">break</span>
        description = fruit.get<span style="color: #3a81c3;">(</span>dict_key, <span style="color: #2d9574;">"We don't have a"</span> + dict_key<span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>description<span style="color: #3a81c3;">)</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if dict_key in fruit:</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;">#       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">description = fruit.get(dict_key)</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;">#       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(description)</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">else:</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;">#       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print("we don't have a " + dict_key)</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">=========================================</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Every time we run we will get different order</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> item <span style="color: #3a81c3; font-weight: bold;">in</span> fruit :
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span> item + <span style="color: #2d9574;">"is"</span>+ fruit<span style="color: #6c3163;">[</span>item<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> key, value <span style="color: #3a81c3; font-weight: bold;">in</span> fruit.items<span style="color: #3a81c3;">()</span>:
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>key,value<span style="color: #3a81c3;">)</span> 
</pre>
</div>
</div>
</div>
<div id="outline-container-org7760536" class="outline-4">
<h4 id="org7760536">Ordered</h4>
<div class="outline-text-4" id="text-org7760536">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">ordered_keys</span> = <span style="color: #3a81c3;">list</span><span style="color: #3a81c3;">(</span>fruit.keys<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>
ordered_keys.sort<span style="color: #3a81c3;">()</span>

<span style="color: #715ab1;">ordered_keys</span> = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">list</span><span style="color: #6c3163;">(</span>fruit.keys<span style="color: #2d9574;">()</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> f <span style="color: #3a81c3; font-weight: bold;">in</span> ordered_keys:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f + <span style="color: #2d9574;">" - "</span> + fruit<span style="color: #6c3163;">[</span>f<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">for f in sorted(fruit.keys()):</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">for f in fruit:</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(f  + " - " + fruit[f])</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">for val in fruit.values():</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(val)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print('-' * 40)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">for key in fruit:</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(fruit[key])</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org17dec05" class="outline-4">
<h4 id="org17dec05">Operations</h4>
<div class="outline-text-4" id="text-org17dec05">
<p>
myDict = {1:"apple",2:"ball"}
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Operations</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">accessing</td>
<td class="org-left">myDict[1]</td>
<td class="org-left">'apple'</td>
</tr>

<tr>
<td class="org-left">len()</td>
<td class="org-left">len(myDict)</td>
<td class="org-left">2</td>
</tr>

<tr>
<td class="org-left">key()</td>
<td class="org-left">key(myDict)</td>
<td class="org-left">[1,2]</td>
</tr>

<tr>
<td class="org-left">values()</td>
<td class="org-left">values(myDict)</td>
<td class="org-left">['apple','ball']</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgf4ae83e" class="outline-4">
<h4 id="orgf4ae83e">Methods</h4>
<div class="outline-text-4" id="text-orgf4ae83e">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Methods</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">items</td>
<td class="org-left">myDict.items()</td>
<td class="org-left">[(1,'apple'),(2,'ball')]</td>
</tr>

<tr>
<td class="org-left">print "asdf"</td>
<td class="org-left">myDict.get(4,"asdf")</td>
<td class="org-left">$: asdf</td>
</tr>

<tr>
<td class="org-left">get</td>
<td class="org-left">myDict.get(1)</td>
<td class="org-left">'apple'</td>
</tr>

<tr>
<td class="org-left">update</td>
<td class="org-left">myDict.update({3:'c'})</td>
<td class="org-left">{1:'apple',2:'ball',3:"c"}</td>
</tr>

<tr>
<td class="org-left">pop</td>
<td class="org-left">myDict.pop(2)</td>
<td class="org-left">{1:'apple'}</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org9f26121" class="outline-4">
<h4 id="org9f26121">Loop in dictionary</h4>
<div class="outline-text-4" id="text-org9f26121">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">for</span> key <span style="color: #3a81c3; font-weight: bold;">in</span> a_dict:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>key, <span style="color: #2d9574;">'-&gt;'</span>, a_dict<span style="color: #6c3163;">[</span>key<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>


<span style="color: #715ab1;">a_dict</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'color'</span>: <span style="color: #2d9574;">'blue'</span>, <span style="color: #2d9574;">'fruit'</span>: <span style="color: #2d9574;">'apple'</span>, <span style="color: #2d9574;">'pet'</span>: <span style="color: #2d9574;">'dog'</span><span style="color: #3a81c3;">}</span>
<span style="color: #715ab1;">d_items</span> = a_dict.items<span style="color: #3a81c3;">()</span>
d_items  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Here d_items is a view of items</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> item <span style="color: #3a81c3; font-weight: bold;">in</span> a_dict.items<span style="color: #3a81c3;">()</span>:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>item<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">('color', 'blue')</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">('fruit', 'apple')</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">('pet', 'dog')</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> key, value <span style="color: #3a81c3; font-weight: bold;">in</span> a_dict.items<span style="color: #3a81c3;">()</span>:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>key, <span style="color: #2d9574;">'-&gt;'</span>, value<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">color -&gt; blue</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">ruit -&gt; apple</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">pet -&gt; dog</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orge38a021" class="outline-3">
<h3 id="orge38a021">Set</h3>
<div class="outline-text-3" id="text-orge38a021">
<p>
In  
</p>
</div>

<div id="outline-container-orgc280e3d" class="outline-4">
<h4 id="orgc280e3d">defination</h4>
<div class="outline-text-4" id="text-orgc280e3d">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">myset</span> = <span style="color: #3a81c3;">{</span>1,2,3,4<span style="color: #3a81c3;">}</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org7a473b9" class="outline-4">
<h4 id="org7a473b9">Syntax</h4>
<div class="outline-text-4" id="text-org7a473b9">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">farm_animals</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">"sheep"</span>, <span style="color: #2d9574;">"cow"</span>, <span style="color: #2d9574;">"hen"</span><span style="color: #3a81c3;">}</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>farm_animals<span style="color: #3a81c3;">)</span>

 <span style="color: #3a81c3; font-weight: bold;">for</span> animal <span style="color: #3a81c3; font-weight: bold;">in</span> farm_animals:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>animal<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org9612854" class="outline-4">
<h4 id="org9612854">Adding elements</h4>
<div class="outline-text-4" id="text-org9612854">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">wild_animals</span> = <span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">(</span><span style="color: #6c3163;">[</span><span style="color: #2d9574;">"lion"</span>, <span style="color: #2d9574;">"tiger"</span>, <span style="color: #2d9574;">"panther"</span>, <span style="color: #2d9574;">"elephant"</span>, <span style="color: #2d9574;">"hare"</span><span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>

farm_animals.add<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"horse"</span><span style="color: #3a81c3;">)</span>
wild_animals.add<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"horse"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>farm_animals<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>wild_animals<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">empty_set</span> = <span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">()</span>
<span style="color: #715ab1;">empty_set_2</span> = <span style="color: #3a81c3;">{}</span>
empty_set.add<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"a"</span><span style="color: #3a81c3;">)</span>
 empty_set_2.add<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"a"</span><span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">even</span> = <span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">range</span><span style="color: #6c3163;">(</span>0, 40, 2<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>even<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">squares_tuple</span> = <span style="color: #3a81c3;">(</span>4, 6, 9, 16, 25<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">squares</span> = <span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">(</span>squares_tuple<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>squares<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">even</span> = <span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">range</span><span style="color: #6c3163;">(</span>0, 40, 2<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>even<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">len</span><span style="color: #6c3163;">(</span>even<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgdac024d" class="outline-4">
<h4 id="orgdac024d">Union,Intersection,difference,symmetric differ</h4>
<div class="outline-text-4" id="text-orgdac024d">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>even.union<span style="color: #6c3163;">(</span>squares<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">len</span><span style="color: #6c3163;">(</span>even.union<span style="color: #2d9574;">(</span>squares<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>squares.union<span style="color: #6c3163;">(</span>even<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"-"</span> * 40<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>even.intersection<span style="color: #6c3163;">(</span>squares<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>even &amp; squares<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>squares.intersection<span style="color: #6c3163;">(</span>even<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>squares &amp; even<span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">even</span> = <span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">range</span><span style="color: #6c3163;">(</span>0, 40, 2<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">sorted</span><span style="color: #6c3163;">(</span>even<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">squares_tuple</span> = <span style="color: #3a81c3;">(</span>4, 6, 9, 16, 25<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">squares</span> = <span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">(</span>squares_tuple<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">sorted</span><span style="color: #6c3163;">(</span>squares<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"even minus squares"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">sorted</span><span style="color: #6c3163;">(</span>even.difference<span style="color: #2d9574;">(</span>squares<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">sorted</span><span style="color: #6c3163;">(</span>even - squares<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"squares minus even"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>squares.difference<span style="color: #6c3163;">(</span>even<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>squares - even<span style="color: #3a81c3;">)</span>


<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"symmetric even minus squares"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">sorted</span><span style="color: #6c3163;">(</span>even.symmetric_difference<span style="color: #2d9574;">(</span>squares<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"symmetric squares minus even"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>squares.symmetric_difference<span style="color: #6c3163;">(</span>even<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgbff75cf" class="outline-4">
<h4 id="orgbff75cf">Sort</h4>
<div class="outline-text-4" id="text-orgbff75cf">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">sorted</span><span style="color: #6c3163;">(</span>even<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>squares<span style="color: #3a81c3;">)</span>
even.difference_update<span style="color: #3a81c3;">(</span>squares<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">sorted</span><span style="color: #6c3163;">(</span>even<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgff3271f" class="outline-4">
<h4 id="orgff3271f">remove or discard elements</h4>
<div class="outline-text-4" id="text-orgff3271f">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">squares.discard(4)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">squares.remove(16)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">squares.discard(8)   # no error, does nothing</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(squares)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">#   square.remove(8)          &gt;&gt; error is occured and it error is used for condition</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">try:</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">squares.remove(8)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">except KeyError:</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print("The item 8 is not a member of the set")</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgbe2b4ce" class="outline-4">
<h4 id="orgbe2b4ce">subset/superset</h4>
<div class="outline-text-4" id="text-orgbe2b4ce">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">even = set(range(0, 40, 2))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(even)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">squares_tuple = (4, 6, 16)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">squares = set(squares_tuple)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(squares)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if squares.issubset(even):</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print("squares is a subset of even")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if even.issuperset(squares):</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#     </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print("even is a superset of squares")</span>

<span style="color: #715ab1;">even</span> = <span style="color: #3a81c3;">frozenset</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">range</span><span style="color: #6c3163;">(</span>0, 100, 2<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>even<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">even.add(3)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org7689464" class="outline-4">
<h4 id="org7689464">Methods</h4>
<div class="outline-text-4" id="text-org7689464">
<p>
myS1 = {1,2,3}
myS2 = {1,'B','C'}
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Methods</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">&#xa0;</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Union</td>
<td class="org-left">(myS1 UNION myS2)</td>
<td class="org-left">{1,2,'B','C'}</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">myS1.union(myS2)</td>
<td class="org-left">{1,2,'B','C'}</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Intersection</td>
<td class="org-left">myS1 &amp; myS2</td>
<td class="org-left">{1,'C'}</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">myS1.intersection(myS2)</td>
<td class="org-left">{1,'C'}</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">difference</td>
<td class="org-left">myS1 - myS2</td>
<td class="org-left">{2}</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">myS1.difference(myS2)</td>
<td class="org-left">{2}</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">symmetric<sub>difference</sub></td>
<td class="org-left">myS1.symmetric<sub>difference</sub>(myS2)</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">remove</td>
<td class="org-left">myS1.remove(1)</td>
<td class="org-left">{2,3}</td>
</tr>

<tr>
<td class="org-left">discard(no exception rised)</td>
<td class="org-left">myS1.discarde(3)</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">issubset</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">issuperset</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div id="outline-container-orgafc0674" class="outline-3">
<h3 id="orgafc0674">Sort</h3>
<div class="outline-text-3" id="text-orgafc0674">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">li</span> = <span style="color: #3a81c3;">[</span>9,1,8,2,5,4,6,3,7<span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">s_li</span> = <span style="color: #3a81c3;">sorted</span> <span style="color: #3a81c3;">(</span>li, reverse=<span style="color: #4e3163;">True</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Sorted Variable: \t'</span>, s_li<span style="color: #3a81c3;">)</span>
li.sort<span style="color: #3a81c3;">(</span>reverse=<span style="color: #4e3163;">True</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Orignial Variable:\t'</span>,li<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Tuple </span>
tup = <span style="color: #3a81c3;">(</span>9,1,8,1,7,3,6,4,5<span style="color: #3a81c3;">)</span>
s_tup = <span style="color: #3a81c3;">sorted</span> <span style="color: #3a81c3;">(</span>tup<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Tuple\t'</span> , s_tup<span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Dictionary </span>
di  = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span> : <span style="color: #2d9574;">'Corey'</span>, <span style="color: #2d9574;">'job'</span>: <span style="color: #2d9574;">'programming'</span>, <span style="color: #2d9574;">'age'</span>: <span style="color: #4e3163;">None</span> , <span style="color: #2d9574;">'os'</span>: <span style="color: #2d9574;">'Mint'</span><span style="color: #3a81c3;">}</span>
s_di = sort<span style="color: #3a81c3;">(</span>di<span style="color: #3a81c3;">)</span>
pritn<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Dict\t'</span>, s_di<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">sort number based on absolute value </span>
li = <span style="color: #3a81c3;">[</span>-6,-5,-4,1,2,3<span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>li,key=<span style="color: #3a81c3;">abs</span><span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Sort class</span>
<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Employee</span><span style="color: #3a81c3;">()</span>:
   <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>, name, age, salary<span style="color: #3a81c3;">)</span>:
           <span style="color: #3a81c3; font-weight: bold;">self</span>.name = name
           <span style="color: #3a81c3; font-weight: bold;">self</span>.age = age
           <span style="color: #3a81c3; font-weight: bold;">self</span>.salary= salary
   <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__repr__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
          <span style="color: #3a81c3; font-weight: bold;">return</span> <span style="color: #2d9574;">'({},{},${})'</span>.formate<span style="color: #3a81c3;">(</span>selft.name, <span style="color: #3a81c3; font-weight: bold;">self</span>.age, <span style="color: #3a81c3; font-weight: bold;">self</span>.salary<span style="color: #3a81c3;">)</span>
e1 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Carl'</span>,37, 70000<span style="color: #3a81c3;">)</span>
e2 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Sarah'</span>,29, 8000<span style="color: #3a81c3;">)</span>
e3 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'John'</span>,43, 9000<span style="color: #3a81c3;">)</span>

employees = <span style="color: #3a81c3;">[</span>e1,e2,e3<span style="color: #3a81c3;">]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">s_employees = soreted(employee) # gives error</span>

<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">e_sort</span><span style="color: #3a81c3;">(</span>emp<span style="color: #3a81c3;">)</span>:
   <span style="color: #3a81c3; font-weight: bold;">return</span> emp.name
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">return emp.age</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">return emp.salary</span>

s_employees = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span>employees, key=e_sort<span style="color: #3a81c3;">)</span>
s_employees = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span>employees, key=e_sort, reverse= <span style="color: #4e3163;">True</span><span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Usingg lambda there is no need of e_sort function</span>

s_employees = <span style="color: #3a81c3;">sorted</span><span style="color: #3a81c3;">(</span>employees, key=lamdba e: e.name, reverse= <span style="color: #4e3163;">True</span><span style="color: #3a81c3;">)</span>
s_employees = 
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>s_employees<span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Sorting using operator and attrgetter</span>

<span style="color: #3a81c3; font-weight: bold;">from</span> operator <span style="color: #3a81c3; font-weight: bold;">import</span> attrgetter

e1 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Carl'</span>, 37, 70000<span style="color: #3a81c3;">)</span>
e2 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Sarah'</span>, 29, 8000<span style="color: #3a81c3;">)</span>
e3 =  Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'John'</span>, 43,9000<span style="color: #3a81c3;">)</span>

employees = <span style="color: #3a81c3;">[</span>e1,e2,e3<span style="color: #3a81c3;">]</span>


s_employees = soreted<span style="color: #3a81c3;">(</span>employees, key= attrgetter<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'age'</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>s_employees<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb2314cc" class="outline-3">
<h3 id="orgb2314cc">Type Conversions</h3>
<div class="outline-text-3" id="text-orgb2314cc">
</div>
<div id="outline-container-org2b8cbc3" class="outline-4">
<h4 id="org2b8cbc3">tub2list</h4>
<div class="outline-text-4" id="text-org2b8cbc3">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">tup1</span> = <span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb463327" class="outline-4">
<h4 id="orgb463327">list2Str</h4>
<div class="outline-text-4" id="text-orgb463327">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Converting a list to str</span>

<span style="color: #715ab1;">mylist</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">"a"</span>, <span style="color: #2d9574;">"b"</span>,<span style="color: #2d9574;">"c"</span>,<span style="color: #2d9574;">"d"</span><span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">newString</span> = <span style="color: #2d9574;">""</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> c <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #715ab1;">mylist</span>:
                newString = c + <span style="color: #2d9574;">"."</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>newString<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">OR </span>
<span style="color: #715ab1;">newString1</span> = <span style="color: #2d9574;">"."</span>.join<span style="color: #3a81c3;">(</span>mylist<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>newString1<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org4074ac7" class="outline-4">
<h4 id="org4074ac7">tubles2set</h4>
<div class="outline-text-4" id="text-org4074ac7">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">##### </span><span style="color: #2aa1ae; background-color: #ecf3ec;">details visit #set-objects</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">even = set(range(0, 40, 2))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(even)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">squares_tuple = (4, 6, 9, 16, 25)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">squares = set(squares_tuple)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(squares)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org1b4c7e7" class="outline-4">
<h4 id="org1b4c7e7">Conversion tubles2dic</h4>
<div class="outline-text-4" id="text-org1b4c7e7">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">fruit_keys</span> = fruit.keys<span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>fruit_keys<span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">fruit_list</span> = fruit.items<span style="color: #3a81c3;">()</span>                      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Convert dic to list containing tuples ( key, value )</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[('lime', 'a sour, green citrus fruit'), ('apple', 'good for making cider') .....etc ]</span>

<span style="color: #715ab1;">fruit_tup</span> = <span style="color: #3a81c3;">tuple</span><span style="color: #3a81c3;">(</span>fruit.items<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Convert dic to tuples containing tuples (key, value)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(  ('lime', 'a sour, green citrus fruit'), ('apple', 'good for making cider') .....etc )</span>

<span style="color: #715ab1;">fruit_dic2</span> = <span style="color: #3a81c3;">dict</span><span style="color: #3a81c3;">(</span> fruit_tup<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Convert tuple to dic</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org2ef6eb1" class="outline-4">
<h4 id="org2ef6eb1">String2int</h4>
<div class="outline-text-4" id="text-org2ef6eb1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">a</span> = <span style="color: #2d9574;">'123'</span>
<span style="color: #715ab1;">b</span> = <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span>a<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb430a2c" class="outline-4">
<h4 id="orgb430a2c">str2float</h4>
<div class="outline-text-4" id="text-orgb430a2c">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">a</span>= <span style="color: #2d9574;">'123.456'</span>
<span style="color: #715ab1;">b</span> = <span style="color: #3a81c3;">float</span><span style="color: #3a81c3;">(</span>a<span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">123</span>
<span style="color: #715ab1;">c</span>= <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span>a<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">ValueErro: invalid literal for int() with base 10</span>
d = <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">float</span><span style="color: #6c3163;">(</span>a<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">123</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org86794ec" class="outline-4">
<h4 id="org86794ec">str2list,set,tuple</h4>
<div class="outline-text-4" id="text-org86794ec">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">a</span> = <span style="color: #2d9574;">'hello'</span>
<span style="color: #3a81c3;">list</span><span style="color: #3a81c3;">(</span>a<span style="color: #3a81c3;">)</span>      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">['h', 'e','l','l','o']</span>
<span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">(</span>a<span style="color: #3a81c3;">)</span>       <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">{'h', 'e','l','l','o'}</span>
<span style="color: #3a81c3;">tuple</span><span style="color: #3a81c3;">(</span>a<span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">('h', 'e','l','l','o')</span>
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-orgecb31a8" class="outline-2">
<h2 id="orgecb31a8">Data Binding</h2>
<div class="outline-text-2" id="text-orgecb31a8">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">List iniciallization</span>

<span style="color: #715ab1;">list_1</span> = <span style="color: #3a81c3;">[]</span>                     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">empty list</span>
<span style="color: #715ab1;">list_2</span> = <span style="color: #3a81c3;">list</span><span style="color: #3a81c3;">()</span>         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">empty list</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">###############################</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Data Binding</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">###############################</span>

<span style="color: #715ab1;">even1</span>  = <span style="color: #3a81c3;">[</span>2, 4, 6, 8<span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">even2</span> = even1           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; even2 is even1            &gt;&gt;&gt; True</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>even2 <span style="color: #3a81c3; font-weight: bold;">is</span> even1<span style="color: #3a81c3;">)</span>
even2.sort<span style="color: #3a81c3;">(</span>reverse=<span style="color: #4e3163;">True</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>even<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Changes done in even2 will change even1 vic versa, this is called Data Binding</span>




x1= <span style="color: #3a81c3;">[</span>1,2,3,4,5,6,90,1,54,78,6,34<span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>x1<span style="color: #3a81c3;">)</span>
x1.sort<span style="color: #3a81c3;">()</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">.sort doestnot create a new list (obj) but change the existing list</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>x1<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org1220d45" class="outline-2">
<h2 id="org1220d45">Flow Control</h2>
<div class="outline-text-2" id="text-org1220d45">
</div>
<div id="outline-container-orgd5eb09b" class="outline-4">
<h4 id="orgd5eb09b">if elif else</h4>
<div class="outline-text-4" id="text-orgd5eb09b">
</div>
<ul class="org-ul">
<li><a id="org019eefe"></a>syntax<br />
<div class="outline-text-5" id="text-org019eefe">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">if</span> condition1:
    statement
    statement
<span style="color: #3a81c3; font-weight: bold;">elif</span> condition2:
    statement
    statement
<span style="color: #3a81c3; font-weight: bold;">else</span>:
    statement
    statement

</pre>
</div>
</div>
</li>
<li><a id="orgf0d13e5"></a>Eg 1<br />
<div class="outline-text-5" id="text-orgf0d13e5">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">name</span>  = <span style="color: #3a81c3;">input</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Please enter your name "</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">age</span> = <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">input</span><span style="color: #6c3163;">(</span><span style="color: #2d9574;">"How old are you {0}"</span>.<span style="color: #3a81c3;">format</span><span style="color: #2d9574;">(</span>name<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>age<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #3a81c3;">(</span>age&lt;16<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"You are not eligible to vote Come back after {0} years"</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>18-age<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">elif</span> <span style="color: #3a81c3;">(</span>16&lt;=age&lt;66<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"You are eligible to vote"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span> :
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Enter age in whole no"</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
<li><a id="org0ef398b"></a>Eg 2<br />
<div class="outline-text-5" id="text-org0ef398b">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #4e3163;">True</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if allow True"</span><span style="color: #3a81c3;">)</span>

x = 12
<span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #715ab1;">x</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if allow int "</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if not allow int"</span><span style="color: #3a81c3;">)</span>


x = 12.65
<span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #715ab1;">x</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if allow float "</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if not allow float"</span><span style="color: #3a81c3;">)</span>

x = <span style="color: #2d9574;">"it is string"</span>
<span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #715ab1;">x</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if allow string "</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if not allow string"</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #4e3163;">False</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if allow False"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if not allow False"</span><span style="color: #3a81c3;">)</span>

x = <span style="color: #4e3163;">None</span>
<span style="color: #3a81c3; font-weight: bold;">if</span> x:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if allow None "</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"if not allow None"</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">not</span> <span style="color: #4e3163;">False</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">not</span> <span style="color: #4e3163;">True</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org8fb9258" class="outline-4">
<h4 id="org8fb9258">Loop</h4>
<div class="outline-text-4" id="text-org8fb9258">
</div>
<ul class="org-ul">
<li><a id="orgdbbe71f"></a>while<br />
<ul class="org-ul">
<li><a id="orgd215b4b"></a>Eg 01<br />
<div class="outline-text-6" id="text-orgd215b4b">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">valid_ip</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">"north"</span>, <span style="color: #2d9574;">"south"</span>, <span style="color: #2d9574;">"east"</span>, <span style="color: #2d9574;">"west"</span><span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">give_ip</span> =<span style="color: #2d9574;">""</span>
<span style="color: #3a81c3; font-weight: bold;">while</span> give_ip <span style="color: #3a81c3; font-weight: bold;">is</span> <span style="color: #3a81c3; font-weight: bold;">not</span> <span style="color: #715ab1;">valid_ip</span>:
        give_ip = <span style="color: #3a81c3;">input</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Enter the Direction: "</span><span style="color: #3a81c3;">)</span>
      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">execute statement</span>




</pre>
</div>
</div>
</li>
</ul>
</li>
<li><a id="org93fa232"></a>for<br />
<ul class="org-ul">
<li><a id="orga9fdbc4"></a>Eg<br />
<div class="outline-text-6" id="text-orga9fdbc4">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3;">str</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'i'</span>,<span style="color: #2d9574;">'am'</span>,<span style="color: #2d9574;">'a'</span>,<span style="color: #2d9574;">'programmer'</span>, <span style="color: #2d9574;">'in'</span>,<span style="color: #2d9574;">'python'</span><span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> i <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">str</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>i,end=<span style="color: #2d9574;">" "</span><span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; i am a programmer in python</span>
        <span style="color: #3a81c3; font-weight: bold;">if</span> i==<span style="color: #2d9574;">"a"</span>:
                <span style="color: #3a81c3; font-weight: bold;">continue</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; i am programmer in python</span>
                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">break                 # &gt;&gt;&gt; i am</span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"\n"</span><span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>i,end=<span style="color: #2d9574;">" "</span><span style="color: #3a81c3;">)</span>

nums = <span style="color: #3a81c3;">[</span>1,2,3,4,5<span style="color: #3a81c3;">]</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> num <span style="color: #3a81c3; font-weight: bold;">in</span> nums :
   <span style="color: #3a81c3; font-weight: bold;">if</span> num ==3:
      <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Found!'</span><span style="color: #3a81c3;">)</span>
      <span style="color: #3a81c3; font-weight: bold;">continue</span>
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>num<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">output : 1,2, Found!,4,5</span>


<span style="color: #3a81c3; font-weight: bold;">for</span> letter <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #2d9574;">'abc'</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>num, letter<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> i <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">range</span><span style="color: #3a81c3;">(</span>10<span style="color: #3a81c3;">)</span>:  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">range(1,11)</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>i<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</li>
</ul>
</li>

<li><a id="org567f4e2"></a>for loop by iterating by sequencec index<br />
<div class="outline-text-5" id="text-org567f4e2">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3;">str</span> = <span style="color: #2d9574;">"123456789"</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">for char in str:</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#       </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(char)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">iter_my = iter(str)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(iter_my)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(next(iter_my))</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">or we can use for</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> char <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">iter</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">str</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>char<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org3296375" class="outline-4">
<h4 id="org3296375">Flow control :</h4>
<div class="outline-text-4" id="text-org3296375">
</div>
<ul class="org-ul">
<li><a id="orgab34824"></a>continue<br /></li>
<li><a id="orga715ca8"></a>break<br /></li>
</ul>
</div>
</div>
<div id="outline-container-org721109f" class="outline-2">
<h2 id="org721109f">Loop</h2>
<div class="outline-text-2" id="text-org721109f">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">courses</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'History'</span>,<span style="color: #2d9574;">'Math'</span>, <span style="color: #2d9574;">'Physics'</span>, <span style="color: #2d9574;">'ComSci'</span><span style="color: #3a81c3;">]</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> index, course <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">enumerate</span><span style="color: #3a81c3;">(</span>course, start =1<span style="color: #3a81c3;">)</span> :
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>index,course<span style="color: #3a81c3;">)</span>

student = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span>:<span style="color: #2d9574;">'John'</span>, <span style="color: #2d9574;">'age'</span> :25, <span style="color: #2d9574;">'courses'</span>: <span style="color: #6c3163;">[</span><span style="color: #2d9574;">'Math'</span>, <span style="color: #2d9574;">'CompSci'</span><span style="color: #6c3163;">]</span><span style="color: #3a81c3;">}</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> key, value <span style="color: #3a81c3; font-weight: bold;">in</span> student.items<span style="color: #3a81c3;">()</span>:
    <span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span>key, value<span style="color: #3a81c3;">)</span> 


</pre>
</div>
</div>
</div>
<div id="outline-container-orgdee6c94" class="outline-2">
<h2 id="orgdee6c94">Comprehension</h2>
<div class="outline-text-2" id="text-orgdee6c94">
</div>
<div id="outline-container-orga3537dd" class="outline-3">
<h3 id="orga3537dd">If-else Comprehension</h3>
<div class="outline-text-3" id="text-orga3537dd">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">without Comprehension</span>
<span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #2d9574;">'summary'</span> <span style="color: #3a81c3; font-weight: bold;">in</span> mykeys:
    temp_dic.update<span style="color: #3a81c3;">(</span><span style="color: #6c3163;">{</span><span style="color: #2d9574;">'summary'</span>:item<span style="color: #2d9574;">[</span><span style="color: #2d9574;">'summary'</span><span style="color: #2d9574;">]</span><span style="color: #6c3163;">}</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
    temp_dic.update<span style="color: #3a81c3;">(</span><span style="color: #6c3163;">{</span><span style="color: #2d9574;">'summary'</span>:<span style="color: #2d9574;">''</span><span style="color: #6c3163;">}</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">with Comprehension</span>
temp_dic.update<span style="color: #3a81c3;">(</span><span style="color: #6c3163;">{</span><span style="color: #2d9574;">'summary'</span>:item<span style="color: #2d9574;">[</span><span style="color: #2d9574;">'summary'</span><span style="color: #2d9574;">]</span><span style="color: #6c3163;">}</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #2d9574;">'summary'</span> <span style="color: #3a81c3; font-weight: bold;">in</span> mykeys <span style="color: #3a81c3; font-weight: bold;">else</span> temp_dic.update<span style="color: #3a81c3;">(</span><span style="color: #6c3163;">{</span><span style="color: #2d9574;">'summary'</span>:<span style="color: #2d9574;">''</span><span style="color: #6c3163;">}</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org45b62e8" class="outline-3">
<h3 id="org45b62e8">List Comprehension</h3>
<div class="outline-text-3" id="text-org45b62e8">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">my_list</span> = <span style="color: #3a81c3;">[</span>1,2,3,4,5,6,7,8,9,10<span style="color: #3a81c3;">]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">using for loop</span>

<span style="color: #715ab1;">my_list</span> =<span style="color: #3a81c3;">[]</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> n <span style="color: #3a81c3; font-weight: bold;">in</span> nums:
  my_list.append<span style="color: #3a81c3;">(</span>n*n<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_list<span style="color: #3a81c3;">)</span>
</pre>
</div>

<p>
lambda 
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">using list comprahession</span>
<span style="color: #715ab1;">my_list</span> = <span style="color: #3a81c3;">[</span>n <span style="color: #3a81c3; font-weight: bold;">for</span> n <span style="color: #3a81c3; font-weight: bold;">in</span> nums<span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_list<span style="color: #3a81c3;">)</span>

my_list<span style="color: #3a81c3;">[</span>n*n <span style="color: #3a81c3; font-weight: bold;">for</span> n <span style="color: #3a81c3; font-weight: bold;">in</span> nums<span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_list<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">using map + lambda</span>

<span style="color: #715ab1;">my_list</span> = <span style="color: #3a81c3;">map</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span> n: n*n, nums<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_list<span style="color: #3a81c3;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Using for  even list </span>
<span style="color: #715ab1;">my_list</span> =<span style="color: #3a81c3;">[]</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> n <span style="color: #3a81c3; font-weight: bold;">in</span> nums:
  <span style="color: #3a81c3; font-weight: bold;">if</span> n%2==0:
     my_list.append<span style="color: #3a81c3;">(</span>n<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_list<span style="color: #3a81c3;">)</span>

</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Using Compression</span>

my_list<span style="color: #3a81c3;">[</span>n*n <span style="color: #3a81c3; font-weight: bold;">for</span> n <span style="color: #3a81c3; font-weight: bold;">in</span> nums <span style="color: #3a81c3; font-weight: bold;">if</span> n%2==0<span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_list<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Filter + lambda </span>
<span style="color: #715ab1;">my_list</span> = <span style="color: #3a81c3;">filter</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">lambda</span>  n: n%2 ==0, nums<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_list<span style="color: #3a81c3;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">I want a (letter, num) pai for each letter in "abcd" and number in "0123"</span>
 <span style="color: #715ab1;">my_list</span> =<span style="color: #3a81c3;">[]</span>
 <span style="color: #3a81c3; font-weight: bold;">for</span> letter <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #2d9574;">"abcd"</span>:
     <span style="color: #3a81c3; font-weight: bold;">for</span> num <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">range</span><span style="color: #3a81c3;">(</span>4<span style="color: #3a81c3;">)</span>:
         my_list.append<span style="color: #3a81c3;">(</span><span style="color: #6c3163;">(</span>letter, num<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
 <span style="color: #3a81c3;">print</span> my_list

</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Using list comprssion</span>
<span style="color: #715ab1;">my_list</span> = <span style="color: #3a81c3;">[</span><span style="color: #6c3163;">(</span>letter, num<span style="color: #6c3163;">)</span> <span style="color: #3a81c3; font-weight: bold;">for</span> letter <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #2d9574;">"abcd"</span> <span style="color: #3a81c3; font-weight: bold;">for</span> num <span style="color: #3a81c3; font-weight: bold;">in</span> rang<span style="color: #6c3163;">(</span>4<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span> my_list
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">for matwork, andriod, vir job, jav,   ,js</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgbbb12d0" class="outline-3">
<h3 id="orgbbb12d0">List Comprehension for dynamical create List of  integer</h3>
<div class="outline-text-3" id="text-orgbbb12d0">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">my_list</span> = <span style="color: #3a81c3;">[</span> <span style="color: #3a81c3;">int</span><span style="color: #6c3163;">(</span>x<span style="color: #6c3163;">)</span> <span style="color: #3a81c3; font-weight: bold;">for</span> x <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">input</span><span style="color: #6c3163;">(</span><span style="color: #2d9574;">"Enter the integers seperated by spcae"</span><span style="color: #6c3163;">)</span>.split<span style="color: #6c3163;">(</span><span style="color: #2d9574;">" "</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">]</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org327ad70" class="outline-3">
<h3 id="org327ad70">Dictitionary Comprehension</h3>
<div class="outline-text-3" id="text-org327ad70">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">nums</span> = <span style="color: #3a81c3;">[</span>1,2,3,4,5,6,7,8,910<span style="color: #3a81c3;">]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Dictionary Comprehension</span>
<span style="color: #715ab1;">names</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Bruce'</span>, <span style="color: #2d9574;">'Clark'</span>, <span style="color: #2d9574;">'Peter'</span>, <span style="color: #2d9574;">'Logan'</span>, <span style="color: #2d9574;">'Wade'</span><span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">heros</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Batman'</span>,<span style="color: #2d9574;">'Superman'</span>, <span style="color: #2d9574;">'Spiderman'</span>, <span style="color: #2d9574;">'Wolverine'</span>, <span style="color: #2d9574;">'Deadpool'</span><span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">zip</span> <span style="color: #3a81c3;">(</span>name, heros<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">[(Bruce, Batman), ('Clark','Superman'), ('Peter', 'Spiderman'), ('Logan', 'Wolverine'), ('Wade,'Deadpool')]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">with out list comprehension</span>
<span style="color: #715ab1;">my_dict</span> = <span style="color: #3a81c3;">{}</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> name, hero <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">zip</span><span style="color: #3a81c3;">(</span>name, heros<span style="color: #3a81c3;">)</span>:
   my_dict <span style="color: #3a81c3;">[</span><span style="color: #715ab1;">name</span><span style="color: #3a81c3;">]</span> = hero
<span style="color: #3a81c3;">print</span> my_dict

<span style="color: #715ab1;">my_dict</span> = <span style="color: #3a81c3;">{</span>name : hero <span style="color: #3a81c3; font-weight: bold;">for</span> name, hero <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">zip</span><span style="color: #6c3163;">(</span>name,heros<span style="color: #6c3163;">)</span> <span style="color: #3a81c3; font-weight: bold;">if</span> name != <span style="color: #2d9574;">'peter'</span><span style="color: #3a81c3;">}</span>
<span style="color: #3a81c3;">print</span> my_dict


<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org36060a8" class="outline-3">
<h3 id="org36060a8">Set Comprehension</h3>
<div class="outline-text-3" id="text-org36060a8">
<p>
nums = [1,2,3,4,5,6,7,8,9,10]
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Set Comprehension </span>
<span style="color: #715ab1;">nums</span> = <span style="color: #3a81c3;">[</span>1,1,2,1,3,4,3,4,55,6,7,9,9<span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">my_set</span> = <span style="color: #3a81c3;">set</span><span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> n <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #715ab1;">nums</span>:
    my_set.add<span style="color: #3a81c3;">(</span>n<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_set<span style="color: #3a81c3;">)</span>

my_set = <span style="color: #3a81c3;">{</span>n <span style="color: #3a81c3; font-weight: bold;">for</span> n <span style="color: #3a81c3; font-weight: bold;">in</span> nums<span style="color: #3a81c3;">}</span> 
</pre>
</div>
</div>
</div>
<div id="outline-container-orgc251aa9" class="outline-3">
<h3 id="orgc251aa9">Generator Expression</h3>
<div class="outline-text-3" id="text-orgc251aa9">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">nums</span> = <span style="color: #3a81c3;">[</span>1,2,3,4,5,6,7,8,9,10<span style="color: #3a81c3;">]</span>

<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">gen_func</span><span style="color: #3a81c3;">(</span>nums<span style="color: #3a81c3;">)</span>:
   <span style="color: #3a81c3; font-weight: bold;">for</span> n <span style="color: #3a81c3; font-weight: bold;">in</span> nums
        <span style="color: #3a81c3; font-weight: bold;">yield</span> n*n

<span style="color: #715ab1;">my_gen</span> = my_gen_func<span style="color: #3a81c3;">(</span>nums<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> i <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #715ab1;">my_gen</span>:
   <span style="color: #3a81c3;">print</span> i

<span style="color: #3a81c3; font-weight: bold;">for</span> i <span style="color: #3a81c3; font-weight: bold;">in</span> my_gen:
   <span style="color: #3a81c3;">print</span> i

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Generator using list Comprehension</span>

my_nums = <span style="color: #3a81c3;">(</span>x*x <span style="color: #3a81c3; font-weight: bold;">for</span> x <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #6c3163;">[</span>1,2,3,4,5<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> my_num <span style="color: #3a81c3; font-weight: bold;">in</span> my_nums :
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>my_num<span style="color: #3a81c3;">)</span>


</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgd6f28fb" class="outline-2">
<h2 id="orgd6f28fb">Keyboard Input:</h2>
<div class="outline-text-2" id="text-orgd6f28fb">
<p>
python3 has build-in function <code>input()</code> to read input data from standard input(sys.stdin)
</p>

<p>
python2 has  <code>raw_input</code> is deprecated
Why ?
 raw<sub>input</sub> is used to receive only  string input, and reading digit is not possible to remove this raw<sub>input</sub> is deprecated 
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">name</span> = <span style="color: #3a81c3;">input</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Give Input to python "</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Given input is : "</span>+ name<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org884774e" class="outline-2">
<h2 id="org884774e">Function</h2>
<div class="outline-text-2" id="text-org884774e">
<p>
Predefine
Use define
</p>
</div>
<div id="outline-container-org6f8b57a" class="outline-4">
<h4 id="org6f8b57a">Syntax</h4>
<div class="outline-text-4" id="text-org6f8b57a">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Function Defination</span>
<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">func_name</span> <span style="color: #3a81c3;">(</span>arg1,arg2,.......<span style="color: #3a81c3;">)</span>:   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">arg1,agr2...  are formal arg</span>
    statements
    <span style="color: #3a81c3; font-weight: bold;">return</span><span style="color: #3a81c3;">[</span>expression<span style="color: #3a81c3;">]</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Function Call</span>
func_name<span style="color: #3a81c3;">(</span>x,y,.......<span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">x,y...... are actual arg</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgad8fad0" class="outline-4">
<h4 id="orgad8fad0">Pass by Reference</h4>
<div class="outline-text-4" id="text-orgad8fad0">
<p>
Call by reference : sends the address(ref) of <code>actual arg</code> to <code>formal arg</code>
Python uses pass by reference 
we can check by finding if of actual arg and formal arg are same
</p>
</div>
</div>
<div id="outline-container-org4d32dc1" class="outline-4">
<h4 id="org4d32dc1">Pass by Value</h4>
<div class="outline-text-4" id="text-org4d32dc1">
<p>
Python does not uses pass by value
Call by value : send the value of <code>actual arg</code> to <code>formal arg</code> 
</p>
</div>
</div>
<div id="outline-container-org4b9bc32" class="outline-4">
<h4 id="org4b9bc32">argument</h4>
<div class="outline-text-4" id="text-org4b9bc32">
</div>
<ul class="org-ul">
<li><a id="orgb265054"></a>required arg<br />
<div class="outline-text-5" id="text-orgb265054">
<p>
Python check no of formal arg = no of actual arg if not it will send a error 
</p>
</div>
</li>
<li><a id="orgf7a355d"></a>keywoard agr<br />
<div class="outline-text-5" id="text-orgf7a355d">
<p>
actual agr need not be send to order but it can be called by unorded by using actual arg assigned to formal arg
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">printinfo</span> <span style="color: #3a81c3;">(</span>name,age<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Name: "</span>, name<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Age: "</span>, age<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">return</span>

printinfo<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"xyz"</span>, 20<span style="color: #3a81c3;">)</span> 
printinfo<span style="color: #3a81c3;">(</span> age=50, name=<span style="color: #2d9574;">"miki"</span><span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">keyword arg</span>
</pre>
</div>
</div>
</li>
<li><a id="orgbd1539c"></a>,default argument<br />
<div class="outline-text-5" id="text-orgbd1539c">
<p>
A default age is an arg that assume a default value if a value is not provided in function call for that argument
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">printinfo</span><span style="color: #3a81c3;">(</span> name, age=35<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Name: "</span>, name<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Age: "</span>,age<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">return</span>

printinfo<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"xyz"</span><span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">default agr</span>
printinfo<span style="color: #3a81c3;">(</span>name = <span style="color: #2d9574;">'miki'</span>,age =50<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>

<li><a id="org2dc4823"></a>Variable Length arguments:<br />
<div class="outline-text-5" id="text-org2dc4823">
<p>
You may need to proecess a function for more arg than you specified while defining the function 
</p>

<p>
These arg are called variable-length-arguments and are not named in the function definition,unlike required and default arguments
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">fun_name</span><span style="color: #3a81c3;">(</span><span style="color: #6c3163;">[</span>formal_arg<span style="color: #6c3163;">]</span>, *var_args_tuples<span style="color: #3a81c3;">)</span>:
                statements
                statements
                <span style="color: #3a81c3; font-weight: bold;">return</span> variable
</pre>
</div>

<p>
Note : asterisk (\*) is placed before var name that hold value of all non-keyword variable arg. This tuple remains empty if no additional arg are speciied during the function called
</p>
</div>
<ul class="org-ul">
<li><a id="orga789fe1"></a>Example<br />
<div class="outline-text-6" id="text-orga789fe1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">printinfo</span><span style="color: #3a81c3;">(</span> arg1,*vartuple<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Output is: "</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>arg1<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">for</span> var <span style="color: #3a81c3; font-weight: bold;">in</span> vartuple:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>var<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">return</span>

printinfo<span style="color: #3a81c3;">(</span>10<span style="color: #3a81c3;">)</span>
printinfo<span style="color: #3a81c3;">(</span>70,60,50<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</li>

<li><a id="org4534f35"></a>Lamda (Anonymous) Functions:<br />
<div class="outline-text-5" id="text-org4534f35">
<p>
create small function
not create by std manner by using def keyword
can take any number of arg but return 1 value
can't contain commands or multiple expressions
has there own local namespace contain variabels (parameter list) and gloval namespace
 can't acess other var  
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3;">sum</span> = <span style="color: #3a81c3; font-weight: bold;">lambda</span> arg1, arg2:   arg1+arg2

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">sum</span><span style="color: #6c3163;">(</span>10,20<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span> 
</pre>
</div>
</div>
</li>

<li><a id="orgab0367b"></a>Return<br /></li>
<li><a id="org1b62c39"></a>args and kwargs<br />
<div class="outline-text-5" id="text-org1b62c39">
<p>
*args and **kwargs In Python : <a href="https://www.youtube.com/watch?v=0lu2SY3menU">https://www.youtube.com/watch?v=0lu2SY3menU</a>
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">student_info</span><span style="color: #3a81c3;">(</span>*args, **kwargs<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>args<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>kwargs<span style="color: #3a81c3;">)</span>


student_info<span style="color: #3a81c3;">(</span> <span style="color: #2d9574;">"Math"</span>, <span style="color: #2d9574;">"Art"</span>, name = <span style="color: #2d9574;">'John'</span>, age =22<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">("Math", "Art")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">{name 'John', 'age': 22}</span>


course = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">"Math"</span>, <span style="color: #2d9574;">"Art"</span><span style="color: #3a81c3;">]</span>
info = <span style="color: #3a81c3;">{</span>name <span style="color: #2d9574;">'John'</span>, <span style="color: #2d9574;">'age'</span>: 22<span style="color: #3a81c3;">}</span>

student_info<span style="color: #3a81c3;">(</span>course, info<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">( ["Math", "Art"], {name 'John', 'age': 22} )</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">{}</span>


student_info<span style="color: #3a81c3;">(</span>*course, **info<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">("Math", "Art")</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">{name 'John', 'age': 22}</span>


</pre>
</div>

<p>
lamda
filter
</p>
</div>
</li>
</ul>
</div>
</div>
<div id="outline-container-orgfb3f12f" class="outline-2">
<h2 id="orgfb3f12f">Namespace &amp; Scope</h2>
<div class="outline-text-2" id="text-orgfb3f12f">
</div>
<div id="outline-container-orga75a4d2" class="outline-4">
<h4 id="orga75a4d2">Scope</h4>
<div class="outline-text-4" id="text-orga75a4d2">
<p>
LEGB : Local, Enclose, Global, Built-in 
18 video of chore schafer
</p>
<ul class="org-ul">
<li>Local   :defined with in a function</li>
<li>Enclose :defined with in a enclose {} or &lt;Tab&gt;</li>
<li>Global  : top of module or using a global key</li>
<li>Built-in: pre-assigned</li>
</ul>

<p>
py check in local then enclosed, global and last built-in
</p>

<ul class="org-ul">
<li>LOCAL SCOPE</li>
</ul>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">x</span> = <span style="color: #2d9574;">'global x'</span>

<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">test</span><span style="color: #3a81c3;">()</span>:
    <span style="color: #715ab1;">y</span>= <span style="color: #2d9574;">'local y'</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>y<span style="color: #3a81c3;">)</span>     
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>x<span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">x is global variable</span>

test<span style="color: #3a81c3;">()</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">y is local varialble in test</span>

</pre>
</div>

<ul class="org-ul">
<li>Global  varable</li>
</ul>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">x</span> = <span style="color: #2d9574;">"global x "</span>

<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">test</span><span style="color: #3a81c3;">()</span>:
    <span style="color: #3a81c3; font-weight: bold;">global</span> z

    <span style="color: #715ab1;">y</span> =<span style="color: #2d9574;">"local y"</span>

    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>x<span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">x is global </span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>y<span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">y is local</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>z<span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">z is global</span>

test<span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>x<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>z<span style="color: #3a81c3;">)</span>

</pre>
</div>

<p>
Built-in : name pre-assigned in py ex: min,
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> builtins

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">dir</span><span style="color: #6c3163;">(</span>builtins<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>


<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">min</span><span style="color: #3a81c3;">()</span>:
    <span style="color: #3a81c3; font-weight: bold;">pass</span>

<span style="color: #715ab1;">m</span>= <span style="color: #3a81c3;">min</span><span style="color: #3a81c3;">(</span><span style="color: #6c3163;">[</span> 5, 5, 4, 5<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">error : min take 0 argments (min is over riden )</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>m<span style="color: #3a81c3;">)</span>



</pre>
</div>


<p>
Encloseing &lt;Tab&gt; in define nested function
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">outer</span><span style="color: #3a81c3;">()</span>:
    <span style="color: #715ab1;">x</span>= <span style="color: #2d9574;">'outer x'</span>
    <span style="color: #715ab1;">y</span> = <span style="color: #2d9574;">'outer y'</span>

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">inner</span><span style="color: #3a81c3;">()</span>:
        <span style="color: #715ab1;">x</span>=<span style="color: #2d9574;">"inner x"</span>
        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">nonlocal x        </span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>x<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; inner x</span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>y<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; outer y</span>

    inner<span style="color: #3a81c3;">()</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>x<span style="color: #3a81c3;">)</span>

outer<span style="color: #3a81c3;">()</span>
</pre>
</div>


<p>
Scope of a variable determines the portion of prg where you can access a particual identifier or region in which var is construct/ deleted
</p>

<p>
There are two basic scope of a varialbe 
Local : can access only inside a block,function in which it is delacred  
Global: can access thorughout the prg by all function
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">local( )</td>
<td class="org-left">return all names  that are accessed locally from that function</td>
</tr>

<tr>
<td class="org-left">global( )</td>
<td class="org-left">return all names that  are accessed globally and locally from that function</td>
</tr>
</tbody>
</table>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">total</span> = 0    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">global variable</span>


<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">sum</span><span style="color: #3a81c3;">(</span>arg1, arg2<span style="color: #3a81c3;">)</span>:
    <span style="color: #715ab1;">total</span> = arg1 + arg2           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">local var</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'inside the local function total :'</span>,total<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">return</span> total

<span style="color: #3a81c3;">sum</span> <span style="color: #3a81c3;">(</span>10,20<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"outside the function  total : "</span>, total<span style="color: #3a81c3;">)</span>    
</pre>
</div>
</div>
</div>
<div id="outline-container-org3243473" class="outline-4">
<h4 id="org3243473">Namespace</h4>
<div class="outline-text-4" id="text-org3243473">
<p>
Namespace is like a dictionary (which stores key and value) stores variable and there corresponding objects(values)
In python as two namespace
</p>
</div>
<ul class="org-ul">
<li><a id="org1d84f4b"></a>Local namespace:<br />
<div class="outline-text-5" id="text-org1d84f4b">
<p>
each function, block has it own namespace where it own variables,function,methods, objects
</p>
</div>
</li>

<li><a id="org5c4f9d5"></a>Global namespace :<br />
<div class="outline-text-5" id="text-org5c4f9d5">
<p>
variables(obj ) which can be acessed to all the functions and other variables
</p>
</div>
</li>

<li><a id="org623d375"></a>Local Vs GlobalIf<br />
<div class="outline-text-5" id="text-org623d375">
<p>
local variable and global variable as same name local variable is given priority.
</p>

<p>
If a variable is defined inside a function,block it is local varialbe
If a variable is defined outside a function it is global variable
Note : To use the global variable in local namespace we have to 1st use globle statement 
</p>
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #715ab1;">count</span> = 2000
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if we don't sepecify global the count is treated as local</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if local count is not defined then it will give a error</span>
<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">Addcount</span><span style="color: #3a81c3;">()</span>:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">global count</span>
    <span style="color: #715ab1;">count</span> = count +1

priint<span style="color: #3a81c3;">(</span>count<span style="color: #3a81c3;">)</span>
Addcount<span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>count<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div id="outline-container-org42aba41" class="outline-2">
<h2 id="org42aba41">Modules (librays)</h2>
<div class="outline-text-2" id="text-org42aba41">
<p>
Grouping related method,attribues, class into a module
</p>

<ul class="org-ul">
<li>Easier to understand and Write</li>
<li>Module  allows to logically organize your code</li>
<li>Module in py  is objects  with arbitrarily named attributes that you can bind and reference</li>
<li>Simply a module is a file <code>.py file</code> consistign of py code</li>
<li>Module can define functions,classes and varibale</li>
<li>Module can also include runnable code</li>
</ul>
</div>
<div id="outline-container-org08b8904" class="outline-3">
<h3 id="org08b8904">Os module</h3>
<div class="outline-text-3" id="text-org08b8904">
</div>
<div id="outline-container-org4a6489a" class="outline-4">
<h4 id="org4a6489a">Intoduction Shortcut method:</h4>
<div class="outline-text-4" id="text-org4a6489a">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> os 
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.__file__<span style="color: #3a81c3;">)</span>             <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">/usr/lib/python2.7/os.pyc</span>

</pre>
</div>
<p>
all the method are linux based cmd
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">method</th>
<th scope="col" class="org-left">Describtion</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">os.getcwd()</td>
<td class="org-left">'<i>User/coreyshafer/Desktop</i>'</td>
</tr>

<tr>
<td class="org-left">os.listdir(path)</td>
<td class="org-left">return list names of files in current dir</td>
</tr>

<tr>
<td class="org-left">os.chdir(path)</td>
<td class="org-left">change dir to path</td>
</tr>

<tr>
<td class="org-left">os.makedir(path)</td>
<td class="org-left">create dir and it sub dir (mkdir can't)</td>
</tr>

<tr>
<td class="org-left">os.mkdir(path[, mode])</td>
<td class="org-left">create a directory</td>
</tr>

<tr>
<td class="org-left">os.rmdir(path)</td>
<td class="org-left">remove dir path</td>
</tr>

<tr>
<td class="org-left">os.removedirs(path)</td>
<td class="org-left">remove dir ectory and it sub directory</td>
</tr>

<tr>
<td class="org-left">os.remdir(path)</td>
<td class="org-left">re directory</td>
</tr>

<tr>
<td class="org-left">os.rename (src,dst)</td>
<td class="org-left">rename file or dir src to dst</td>
</tr>

<tr>
<td class="org-left">os.chroot(path)</td>
<td class="org-left">change root dir to current working path</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">os.status(file)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">os.open(file,flags[,model])</td>
<td class="org-left">open file, set flags and mode</td>
</tr>

<tr>
<td class="org-left">os.read(fd,n)</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">os.closed(fd)</td>
<td class="org-left">clsoe the file descriptor</td>
</tr>

<tr>
<td class="org-left">os.chflags(path,flags)</td>
<td class="org-left">set flags of path to numeric flags</td>
</tr>

<tr>
<td class="org-left">os.chmod(path,mode)</td>
<td class="org-left">Change mode of path to numeric mode</td>
</tr>

<tr>
<td class="org-left">os.chown(path,uid,gid)</td>
<td class="org-left">Change owner and group id of path to numerial uid and gid</td>
</tr>

<tr>
<td class="org-left">os.symlink(src,dst)</td>
<td class="org-left">Create a symbolic link(short cut) point to src name dst</td>
</tr>

<tr>
<td class="org-left">os.remove(path)</td>
<td class="org-left">remove the file for the path</td>
</tr>

<tr>
<td class="org-left">os.write</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<div class="org-src-container">
<pre class="src src-python">os.stat<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'103041478_electricity_bill_11_payment.pdf'</span><span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; os.stat_result(st_mode=33279, st_ino=14816496, st_dev=2049, st_nlink=1, st_uid=1000, st_gid=1000, st_size=108238, st_atime=1545121417, st_mtime=1542892011, st_ctime=1543569248)</span>

 os.stat<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'103041478_electricity_bill_11_payment.pdf'</span><span style="color: #3a81c3;">)</span>.st_size
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 108238</span>

<span style="color: #715ab1;">mod_time</span> = os.stat<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'103041478_electricity_bill_11_payment.pdf'</span><span style="color: #3a81c3;">)</span>.st_mtime
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">1542892011.625957 time stamp formate  for human readable formate</span>

<span style="color: #3a81c3; font-weight: bold;">from</span> datetime <span style="color: #3a81c3; font-weight: bold;">import</span> datetime
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>datetime.fromtimestamp<span style="color: #6c3163;">(</span>mod_time<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-22 18:36:51.625957</span>

</pre>
</div>
</div>

<ul class="org-ul">
<li><a id="org3003aa6"></a>File Objects<br />
<ul class="org-ul">
<li><a id="org6d40bf9"></a>Cheat Sheet<br />
<div class="outline-text-6" id="text-org6d40bf9">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">method</td>
<td class="org-left">Describtion</td>
</tr>

<tr>
<td class="org-left">os.read</td>
<td class="org-left">open file in editor</td>
</tr>

<tr>
<td class="org-left">os.write</td>
<td class="org-left">write a file</td>
</tr>

<tr>
<td class="org-left">os.rename(test001.txt, test02.txt)</td>
<td class="org-left">Rename test001.txt to test002.txt</td>
</tr>

<tr>
<td class="org-left">os.remove(test001.txt)</td>
<td class="org-left">Delete test001.txt</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</li>
<li><a id="org3fb9ad1"></a>read,write, rename, remove,<br /></li>
<li><a id="org3a4747e"></a>change dir, make dir , del dir<br /></li>
<li><a id="org45a439e"></a>Example writing/reading a file using 'os.open'<br />
<div class="outline-text-6" id="text-org45a439e">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> os,sys

<span style="color: #715ab1;">fd</span> = os.<span style="color: #3a81c3;">open</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"f1.txt"</span>, os.O_RDWR|os.O_CREAT<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Writing one string</span>
<span style="color: #715ab1;">line</span> = <span style="color: #2d9574;">"this is test"</span>
<span style="color: #715ab1;">b</span> = <span style="color: #3a81c3;">str</span>.encode<span style="color: #3a81c3;">(</span>line<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">ret</span> = os.write<span style="color: #3a81c3;">(</span>fd,b<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">consist of no of bytes writen in f1.txt</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"the no of bytes written: "</span>, ret<span style="color: #3a81c3;">)</span>
os.close<span style="color: #3a81c3;">(</span>fd<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Closed the file successfully!"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">input</span><span style="color: #3a81c3;">()</span>

fd = os.<span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"f1.txt"</span>,os.O_RDWR<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">ret</span> = os.read<span style="color: #3a81c3;">(</span>fd,12<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>ret.decode<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>
os.close<span style="color: #3a81c3;">(</span>fd<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Closed the file successfully!"</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</li>

<li><a id="org9d0847a"></a>Rename and Del file<br />
<div class="outline-text-6" id="text-org9d0847a">
<div class="org-src-container">
<pre class="src src-python">os.rename<span style="color: #3a81c3;">(</span>current_file.txt, new_file_name.txt<span style="color: #3a81c3;">)</span>
os.remove<span style="color: #3a81c3;">(</span>current_file_name.txt<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
<li><a id="orgfb761c4"></a>Directory mange<br />
<div class="outline-text-6" id="text-orgfb761c4">
<div class="org-src-container">
<pre class="src src-python">os.mkdir<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"newdir"</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">make a dir</span>
os.chdir<span style="color: #3a81c3;">(</span>dir_path<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">change current dir</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">find at which dir you are present</span>
os.getcwd<span style="color: #3a81c3;">()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">del dir</span>
os.rmdir<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"test"</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</li>
<li><a id="orgb895a5a"></a>File Objet Ex2<br />
<div class="outline-text-5" id="text-orgb895a5a">
<p>
Whether you use destop or web applications File Objest are basics used
</p>

<p>
built-in open cmd :
         Noraml is not re-commanded
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">f</span>= <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'text.txt'</span>,<span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">In general dir :'path' is given  , defalut: current dir, python searchpath</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f.name<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f.mode<span style="color: #3a81c3;">)</span>

f.close<span style="color: #3a81c3;">()</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">f.close()  is complusory defined</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">If file is n't close then it may memory leak</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">So content-text manger is used insted of open()</span>

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'text.txt'</span>,<span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> f:
    <span style="color: #3a81c3; font-weight: bold;">pass</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Advantages</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Automatically close file</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">auto close if there is exception</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">EX</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f.closed<span style="color: #3a81c3;">)</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt; True</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">return True if file is closed</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(f.read()) # VALUE ERROR: i/O operator of closed file</span>

</pre>
</div>
</div>
<ul class="org-ul">
<li><a id="org68e5674"></a>os.open<br />
<div class="outline-text-6" id="text-org68e5674">
<p>
os.open (file, flags, mode)
os.read,os.close
</p>

<div class="org-src-container">
<pre class="src src-python">os.<span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">file</span>, flage<span style="color: #6c3163;">[</span>, mode<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">flag</th>
<th scope="col" class="org-left">Describtion</th>
<th scope="col" class="org-left">mode</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">os.O<sub>RDONLY</sub></td>
<td class="org-left">open for reading only</td>
<td class="org-left">'r'</td>
</tr>

<tr>
<td class="org-left">os.O<sub>WRONLY</sub></td>
<td class="org-left">open for writing only</td>
<td class="org-left">'w'</td>
</tr>

<tr>
<td class="org-left">os.O<sub>RDWR</sub></td>
<td class="org-left">open for reading and wring</td>
<td class="org-left">'r+'</td>
</tr>

<tr>
<td class="org-left">os.O<sub>NONBLOCK</sub></td>
<td class="org-left">do not block on open</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">os.O<sub>APPEND</sub></td>
<td class="org-left">append on each write</td>
<td class="org-left">'a'</td>
</tr>

<tr>
<td class="org-left">os.O<sub>CREAT</sub></td>
<td class="org-left">create file if it does not exist</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</li>
</ul>
</li>
</ul>
</div>

<div id="outline-container-org71c03ef" class="outline-4">
<h4 id="org71c03ef">Ex of Dir managements</h4>
<div class="outline-text-4" id="text-org71c03ef">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> os
form datetime <span style="color: #3a81c3; font-weight: bold;">import</span> datetime
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">dir</span><span style="color: #6c3163;">(</span>os<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">show all attribues and method in module</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Get current working Dir [os.getcwd()]   [pwd in linux]</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.getcwd<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">/home/dan</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Change Dir</span>
os.chdir<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'/home/dan/Desktop'</span><span style="color: #3a81c3;">)</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">/home/dan/Desktop</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.getcwd<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">List of file and folders in current dir</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.listdir<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Make a dir</span>
os.mkdir<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Os-Demo-1'</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">os.mkdir('Os-Demo-1/Sub-DEMO') # ERROR: CANNOT CREATE DIR INSIDE</span>
os.makedirs<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Os-Demo-1/Sub-DEMO'</span><span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">advange os makedirs is it can create dir inside dirs</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Delete a dir(folders)</span>
os.rmdir<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Os-Demo-1'</span><span style="color: #3a81c3;">)</span>
os.remodedirs<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Os-Demo-1'</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Rename a dir</span>
os.rename<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'old.txt'</span>, <span style="color: #2d9574;">'new.txt'</span><span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Status of demo</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.stat<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'demo.txt'</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; os.stat_result(st_mode=16877, st_ino=8524201, st_dev=2049, st_nlink=2, st_uid=1000, st_gid=1000, st_size=4096, st_atime=1543198458, st_mtime=1543082778, st_ctime=1543082778)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Size of file</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Size of file: demo.txt is :'</span> + os.status<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'demo.txt'</span><span style="color: #6c3163;">)</span>.st_size<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt; 4096</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Last Modified Time </span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.stat<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'demo.txt'</span><span style="color: #6c3163;">)</span>.st_mtime<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 1543082778 (this is in timestamp formate )</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Modified time stamps</span>
<span style="color: #715ab1;">mod_time</span> = os.stat<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'demo.txt'</span><span style="color: #3a81c3;">)</span>.st_mtime
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>datetime.fromtimestap<span style="color: #6c3163;">(</span>mod_time<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 2018-11-24 23:36:18.194036</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">See entire directory (child director)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgfc8b7c6" class="outline-4">
<h4 id="orgfc8b7c6">Os walk [tree of all file/sub-dir]</h4>
<div class="outline-text-4" id="text-orgfc8b7c6">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> os

<span style="color: #715ab1;">path</span> = <span style="color: #2d9574;">'/home/dan/Desktop'</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> dirpath <span style="color: #3a81c3; font-weight: bold;">in</span> os.walk<span style="color: #3a81c3;">(</span>path<span style="color: #3a81c3;">)</span>:
  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">dirpath  = ('seach_path', [list of dir in search_path],[list of files in search_path])</span>
  <span style="color: #715ab1;">drp</span> = dirpath<span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">]</span>
  <span style="color: #715ab1;">dirnames</span> = dirpath<span style="color: #3a81c3;">[</span>1<span style="color: #3a81c3;">]</span>
  <span style="color: #715ab1;">filenames</span> = dirpath<span style="color: #3a81c3;">[</span>2<span style="color: #3a81c3;">]</span>
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'path :'</span>,drp<span style="color: #6c3163;">[</span><span style="color: #3a81c3;">len</span><span style="color: #2d9574;">(</span>path<span style="color: #2d9574;">)</span>:<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'dir:'</span>+ <span style="color: #2d9574;">'\n  '</span> +  <span style="color: #2d9574;">'\n  '</span>.join<span style="color: #6c3163;">(</span>dirnames<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'files:'</span>+ <span style="color: #2d9574;">'\n   '</span> + <span style="color: #2d9574;">'\n '</span>.join<span style="color: #6c3163;">(</span>filenames<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">()</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-orgd870216" class="outline-4">
<h4 id="orgd870216">Os path [JOIN AND SPLIT PATH]</h4>
<div class="outline-text-4" id="text-orgd870216">
<div class="org-src-container">
<pre class="src src-python"> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Joining , Spiliting,</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.environ.get<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'HOME'</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt; /User/jayradhe</span>

<span style="color: #715ab1;">file_path</span> = os.path.join<span style="color: #3a81c3;">(</span>os.environ.get<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'HOME'</span><span style="color: #6c3163;">)</span>, <span style="color: #2d9574;">'text.txt'</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>file_path<span style="color: #3a81c3;">)</span>

os.path.basename<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'/temp/test.txt'</span><span style="color: #3a81c3;">)</span><span style="color: #e0211d; text-decoration: overline;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">test.txt</span>
os.path.dirname<span style="color: #e0211d; text-decoration: overline;">(</span><span style="color: #2d9574;">'/temp/test.txt'</span><span style="color: #e0211d; text-decoration: overline;">))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">/temp</span>
os.path.split<span style="color: #e0211d; text-decoration: overline;">(</span><span style="color: #2d9574;">'/temp/test.txt'</span><span style="color: #e0211d; text-decoration: overline;">))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">('/temp', 'test.txt')</span>
os.path.exists<span style="color: #e0211d; text-decoration: overline;">(</span><span style="color: #2d9574;">'/temp/test.txt'</span><span style="color: #e0211d; text-decoration: overline;">))</span>
os.path.isdir<span style="color: #e0211d; text-decoration: overline;">(</span><span style="color: #2d9574;">'/temp/test.txt'</span><span style="color: #e0211d; text-decoration: overline;">))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">False</span>
os.path.isfile<span style="color: #e0211d; text-decoration: overline;">(</span><span style="color: #2d9574;">'/temp/test.txt'</span><span style="color: #e0211d; text-decoration: overline;">))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">False</span>
os.path.splittext<span style="color: #e0211d; text-decoration: overline;">(</span><span style="color: #2d9574;">'/temp/test.txt'</span><span style="color: #e0211d; text-decoration: overline;">))</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">('/temp/test','.txt')</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org32504bb" class="outline-4">
<h4 id="org32504bb">Os Flags</h4>
<div class="outline-text-4" id="text-org32504bb">
<div class="org-src-container">
<pre class="src src-python">os.environ.get<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'HOME'</span><span style="color: #3a81c3;">)</span>                                      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;'/home/dan'</span>
<span style="color: #715ab1;">path1</span> = os.environ.get<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'HOME'</span><span style="color: #3a81c3;">)</span> + <span style="color: #2d9574;">'/'</span> + <span style="color: #2d9574;">'test.txt'</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;'/home/dan/test.txt'</span>
<span style="color: #715ab1;">path2</span> = os.path.join<span style="color: #3a81c3;">(</span>os.environ.get<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'HOME'</span><span style="color: #6c3163;">)</span>,<span style="color: #2d9574;">'text.txt'</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; '/home/dan/text.txt'</span>

<span style="color: #715ab1;">temp</span> = <span style="color: #2d9574;">'/home/dan/text.txt'</span>

os.path.basename<span style="color: #3a81c3;">(</span>temp<span style="color: #3a81c3;">)</span>      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;'text.txt'</span>
os.path.dirname<span style="color: #3a81c3;">(</span>temp<span style="color: #3a81c3;">)</span>       <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;'/home/dan'</span>
os.path.split<span style="color: #3a81c3;">(</span>temp<span style="color: #3a81c3;">)</span>         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;('/home/dan', 'text.txt')</span>
os.path.exists<span style="color: #3a81c3;">(</span>temp<span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;False</span>
os.path.isdir<span style="color: #3a81c3;">(</span>temp<span style="color: #3a81c3;">)</span>         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;False</span>
os.path.isfile<span style="color: #3a81c3;">(</span>temp<span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; False</span>
os.path.splitext<span style="color: #3a81c3;">(</span>temp<span style="color: #3a81c3;">)</span>      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; ('/home/dan/text', '.txt')</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org52b378c" class="outline-3">
<h3 id="org52b378c">Datetime module</h3>
<div class="outline-text-3" id="text-org52b378c">
</div>
<div id="outline-container-org24b823a" class="outline-4">
<h4 id="org24b823a">Introduction</h4>
<div class="outline-text-4" id="text-org24b823a">
<p>
There are two types of model 
</p>
<ul class="org-ul">
<li>navie datetime</li>
<li>aware datetime</li>
</ul>

<p>
In navie datetime consist of 
</p>
<ul class="org-ul">
<li>date      [year, month, day, weekday]</li>
<li>time      [hh,mm,ss,msec]</li>
<li>date&amp;time [year, month, day, weekday],[hh,mm,ss,msec]</li>
</ul>

<p>
In aware datetime in addtion to navie consist of timezone
</p>
<ul class="org-ul">
<li>timezone +/- 00:00</li>
</ul>

<p>
In general datetime module does n't consist of database of timezone
so we use other package like pytz, dateulti.tz 
</p>
</div>
</div>

<div id="outline-container-org13b0b17" class="outline-4">
<h4 id="org13b0b17">Date</h4>
<div class="outline-text-4" id="text-org13b0b17">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">navie datetime, aware datetime</span>
<span style="color: #3a81c3; font-weight: bold;">import</span> datetime
<span style="color: #715ab1;">d</span> = datetime.date<span style="color: #3a81c3;">(</span>2016,7,24<span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">YYYY,MM,DD</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>d<span style="color: #3a81c3;">)</span>      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt;2016-07-24</span>

<span style="color: #715ab1;">tday</span> = datetime.date.today<span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tday<span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-28</span>

<span style="color: #3a81c3; font-weight: bold;">import</span> datetime


<span style="color: #715ab1;">tday</span> = datetime.date.today<span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tday.year<span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tday.month<span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">11</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tday.day<span style="color: #3a81c3;">)</span>                 <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">26</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tday<span style="color: #3a81c3;">)</span>                     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-20</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tday.weekday<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">0 # weekday MONDAY :0, SUNDAY :6</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tday.isoweekday<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">1 # iso weekday MONDAY:1 SUNDAY:7</span>




</pre>
</div>
</div>
</div>

<div id="outline-container-org930adfd" class="outline-4">
<h4 id="org930adfd">Time</h4>
<div class="outline-text-4" id="text-org930adfd">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> datetime

<span style="color: #715ab1;">t</span> = datetime.time<span style="color: #3a81c3;">(</span>9, 30, 45, 100000<span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">hh,mm,ss,micro ss</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>t<span style="color: #3a81c3;">)</span>                  <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">09:30:45.100000</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>t.hour<span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">9</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>t.<span style="color: #3a81c3;">min</span><span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">00:00:00</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>t.minute<span style="color: #3a81c3;">)</span>             <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">30</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>t.<span style="color: #3a81c3;">min</span><span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">00:00:00</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>t.minute<span style="color: #3a81c3;">)</span>             <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">30</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org9b1b37d" class="outline-4">
<h4 id="org9b1b37d">timedelda</h4>
<div class="outline-text-4" id="text-org9b1b37d">
<p>
<a href="https://pynatixbve.com/python-timedelta/">https://pynatixbve.com/python-timedelta/</a>
</p>

<p>
<a href="https://www.includehelp.com/python/timedelta-total_seconds-method-with-example.aspx">https://www.includehelp.com/python/timedelta-total_seconds-method-with-example.aspx</a>
</p>
<div class="org-src-container">
<pre class="src src-pythons">import datetime
datetime.timedelta(weeks=0, days=0, hours=0,  minutes=0, seconds=0, milliseconds=0, microseconds=0 )
#Returns : Date

###############
#  tdelta
#################
tday = datetime.datetime.now()
tdelta = dt.timedelta(days=7)

# print(tday +tdelta)                 # 2018-12-03
# print(tday - tdelta)                # 2018-11-19
bday = datetime.datetime(2022,8,25,0,0,0)
till_day = bday-tday
print(f'bday \t\t= {bday}')
print(f'till_day \t={till_day} and has remaing days {till_day.days}')                     # -93 days, 0:00:00



print("Calculate time")
total_seconds = till_day.total_seconds()
remain_seconds = int(total_seconds % 60)
remain_minutes = int(((total_seconds -remain_seconds)% 3600) // 60)
remain_hours =  total_seconds//3600
remain_days = int(remain_hours//24)
remain_hours = int(remain_hours - remain_days*24)
print(f"\t remaining time = {remain_days} days {remain_hours}:{remain_minutes}:{remain_seconds}")
print(f"\t total minutes \t= {(remain_days*24 + remain_hours)*60 + remain_minutes}")
print(f"\t total hours \t= {(remain_days*24 + remain_hours) }")
print(f"\t total second \t= {till_day.total_seconds()}")     # -8035200.0

</pre>
</div>
</div>
</div>
<div id="outline-container-orgaf0a1fd" class="outline-4">
<h4 id="orgaf0a1fd">datetime  tz-naive or with default Timezone</h4>
<div class="outline-text-4" id="text-orgaf0a1fd">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">dt_today</span> = datetime.datetime.today<span style="color: #3a81c3;">()</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">current local time NO-TIMEZOME</span>
<span style="color: #715ab1;">dt_now</span> = datetime.datetime.now<span style="color: #3a81c3;">()</span>            <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">give TIMEZONE : default: NONE</span>
dt_utcnow = datetime.datetime.utcnow<span style="color: #3a81c3;">()</span>      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">UTC info: NONE</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>dt_today<span style="color: #3a81c3;">)</span>             <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-26 21:20:31.829934</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>dt_now<span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-26 21:20:49.192463</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>dt_utcnow<span style="color: #3a81c3;">)</span>            <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-26 15:51:51.149416</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org219ca98" class="outline-4">
<h4 id="org219ca98">From datetime to only time</h4>
<div class="outline-text-4" id="text-org219ca98">
<pre class="example">
from datetime import datetime

strg = "2017-07-20-10-30"

dt = datetime.strptime(strg, '%Y-%m-%d-%H-%M')
tme = dt.time()
print(tme)  # 10:30:00

</pre>
</div>
</div>
</div>
<div id="outline-container-orgd78892d" class="outline-3">
<h3 id="orgd78892d">datetime tz-aware</h3>
<div class="outline-text-3" id="text-orgd78892d">
</div>
<div id="outline-container-org337f4ee" class="outline-4">
<h4 id="org337f4ee">pytz module for Timezone</h4>
<div class="outline-text-4" id="text-org337f4ee">
<p>
by default python set timezone :default +00:00 or utc time 
indian time zone <code>'Asia/Kolkata'</code>
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> pytz
<span style="color: #3a81c3; font-weight: bold;">import</span> datetime
<span style="color: #3a81c3; font-weight: bold;">import</span> pytz

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"\n"</span>.join<span style="color: #6c3163;">(</span>pytz.all_timezones<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">dt_today</span> = datetime.datetime.today<span style="color: #3a81c3;">()</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span>
<span style="color: #715ab1;">yy</span> = dt_today.year
<span style="color: #715ab1;">mm</span> = dt_today.month
<span style="color: #715ab1;">dd</span> = dt_today.day
<span style="color: #715ab1;">hh</span> = dt_today.hour
<span style="color: #715ab1;">mn</span> = dt_today.minute
<span style="color: #715ab1;">sec</span> = dt_today.second
<span style="color: #715ab1;">msec</span> = dt_today.microsecond
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">WRONG :</span>
dt = datetime.datetime<span style="color: #3a81c3;">(</span>yy,mm,dd,hh,mn,sec,msec,tzinfo=pytz.UTC<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># we are in timezone india(koltala) we can't assign timzone to default</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'datetime.today:\t'</span>,dt<span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-27 12:30:45+00:00</span>


dt_now = datetime.datetime.now<span style="color: #3a81c3;">(</span>tz=pytz.UTC<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'datetime.now:\t'</span>,dt_now<span style="color: #3a81c3;">)</span>           <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-26 20:32:32.911316+00:00</span>

dt_utcnow = datetime.datetime.utcnow<span style="color: #3a81c3;">()</span>.replace<span style="color: #3a81c3;">(</span>tzinfo=pytz.UTC<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'utcnow:\t \t'</span>,dt_utcnow<span style="color: #3a81c3;">)</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-26 20:33:24.122555+00:00</span>

dt_dtz = datetime.datetime.now<span style="color: #3a81c3;">(</span>tz=pytz.UTC<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"time zone defalut :\t"</span>, dt_dtz<span style="color: #3a81c3;">)</span>
dt_UsMountain_tz = dt_dtz.astimezone<span style="color: #3a81c3;">(</span>pytz.timezone<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'US/Mountain'</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"time zone US/Moun : \t"</span>, dt_UsMountain_tz<span style="color: #3a81c3;">)</span>                                 <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-26 13:36:10.214904-07:00</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orge7c96eb" class="outline-4">
<h4 id="orge7c96eb">List of Timezone</h4>
<div class="outline-text-4" id="text-orge7c96eb">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">## </span><span style="color: #2aa1ae; background-color: #ecf3ec;">List of all timezones</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> tz <span style="color: #3a81c3; font-weight: bold;">in</span> pytz.all_timezones:
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>tz<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgbea1ec4" class="outline-4">
<h4 id="orgbea1ec4">set timezone with datatime.timezone</h4>
<div class="outline-text-4" id="text-orgbea1ec4">
<p>
<a href="https://queirozf.com/entries/python-datetime-with-timezones-examples-and-reference">https://queirozf.com/entries/python-datetime-with-timezones-examples-and-reference</a>
</p>
</div>
</div>
<div id="outline-container-org83c9cee" class="outline-4">
<h4 id="org83c9cee">Convert timezone or remove timezone</h4>
</div>
<div id="outline-container-orgbe56d85" class="outline-4">
<h4 id="orgbe56d85">Change one timezone to other timezone(using astimezone)</h4>
<div class="outline-text-4" id="text-orgbe56d85">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">temp_date.tz_convert(None)</span>
<span style="color: #3a81c3; font-weight: bold;">import</span> datetime <span style="color: #3a81c3; font-weight: bold;">as</span> dt
<span style="color: #3a81c3; font-weight: bold;">import</span> pytz
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Naive Date Time </span>
<span style="color: #715ab1;">dt_naive</span> = dt.datetime<span style="color: #3a81c3;">(</span>2022,9,19,9,30,0<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(dt_naive)                                    # 2022-09-19 09:30:00</span>
<span style="color: #715ab1;">New_York_tz</span> = pytz.timezone<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'America/New_York'</span><span style="color: #3a81c3;">)</span> 
<span style="color: #715ab1;">dt_New_York_tz</span> = New_York_tz.localize<span style="color: #3a81c3;">(</span>dt_naive<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>dt_New_York_tz<span style="color: #3a81c3;">)</span>                                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2022-09-19 09:30:00-04:00</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">India Stand Time  + 5:30 </span>
<span style="color: #715ab1;">ist</span>= <span style="color: #2d9574;">'Asia/Calcutta'</span>
<span style="color: #715ab1;">India_timezone</span> = pytz.timezone<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Asia/Calcutta'</span><span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">timezone = pytz.timezone('Asia/Calcutta')</span>
<span style="color: #715ab1;">India_time_tz</span> = new_york_time_tz.astimezone<span style="color: #3a81c3;">(</span>India_timezone<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">India_time_tz = India_timezone.localize(new_york_time_tz)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>India_time_tz<span style="color: #3a81c3;">)</span>                                 <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2022-09-19 19:00:00+05:30 </span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>India_time_tz.tz_localize<span style="color: #6c3163;">(</span><span style="color: #4e3163;">None</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>               <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To get utc time and remove timezone</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>India_time_tz.tz_convert<span style="color: #6c3163;">(</span><span style="color: #4e3163;">None</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To get local indian time </span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">from</span> datetime <span style="color: #3a81c3; font-weight: bold;">import</span> datetime
<span style="color: #3a81c3; font-weight: bold;">import</span> pytz

<span style="color: #715ab1;">naive</span>= datetime.now<span style="color: #3a81c3;">()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">## </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Adding a timezone</span>
<span style="color: #715ab1;">timezone</span> = pytz.timezone<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Asia/Kolkata"</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">aware1</span> = naive.astimezone<span style="color: #3a81c3;">(</span>timezone<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">## </span><span style="color: #2aa1ae; background-color: #ecf3ec;">After adding the timezone info, </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">## </span><span style="color: #2aa1ae; background-color: #ecf3ec;">the object it becomes aware</span>
<span style="color: #715ab1;">timezone</span> = pytz.timezone<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Asia/Tokyo"</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">aware2</span> = aware1.astimezone<span style="color: #3a81c3;">(</span>timezone<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"naive\t="</span>,naive<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"aware1\t="</span>,aware1<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"aware2\t="</span>,aware2<span style="color: #3a81c3;">)</span>

</pre>
</div>

<div class="org-src-container">
<pre class="src src-result">naive	= 2022-09-02 08:34:45.727176
aware1	= 2022-09-02 08:34:45.727176+05:30
aware2	= 2022-09-02 12:04:45.727176+09:00
</pre>
</div>

<pre class="example">

df = df.tz_convert(None)
</pre>
</div>
</div>
<div id="outline-container-orgcc4ef6b" class="outline-4">
<h4 id="orgcc4ef6b">Naive to timezone (tz -naive dt) to (tz-aware dt) or (naive dt to datetime withtimezone)</h4>
<div class="outline-text-4" id="text-orgcc4ef6b">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">given naive datetime to timezone</span>

<span style="color: #715ab1;">dt_naive</span> = datetime.datetime.now<span style="color: #3a81c3;">()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(dt_naive)                                         # 2018-11-27 02:10:09:10.0000</span>
<span style="color: #715ab1;">UsMountain_tz</span> = pytz.timezone<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'US/Mountain'</span><span style="color: #3a81c3;">)</span> 
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(UsMountain_tz)                                    # US/Mountain</span>
<span style="color: #715ab1;">dt_UsMountain_tz</span> = UsMountain_tz.localize<span style="color: #3a81c3;">(</span>dt_naive<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"time zone US/Moun : \t"</span>,dt_UsMountain_tz<span style="color: #3a81c3;">)</span>                                <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">2018-11-27 02:10:19.941388-07:00</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org0ae99c8" class="outline-4">
<h4 id="org0ae99c8">String 2 Datetime or Datetime 2 String</h4>
<div class="outline-text-4" id="text-org0ae99c8">
<p>
Python strftime cheatsheet  <a href="https://strftime.org/">https://strftime.org/</a> <br />
<a href="https://www.programiz.com/python-programming/datetime/strftime">https://www.programiz.com/python-programming/datetime/strftime</a>
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-right" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Code</th>
<th scope="col" class="org-right">Example</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">%a</td>
<td class="org-right">Sun</td>
<td class="org-left">Weekday as locale’s abbreviated name.</td>
</tr>

<tr>
<td class="org-left">%A</td>
<td class="org-right">Sunday</td>
<td class="org-left">Weekday as locale’s full name.</td>
</tr>

<tr>
<td class="org-left">%w</td>
<td class="org-right">0</td>
<td class="org-left">Weekday as a decimal number, where 0 is Sunday and 6 is Saturday.</td>
</tr>

<tr>
<td class="org-left">%d</td>
<td class="org-right">08</td>
<td class="org-left">Day of the month as a zero-padded decimal number.</td>
</tr>

<tr>
<td class="org-left">%-d</td>
<td class="org-right">8</td>
<td class="org-left">Day of the month as a decimal number. (Platform specific)</td>
</tr>

<tr>
<td class="org-left">%b</td>
<td class="org-right">Sep</td>
<td class="org-left">Month as locale’s abbreviated name.</td>
</tr>

<tr>
<td class="org-left">%B</td>
<td class="org-right">September</td>
<td class="org-left">Month as locale’s full name.</td>
</tr>

<tr>
<td class="org-left">%m</td>
<td class="org-right">09</td>
<td class="org-left">Month as a zero-padded decimal number.</td>
</tr>

<tr>
<td class="org-left">%-m</td>
<td class="org-right">9</td>
<td class="org-left">Month as a decimal number. (Platform specific)</td>
</tr>

<tr>
<td class="org-left">%y</td>
<td class="org-right">13</td>
<td class="org-left">Year without century as a zero-padded decimal number.</td>
</tr>

<tr>
<td class="org-left">%Y</td>
<td class="org-right">2013</td>
<td class="org-left">Year with century as a decimal number.</td>
</tr>

<tr>
<td class="org-left">%H</td>
<td class="org-right">07</td>
<td class="org-left">Hour (24-hour clock) as a zero-padded decimal number.</td>
</tr>

<tr>
<td class="org-left">%-H</td>
<td class="org-right">7</td>
<td class="org-left">Hour (24-hour clock) as a decimal number. (Platform specific)</td>
</tr>

<tr>
<td class="org-left">%I</td>
<td class="org-right">07</td>
<td class="org-left">Hour (12-hour clock) as a zero-padded decimal number.</td>
</tr>

<tr>
<td class="org-left">%-I</td>
<td class="org-right">7</td>
<td class="org-left">Hour (12-hour clock) as a decimal number. (Platform specific)</td>
</tr>

<tr>
<td class="org-left">%p</td>
<td class="org-right">AM</td>
<td class="org-left">Locale’s equivalent of either AM or PM.</td>
</tr>

<tr>
<td class="org-left">%M</td>
<td class="org-right">06</td>
<td class="org-left">Minute as a zero-padded decimal number.</td>
</tr>

<tr>
<td class="org-left">%-M</td>
<td class="org-right">6</td>
<td class="org-left">Minute as a decimal number. (Platform specific)</td>
</tr>

<tr>
<td class="org-left">%S</td>
<td class="org-right">05</td>
<td class="org-left">Second as a zero-padded decimal number.</td>
</tr>

<tr>
<td class="org-left">%-S</td>
<td class="org-right">5</td>
<td class="org-left">Second as a decimal number. (Platform specific)</td>
</tr>

<tr>
<td class="org-left">%f</td>
<td class="org-right">000000</td>
<td class="org-left">Microsecond as a decimal number, zero-padded on the left.</td>
</tr>

<tr>
<td class="org-left">%z</td>
<td class="org-right">+0000</td>
<td class="org-left">UTC offset in the form ±HHMM[SS[.ffffff]] (empty string if the object is naive).</td>
</tr>

<tr>
<td class="org-left">%Z</td>
<td class="org-right">UTC</td>
<td class="org-left">Time zone name (empty string if the object is naive).</td>
</tr>

<tr>
<td class="org-left">%j</td>
<td class="org-right">251</td>
<td class="org-left">Day of the year as a zero-padded decimal number.</td>
</tr>

<tr>
<td class="org-left">%-j</td>
<td class="org-right">251</td>
<td class="org-left">Day of the year as a decimal number. (Platform specific)</td>
</tr>

<tr>
<td class="org-left">%U</td>
<td class="org-right">36</td>
<td class="org-left">Week number of the year (Sunday as the first day of the week) as a zero padded decimal number. All days in a new year preceding the first Sunday are considered to be in week 0.</td>
</tr>

<tr>
<td class="org-left">%W</td>
<td class="org-right">35</td>
<td class="org-left">Week number of the year (Monday as the first day of the week) as a decimal number. All days in a new year preceding the first Monday are considered to be in week 0.</td>
</tr>

<tr>
<td class="org-left">%c</td>
<td class="org-right">Sun Sep 8 07:06:05 2013</td>
<td class="org-left">Locale’s appropriate date and time representation.</td>
</tr>

<tr>
<td class="org-left">%x</td>
<td class="org-right">09/08/13</td>
<td class="org-left">Locale’s appropriate date representation.</td>
</tr>

<tr>
<td class="org-left">%X</td>
<td class="org-right">07:06:05</td>
<td class="org-left">Locale’s appropriate time representation.</td>
</tr>

<tr>
<td class="org-left">%%</td>
<td class="org-right">%</td>
<td class="org-left">A literal '%' character.</td>
</tr>
</tbody>
</table>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> datetime
<span style="color: #3a81c3; font-weight: bold;">import</span> pytz

<span style="color: #715ab1;">dt_mtn</span> = datetime.datetime.now<span style="color: #3a81c3;">(</span>tz=pytz.time<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'US/Mountain'</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>dt_mtn.isoformat<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span><span style="color: #e0211d; text-decoration: overline;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #e0211d; text-decoration: overline;">(</span>dt_mtn.strftime<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'%B %d, %Y'</span><span style="color: #3a81c3;">)</span><span style="color: #e0211d; text-decoration: overline;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">August 15, 2021</span>



<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">CONVERT STRING TO DATETIME </span>
dt_str  = <span style="color: #2d9574;">'August 15, 2021'</span>

dt= datetime.datetime.strptime<span style="color: #e0211d; text-decoration: overline;">(</span>dt_str,<span style="color: #2d9574;">'%B %d, %Y'</span><span style="color: #e0211d; text-decoration: overline;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #e0211d; text-decoration: overline;">(</span>dt<span style="color: #e0211d; text-decoration: overline;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">strftime - Datetime to String </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">strptime - String to Datetime</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgdb9a28a" class="outline-4">
<h4 id="orgdb9a28a">Ex Datetime and</h4>
<div class="outline-text-4" id="text-orgdb9a28a">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> os
<span style="color: #3a81c3; font-weight: bold;">from</span> datetime <span style="color: #3a81c3; font-weight: bold;">import</span> datetime
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Change Dir</span>
os.chdir<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'/home/dan/Desktop'</span><span style="color: #3a81c3;">)</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">/home/dan/Desktop</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.getcwd<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Status of demo</span>
os.stats<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'game'</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; os.stat_result(st_mode=16877, st_ino=8524201, st_dev=2049, st_nlink=2, st_uid=1000, st_gid=1000, st_size=4096, st_atime=1543198458, st_mtime=1543082778, st_ctime=1543082778)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Size of file</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Size of file: game is :'</span> + os.status<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'game'</span><span style="color: #6c3163;">)</span>.st_size<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt; 4096</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Last Modified Time </span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>os.stat<span style="color: #6c3163;">(</span><span style="color: #2d9574;">'game'</span><span style="color: #6c3163;">)</span>.st_mtime<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 1543082778 (this is in timestamp formate )</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Modified time stamps</span>
<span style="color: #715ab1;">mod_time</span> = os.stat<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'game'</span><span style="color: #3a81c3;">)</span>.st_mtime
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>datetime.fromtimestap<span style="color: #6c3163;">(</span>mod_time<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; 2018-11-24 23:36:18.194036</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">See entire directory (child director)</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgfb95555" class="outline-3">
<h3 id="orgfb95555">File Module or File Object</h3>
<div class="outline-text-3" id="text-orgfb95555">
</div>
<div id="outline-container-orgc8ec7ae" class="outline-4">
<h4 id="orgc8ec7ae">File acess modes</h4>
<div class="outline-text-4" id="text-orgc8ec7ae">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">read only</td>
<td class="org-left">'r'</td>
</tr>

<tr>
<td class="org-left">read and write</td>
<td class="org-left">'r+</td>
</tr>

<tr>
<td class="org-left">write only</td>
<td class="org-left">'w'</td>
</tr>

<tr>
<td class="org-left">write and read</td>
<td class="org-left">'w+'</td>
</tr>

<tr>
<td class="org-left">append only</td>
<td class="org-left">'a'</td>
</tr>

<tr>
<td class="org-left">append and read</td>
<td class="org-left">'a+'</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">f</span> = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'test.txt'</span>,<span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f.name<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f.mode<span style="color: #3a81c3;">)</span>
f.close 



<span style="color: #715ab1;">f</span> = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'newfile.txt'</span>, <span style="color: #2d9574;">'w'</span><span style="color: #3a81c3;">)</span>
f.write<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Hello\n'</span><span style="color: #3a81c3;">)</span>
f.writelines<span style="color: #3a81c3;">(</span><span style="color: #6c3163;">[</span><span style="color: #2d9574;">'Hello'</span>,<span style="color: #2d9574;">'World\n'</span><span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>

f.close
</pre>
</div>
</div>
</div>
<div id="outline-container-org1415563" class="outline-4">
<h4 id="org1415563">Contant manager</h4>
<div class="outline-text-4" id="text-org1415563">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'text.txt'</span>,<span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">f</span>:
   f_contents = f.read<span style="color: #3a81c3;">()</span>              <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">read entire file</span>
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f_contents<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Disadvantages:    # if file size is more then memory is more &gt; slower</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Advantages :      # To read a small size file</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">what if  we need to read large  we n't  wanted to load in memory </span>
   f_contents = f.readlines<span style="color: #3a81c3;">()</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">list of lines ['line1 \n', 'line2 \n'..........etc]</span>
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f_contents<span style="color: #3a81c3;">)</span>

   <span style="color: #715ab1;">f_id_line</span> = f.readline<span style="color: #3a81c3;">()</span>
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f_f_id_line, end=<span style="color: #2d9574;">''</span><span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; line1 </span>

   f_id_line = f.readline<span style="color: #3a81c3;">()</span>
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f_f_id_line, end=<span style="color: #2d9574;">''</span><span style="color: #3a81c3;">)</span>                <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; line2</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">####################</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Using for loop to read line</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">####################</span>
   <span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> f:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>line, end=<span style="color: #2d9574;">''</span><span style="color: #3a81c3;">)</span>
      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">effiecient for read line</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">#############</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">More control read 10 char</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">###################</span>
size_to_read = 10
f_content = f.read<span style="color: #3a81c3;">(</span>size_to_read<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f_content, end =<span style="color: #2d9574;">'*'</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">read 10 char for index seperate by *</span>

<span style="color: #3a81c3; font-weight: bold;">while</span> <span style="color: #3a81c3;">len</span><span style="color: #3a81c3;">(</span>f_contents <span style="color: #3a81c3;">)</span> &gt;0:
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f_contents, end=<span style="color: #2d9574;">'*'</span><span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"\n index or current possion:\n "</span>f.tell<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">current possion</span>
  f_content = f.read<span style="color: #3a81c3;">(</span>size_to_read<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(f_tell()) # </span>
  f.seek<span style="color: #3a81c3;">(</span>0<span style="color: #3a81c3;">)</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">to change the position to starting of file </span>
  f_content = f.read<span style="color: #3a81c3;">(</span>size_to_read<span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f_content, end =<span style="color: #2d9574;">'*'</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">read 10 char for index seperate by *</span>
  f_content = f.read<span style="color: #3a81c3;">(</span>size_to_read<span style="color: #3a81c3;">)</span>
  f.seek<span style="color: #3a81c3;">(</span>0<span style="color: #3a81c3;">)</span>
  f_content = f.read<span style="color: #3a81c3;">(</span>size_to_read<span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f_content, end =<span style="color: #2d9574;">'*'</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">read 10 char for index seperate by *</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orga0518bc" class="outline-4">
<h4 id="orga0518bc">Write mode or Overwrite mode with Contant Manager</h4>
<div class="outline-text-4" id="text-orga0518bc">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'test2.txt'</span>, <span style="color: #2d9574;">'w'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> f:
     <span style="color: #3a81c3; font-weight: bold;">pass</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#    </span><span style="color: #2aa1ae; background-color: #ecf3ec;">f.write("Test")</span>

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'test3.txt'</span>, <span style="color: #2d9574;">'w'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> f:
    f.write<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Test First line'</span><span style="color: #3a81c3;">)</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">str 'Test' is write in file</span>
    f.seek<span style="color: #3a81c3;">(</span>0<span style="color: #3a81c3;">)</span>
    f.write<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Second line'</span><span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Disadvange:</span>
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">If text3.txt is already existed then it will start write at the EOF</span>

    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">If use to movke to begin of flie : f.seek(0)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Copy a file</span>

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'test.txt'</span>, <span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> rf:
    <span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'test_copy.txt'</span>, <span style="color: #2d9574;">'w'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> wf:
        <span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> rf:
            wf.write<span style="color: #3a81c3;">(</span>line<span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Copy a Image</span>

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'test.txt'</span>, <span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> rf:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">ERROR UnicodeDecoder: utf-8 can't decode bytes at Addre in position 0</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">For Image we use binary mode</span>
<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'test.jpg'</span>, <span style="color: #2d9574;">'rb'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">rf</span>:
    <span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'test_copy.jpg'</span>, <span style="color: #2d9574;">'wb'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> wf:
        <span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> rf:
            wf.write<span style="color: #3a81c3;">(</span>line<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">More control : in chunk_size</span>
<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'bronx.jpg'</span>,<span style="color: #2d9574;">'rb'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> rf:
    <span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'bronx_copy,jpg'</span>, <span style="color: #2d9574;">'wb'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> wf:
        chunk_size = 1024
        <span style="color: #715ab1;">rf_chunk</span> = rf.read<span style="color: #3a81c3;">(</span>chunk_size<span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3; font-weight: bold;">while</span> <span style="color: #3a81c3;">len</span><span style="color: #3a81c3;">(</span>rf_chunk<span style="color: #3a81c3;">)</span>:
            wf.write<span style="color: #3a81c3;">(</span>rf_chunk<span style="color: #3a81c3;">)</span>
            <span style="color: #715ab1;">rf_chunk</span> = rf.read<span style="color: #3a81c3;">(</span>chunk_size<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org4faf444" class="outline-4">
<h4 id="org4faf444">Append Mode with Contant Manager</h4>
<div class="outline-text-4" id="text-org4faf444">
<p>
srource: <a href="https://stackoverflow.com/questions/59308996/how-to-fix-python-overwriting-file-in-append-mode">https://stackoverflow.com/questions/59308996/how-to-fix-python-overwriting-file-in-append-mode</a>
I'm making a register (e.g. a school one) program in python using tkinter and i'm trying to add a new person to the register every time the person clicks submit but all that is happening is that it is overwriting the previous name meaning that the file that it is being saved to only have one name.<br />
Does anyone have any suggestions on how to fix this?<br />
Some clarity: register<sub>info</sub> and listees<sub>info</sub> are the name of the register and the name of the latest person that is being saved to the file.<br />
This is the part of my code: <br />
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">create_register</span><span style="color: #3a81c3;">()</span>:
    <span style="color: #715ab1;">register_info</span> = registername.get<span style="color: #3a81c3;">()</span>
    <span style="color: #715ab1;">listees_info</span> = listees.get<span style="color: #3a81c3;">()</span>
    <span style="color: #715ab1;">list_of_registers</span>=os.listdir<span style="color: #3a81c3;">()</span>
    <span style="color: #3a81c3; font-weight: bold;">if</span> register_info <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #715ab1;">list_of_registers</span>:
        <span style="color: #3a81c3;">file</span>=<span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span>register_info,<span style="color: #2d9574;">"w"</span><span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3;">file</span>.close<span style="color: #3a81c3;">()</span>
        Label<span style="color: #3a81c3;">(</span>create, text = <span style="color: #2d9574;">"Register Created"</span>, fg = <span style="color: #2d9574;">"green"</span> ,font = <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"calibri"</span>, 8<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>.pack<span style="color: #3a81c3;">()</span>
    <span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span>register_info,<span style="color: #2d9574;">"a"</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> file_info:
        file_info.write<span style="color: #3a81c3;">(</span>register_info+<span style="color: #2d9574;">"\n"</span><span style="color: #3a81c3;">)</span>
        file_info.write<span style="color: #3a81c3;">(</span>listees_info+<span style="color: #2d9574;">"\n"</span><span style="color: #3a81c3;">)</span>
        file_info.close<span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>
<ul class="org-ul">
<li><a id="org4093c12"></a>Solution:<br />
<div class="outline-text-5" id="text-org4093c12">
<p>
The <code>w</code> mode you pass to open (in your line that reads <code>file=open(register_info,"w")</code>) tells python you want to open the file for writing. By design, this gets rid of anything else in the file and places the cursor at the beginning. It sounds like you want to open the file and append information to the end, without overwriting anything.<br />
To do this, you should use the a mode for append. This opens the file for writing and places the cursor at the end of the file.<br />
So, you need to say <code>open(register_info, "a")</code>. <br />
I also suggest switching to a context manager which ensures the file is closed if any unexpected behavior happens. You would do this like:
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span>register_info, <span style="color: #2d9574;">"a"</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #3a81c3;">file</span>:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Any code that needs to use "file" here</span>
</pre>
</div>
<p>
More information about file opening modes (taken from another answer of mine):
</p>
<blockquote>
<p>
<code>r</code>: Opens the file in read-only mode. Starts reading from the beginning of the file and is the default mode for the open() function.<br />
<code>rb</code>: Opens the file as read-only in binary format. Places the cursor at the start of the file.<br />
<code>r+</code>: Opens a file for reading and writing. Places the cursor at the beginning of the file. <br />
<code>w</code>: Opens in write-only mode. Places the cursor at the beginning of the file. This will overwrite any existing file with the same name. It will create a new file if one with the same name doesn't exist.<br />
<code>wb</code>: Same behavior as w, except the file is opened in binary mode. <br />
<code>w+</code>: Opens a file for writing and reading. Replaces all content and creates the file if it doesn't exist. This mode is used when you need to write to an empty-file and potentially read from it later in your code (before closing). <br />
<code>wb+</code>: Same behavior as w+ except the file is in binary mode. <br />
<code>a</code>: Opens a file for appending new information to it. The cursor is placed at the end of the file. A new file is created if one with the same name doesn't exist. <br />
<code>ab</code>: Same behavior as a except the file is in binary mode. <br />
<code>a+</code>: Opens a file for both appending and reading. The cursor is placed at the beginning of the file. <br />
<code>ab+</code>: Same as a+ except the file is in binary mode.<br />
</p>
</blockquote>
</div>
</li>
</ul>
</div>
<div id="outline-container-org45fd5d3" class="outline-4">
<h4 id="org45fd5d3">Rename mulitple files</h4>
<div class="outline-text-4" id="text-org45fd5d3">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Consister a dir as unorder videos which are to sorted by index in name</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">dir(path)</span>
<span style="color: #da8b55;">"""</span>
<span style="color: #da8b55;">&gt;&gt;&gt;</span>
<span style="color: #da8b55;">Earth - Our Solor System - #4</span>
<span style="color: #da8b55;">Jupiter - Our Solar System -#6</span>
<span style="color: #da8b55;">Mar - Our Solor System - #5</span>
<span style="color: #da8b55;">Mecury - Our Solor System - #2</span>
<span style="color: #da8b55;">Neptune - Our Solor System - #8</span>
<span style="color: #da8b55;">Pluto - Our Solor System - #10</span>
<span style="color: #da8b55;">Saturn - Our Solor System - #7</span>
<span style="color: #da8b55;">The Sun - Our Solor System - #1</span>
<span style="color: #da8b55;">Urans - Our Solor System - #9</span>
<span style="color: #da8b55;">Venus- Our Solor System - #3</span>
<span style="color: #da8b55;">"""</span>

<span style="color: #3a81c3; font-weight: bold;">import</span> os

<span style="color: #715ab1;">path</span> =<span style="color: #2d9574;">'/home/dan/Downloads'</span>

os.chdir<span style="color: #3a81c3;">(</span>path<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> <span style="color: #3a81c3;">file</span> <span style="color: #3a81c3; font-weight: bold;">in</span> os.listdir<span style="color: #3a81c3;">()</span>:
    <span style="color: #715ab1;">f_name</span>,<span style="color: #715ab1;">f_ext</span> = os.path.split<span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">file</span><span style="color: #3a81c3;">)</span>
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(file_name,f_ext)</span>

    <span style="color: #715ab1;">f_title</span>, <span style="color: #715ab1;">f_course</span>, <span style="color: #715ab1;">f_num</span> = f_name.split<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'-'</span><span style="color: #3a81c3;">)</span>
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(f_title, f_course, f_num) = f_name.split('-')</span>

    <span style="color: #715ab1;">f_title</span> = f_title.strip<span style="color: #3a81c3;">()</span>
    <span style="color: #715ab1;">f_course</span> = f_course.strip<span style="color: #3a81c3;">()</span>
    <span style="color: #715ab1;">f_num</span> = f_num.strip.<span style="color: #3a81c3;">()[</span>1:<span style="color: #3a81c3;">]</span>.zfill<span style="color: #3a81c3;">(</span>2<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">zero padding by 2 and remove #</span>


    <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print('{}-{}-{}{}'.format(f_num, f_course, f_title,f_ext))</span>
    <span style="color: #715ab1;">new_name</span> = <span style="color: #2d9574;">'{}-{}-{}{}'</span>.<span style="color: #3a81c3;">format</span><span style="color: #3a81c3;">(</span>f_num, f_course, f_title,f_ext<span style="color: #3a81c3;">)</span>
    os.rename<span style="color: #3a81c3;">(</span>f, new_name<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org373c61f" class="outline-3">
<h3 id="org373c61f">Read CSV module- read, parse, write</h3>
<div class="outline-text-3" id="text-org373c61f">
<p>
CSV file: a plane txt and use delimiters like ',' '\n' 
First line : Consist of field like 'first<sub>name</sub>', 'last<sub>name</sub>','email'
</p>
</div>

<ul class="org-ul">
<li><a id="org17a6f01"></a>Ex: Read a csv file (as list)<br />
<div class="outline-text-5" id="text-org17a6f01">
<p>
first<sub>name</sub>, last<sub>name</sub>, email
John, Doe, john-doe@guseemail.com
mary,smith,smith-mary@gmail.com&#x2026;..
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> csv

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">read csv file</span>

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'names.csv'</span>, <span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">csv_file</span>:
   csv_reader= csv.read<span style="color: #3a81c3;">(</span>csv_file<span style="color: #3a81c3;">)</span>

   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>csv_reader<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; object</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> csv_reader:
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>line<span style="color: #3a81c3;">)</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; ['first_name', 'last_name','email']</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; ['John', 'Doe', 'john-doe@guseemail.com']</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; ['mary','smith','smith-mary@gmail.com']</span>
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>line<span style="color: #6c3163;">[</span>2<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; ['email']</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; [ 'john-doe@guseemail.com']</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; ['smith-mary@gmail.com']</span>

  <span style="color: #2aa1ae; background-color: #ecf3ec;">#    </span><span style="color: #2aa1ae; background-color: #ecf3ec;">to remove ['email']</span>
<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'names.csv'</span>, <span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">csv_file</span>:
  csv_reader= csv.read<span style="color: #3a81c3;">(</span>csv_file<span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3;">next</span><span style="color: #3a81c3;">(</span>csv_reader<span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Remove the first line</span>
  <span style="color: #3a81c3; font-weight: bold;">for</span> line  <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #715ab1;">csv_reader</span>:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>line<span style="color: #6c3163;">[</span>2<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>      

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">##################3</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">CSV WRITE WITH DIFFEERENT DELEMITTER </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#####################</span><span style="color: #2aa1ae; background-color: #ecf3ec;">333</span>

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'names.csv'</span>, <span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> csv_file:
  csv_reader= csv.read<span style="color: #3a81c3;">(</span>csv_file<span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'new_names.csv'</span>, <span style="color: #2d9574;">'w'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">new_file</span>:
     csv_writer = csv.writer<span style="color: #3a81c3;">(</span>new_file,delimiter= <span style="color: #2d9574;">'\t'</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">'-'</span>
     <span style="color: #3a81c3; font-weight: bold;">for</span> line  <span style="color: #3a81c3; font-weight: bold;">in</span> csv_reader:
        csv_writer.writerow<span style="color: #6c3163;">(</span>line<span style="color: #6c3163;">)</span>



<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">#####################3</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">READ csv WITH different delimiter</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">#################33</span>


<span style="color: #3a81c3; font-weight: bold;">import</span> csv 
<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span> <span style="color: #6c3163;">(</span><span style="color: #2d9574;">'new_name.csv'</span>,<span style="color: #2d9574;">'r'</span><span style="color: #6c3163;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> csv_file:
    csv_reader = csv.reader<span style="color: #6c3163;">(</span>csv_file, delimiter=<span style="color: #2d9574;">'\t'</span><span style="color: #6c3163;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> csv_reader:
       <span style="color: #3a81c3;">print</span><span style="color: #6c3163;">(</span>line<span style="color: #6c3163;">)</span>


</pre>
</div>
</div>
</li>

<li><a id="org3ca9d98"></a>Ex: Read and Write a csv file (as dict)<br />
<div class="outline-text-5" id="text-org3ca9d98">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> csv

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'name.csv'</span>, <span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">csv_file</span>:
  csv_reader = csv.DictReader<span style="color: #3a81c3;">(</span>csv_file<span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #715ab1;">csv_reader</span>:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>line<span style="color: #6c3163;">[</span><span style="color: #2d9574;">'email'</span><span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To select unique card or no</span>
<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'name.csv'</span>, <span style="color: #2d9574;">'r'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> csv_file:
  csv_reader = csv.DictReader<span style="color: #3a81c3;">(</span>csv_file<span style="color: #3a81c3;">)</span>
  <span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'name_copy.csv'</span>,<span style="color: #2d9574;">'w'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">dictwirte_file</span>:
     field_name = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'first_name'</span>,<span style="color: #2d9574;">'last_name'</span>, <span style="color: #2d9574;">'email'</span><span style="color: #3a81c3;">]</span>
     <span style="color: #715ab1;">csv_writer</span> = csv.DictWriter<span style="color: #3a81c3;">(</span>new_file, fieldnames = field_name, dellimiter =<span style="color: #2d9574;">'\t'</span> <span style="color: #3a81c3;">)</span>
     csv_write.writeheader<span style="color: #3a81c3;">()</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> csv_reader:
   <span style="color: #3a81c3; font-weight: bold;">del</span> line<span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'email'</span><span style="color: #3a81c3;">]</span>
   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">remove email</span>
   csv_writer.writerow<span style="color: #3a81c3;">(</span>line<span style="color: #3a81c3;">)</span>


</pre>
</div>
</div>
</li>

<li><a id="org4156085"></a>Example<br />
<div class="outline-text-5" id="text-org4156085">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> csv

<span style="color: #715ab1;">html_output</span> = <span style="color: #2d9574;">''</span>

<span style="color: #715ab1;">name</span> =<span style="color: #3a81c3;">[]</span>

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'patrons.csv'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">data_file</span>:
   csv_data = csv.reader<span style="color: #3a81c3;">(</span>data_file<span style="color: #3a81c3;">)</span>
   <span style="color: #3a81c3;">next</span><span style="color: #3a81c3;">(</span>csv_data<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">remove headerline</span>
   <span style="color: #3a81c3;">next</span><span style="color: #3a81c3;">(</span>csv_data<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">remove contribution flag, description</span>
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>csv_data<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">it is object</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(list(csv_data))</span>
   <span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> csv_data:
       <span style="color: #3a81c3; font-weight: bold;">if</span> line <span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">]</span> == <span style="color: #2d9574;">'No Reward'</span>:
          <span style="color: #3a81c3; font-weight: bold;">break</span>
       <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>line<span style="color: #3a81c3;">)</span>
       name.append <span style="color: #3a81c3;">(</span>f<span style="color: #2d9574;">"</span>{line[0]}<span style="color: #2d9574;"> </span>{line[1]}<span style="color: #2d9574;">"</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> name <span style="color: #3a81c3; font-weight: bold;">in</span> names:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>name<span style="color: #3a81c3;">)</span>

html_output += f<span style="color: #2d9574;">'&lt;p&gt;There are currently </span>{<span style="color: #3a81c3;">len</span>(name) public  Contributors. Thank You!}<span style="color: #2d9574;">&lt;/p&gt;'</span>

<span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span>html_output<span style="color: #3a81c3;">)</span>

html_output += <span style="color: #2d9574;">'\n&lt;ul&gt;'</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> name <span style="color: #3a81c3; font-weight: bold;">in</span> names:
  html_output +=f<span style="color: #2d9574;">'\n\t&lt;li&gt; </span>{name}<span style="color: #2d9574;"> &lt;/li&gt;'</span>   

html_output += <span style="color: #2d9574;">'\n&lt;\ul&gt;'</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>html_output<span style="color: #3a81c3;">)</span> 
</pre>
</div>
</div>
</li>

<li><a id="orge713187"></a>Example with dict reader<br />
<div class="outline-text-5" id="text-orge713187">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> csv

<span style="color: #715ab1;">html_output</span> = <span style="color: #2d9574;">''</span>

<span style="color: #715ab1;">name</span> =<span style="color: #3a81c3;">[]</span>

<span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'patrons.csv'</span><span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> <span style="color: #715ab1;">data_file</span>:
   csv_data = csv.DictReader<span style="color: #3a81c3;">(</span>data_file<span style="color: #3a81c3;">)</span>
   <span style="color: #3a81c3;">next</span><span style="color: #3a81c3;">(</span>csv_data<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">remove No Reward line  </span>
   <span style="color: #3a81c3; font-weight: bold;">for</span> line <span style="color: #3a81c3; font-weight: bold;">in</span> csv_data:
       <span style="color: #3a81c3; font-weight: bold;">if</span> line <span style="color: #3a81c3;">[</span>FirstName<span style="color: #3a81c3;">]</span> == <span style="color: #2d9574;">'No Reward'</span>:
          <span style="color: #3a81c3; font-weight: bold;">break</span>
       <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>line<span style="color: #3a81c3;">)</span>
       name.append <span style="color: #3a81c3;">(</span>f<span style="color: #2d9574;">"</span>{line[FristName]}<span style="color: #2d9574;"> </span>{line[LastName]}<span style="color: #2d9574;">"</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">for</span> name <span style="color: #3a81c3; font-weight: bold;">in</span> names:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>name<span style="color: #3a81c3;">)</span>

html_output += f<span style="color: #2d9574;">'&lt;p&gt;There are currently </span>{<span style="color: #3a81c3;">len</span>(name) public  Contributors. Thank You!}<span style="color: #2d9574;">&lt;/p&gt;'</span>

<span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span>html_output<span style="color: #3a81c3;">)</span>

html_output += <span style="color: #2d9574;">'\n&lt;ul&gt;'</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> name <span style="color: #3a81c3; font-weight: bold;">in</span> names:
  html_output +=f<span style="color: #2d9574;">'\n\t&lt;li&gt; </span>{name}<span style="color: #2d9574;"> &lt;/li&gt;'</span>   

html_output += <span style="color: #2d9574;">'\n&lt;\ul&gt;'</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>html_output<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</div>

<div id="outline-container-org1a32691" class="outline-3">
<h3 id="org1a32691">Time Module</h3>
<div class="outline-text-3" id="text-org1a32691">
</div>
<div id="outline-container-org6c9e537" class="outline-4">
<h4 id="org6c9e537">time</h4>
<div class="outline-text-4" id="text-org6c9e537">
</div>
<ul class="org-ul">
<li><a id="orgf86b15b"></a>defination<br />
<div class="outline-text-5" id="text-orgf86b15b">
<p>
tick is unit of time : instance of time expressed in seconds since 12.00am, Jan 1, 1970
</p>
<div class="org-src-container">
<pre class="src src-python"> <span style="color: #3a81c3; font-weight: bold;">import</span> time
<span style="color: #715ab1;">tick</span> = time.time 
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-orgd865518" class="outline-4">
<h4 id="orgd865518">Time Tuple</h4>
<div class="outline-text-4" id="text-orgd865518">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-right" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">Index</th>
<th scope="col" class="org-left">Field</th>
<th scope="col" class="org-left">Values</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">0</td>
<td class="org-left">4-digit year</td>
<td class="org-left">2008</td>
</tr>

<tr>
<td class="org-right">1</td>
<td class="org-left">Month</td>
<td class="org-left">1 to 12</td>
</tr>

<tr>
<td class="org-right">2</td>
<td class="org-left">Day</td>
<td class="org-left">1 to 31</td>
</tr>

<tr>
<td class="org-right">3</td>
<td class="org-left">Hour</td>
<td class="org-left">0 to 23</td>
</tr>

<tr>
<td class="org-right">4</td>
<td class="org-left">Minute</td>
<td class="org-left">0 to 59</td>
</tr>

<tr>
<td class="org-right">5</td>
<td class="org-left">second</td>
<td class="org-left">0 to 61(60/61 are leap-sec)</td>
</tr>

<tr>
<td class="org-right">6</td>
<td class="org-left">Day of Week</td>
<td class="org-left">0 to 6 (0 is Monday)</td>
</tr>

<tr>
<td class="org-right">7</td>
<td class="org-left">Day of year</td>
<td class="org-left">1 to 366 (Julian day)</td>
</tr>

<tr>
<td class="org-right">8</td>
<td class="org-left">Daylight saving</td>
<td class="org-left">-1, 0, 1 (-1: library determines DST)</td>
</tr>

<tr>
<td class="org-right">&#xa0;</td>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>time.localtime<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python">time.struct_time<span style="color: #3a81c3;">(</span>tm_year=2016, tm_mon=9, tm_mday=27, tm_hour=0,tm_min=34,tm_sec=57,tm_wday=1,tm_year=271,tm_isdst=0<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org8c659dc" class="outline-4">
<h4 id="org8c659dc">Getting Current Time</h4>
</div>
<div id="outline-container-org1a38c79" class="outline-4">
<h4 id="org1a38c79">Getting Formatted Time</h4>
</div>
<div id="outline-container-orge7081c6" class="outline-4">
<h4 id="orge7081c6">Getting Calendar for a Month</h4>
</div>
<div id="outline-container-org655fc5a" class="outline-4">
<h4 id="org655fc5a">Time Module</h4>
</div>
<div id="outline-container-orgc87a715" class="outline-4">
<h4 id="orgc87a715">Calender Module</h4>
</div>
<div id="outline-container-org728e452" class="outline-4">
<h4 id="org728e452">Other Module &amp; Functions</h4>
</div>
</div>
<div id="outline-container-org2e7cf7f" class="outline-3">
<h3 id="org2e7cf7f">pprint</h3>
<div class="outline-text-3" id="text-org2e7cf7f">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> datetime
<span style="color: #3a81c3; font-weight: bold;">import</span> pprint
<span style="color: #715ab1;">data</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'user_type'</span>: <span style="color: #2d9574;">'individual'</span>, <span style="color: #2d9574;">'email'</span>: <span style="color: #2d9574;">'dankarthik25@gmail.com'</span>, <span style="color: #2d9574;">'user_name'</span>: <span style="color: #2d9574;">'Karthik Danchuka'</span>, <span style="color: #2d9574;">'user_shortname'</span>: <span style="color: #2d9574;">'Karthik'</span>, <span style="color: #2d9574;">'broker'</span>: <span style="color: #2d9574;">'ZERODHA'</span>, <span style="color: #2d9574;">'exchanges'</span>: <span style="color: #6c3163;">[</span><span style="color: #2d9574;">'MF'</span>, <span style="color: #2d9574;">'BCD'</span>, <span style="color: #2d9574;">'NFO'</span>, <span style="color: #2d9574;">'BFO'</span>, <span style="color: #2d9574;">'CDS'</span>, <span style="color: #2d9574;">'BSE'</span>, <span style="color: #2d9574;">'NSE'</span><span style="color: #6c3163;">]</span>, <span style="color: #2d9574;">'products'</span>: <span style="color: #6c3163;">[</span><span style="color: #2d9574;">'CNC'</span>, <span style="color: #2d9574;">'NRML'</span>, <span style="color: #2d9574;">'MIS'</span>, <span style="color: #2d9574;">'BO'</span>, <span style="color: #2d9574;">'CO'</span><span style="color: #6c3163;">]</span>, <span style="color: #2d9574;">'order_types'</span>: <span style="color: #6c3163;">[</span><span style="color: #2d9574;">'MARKET'</span>, <span style="color: #2d9574;">'LIMIT'</span>, <span style="color: #2d9574;">'SL'</span>, <span style="color: #2d9574;">'SL-M'</span><span style="color: #6c3163;">]</span>, <span style="color: #2d9574;">'avatar_url'</span>: <span style="color: #4e3163;">None</span>, <span style="color: #2d9574;">'user_id'</span>: <span style="color: #2d9574;">'SLT899'</span>, <span style="color: #2d9574;">'api_key'</span>: <span style="color: #2d9574;">'s47dosfc0f1kisi4'</span>, <span style="color: #2d9574;">'access_token'</span>: <span style="color: #2d9574;">'asRJexUFotIsqgL3LL5bRG2i9pxDg93s'</span>, <span style="color: #2d9574;">'public_token'</span>: <span style="color: #2d9574;">'LPgnl4rJfCBe1Kxmbq3dF6f8j3YtQ3Ek'</span>, <span style="color: #2d9574;">'refresh_token'</span>: <span style="color: #2d9574;">''</span>, <span style="color: #2d9574;">'enctoken'</span>: <span style="color: #2d9574;">'1DjbLLy6i1/tnP5tKUBfhqreyyJkcb0IEAZdTSqzhVNVrVrGMIOdRHzu4DlyiRoukX/3/WLz8un/WIBL/S+zXj/FK6nrtFR/EGzPfw07Ud2280fDmOjWTyX80RS+4Zk='</span>, <span style="color: #2d9574;">'login_time'</span>: datetime.datetime<span style="color: #6c3163;">(</span>2022, 8, 29, 12, 7, 26<span style="color: #6c3163;">)</span>, <span style="color: #2d9574;">'meta'</span>: <span style="color: #6c3163;">{</span><span style="color: #2d9574;">'demat_consent'</span>: <span style="color: #2d9574;">'consent'</span><span style="color: #6c3163;">}</span><span style="color: #3a81c3;">}</span>
pprint.pprint<span style="color: #3a81c3;">(</span>data<span style="color: #3a81c3;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-result">{'access_token': 'asRJexUFotIsqgL3LL5bRG2i9pxDg93s',
 'api_key': 's47dosfc0f1kisi4',
 'avatar_url': None,
 'broker': 'ZERODHA',
 'email': 'dankarthik25@gmail.com',
 'enctoken': '1DjbLLy6i1/tnP5tKUBfhqreyyJkcb0IEAZdTSqzhVNVrVrGMIOdRHzu4DlyiRoukX/3/WLz8un/WIBL/S+zXj/FK6nrtFR/EGzPfw07Ud2280fDmOjWTyX80RS+4Zk=',
 'exchanges': ['MF', 'BCD', 'NFO', 'BFO', 'CDS', 'BSE', 'NSE'],
 'login_time': datetime.datetime(2022, 8, 29, 12, 7, 26),
 'meta': {'demat_consent': 'consent'},
 'order_types': ['MARKET', 'LIMIT', 'SL', 'SL-M'],
 'products': ['CNC', 'NRML', 'MIS', 'BO', 'CO'],
 'public_token': 'LPgnl4rJfCBe1Kxmbq3dF6f8j3YtQ3Ek',
 'refresh_token': '',
 'user_id': 'SLT899',
 'user_name': 'Karthik Danchuka',
 'user_shortname': 'Karthik',
 'user_type': 'individual'}
</pre>
</div>
</div>
</div>
<div id="outline-container-org0e201b5" class="outline-3">
<h3 id="org0e201b5">Json Module</h3>
<div class="outline-text-3" id="text-org0e201b5">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Import required libraries</span>
<span style="color: #3a81c3; font-weight: bold;">import</span> json

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Initialize JSON data</span>
<span style="color: #715ab1;">json_data</span> = <span style="color: #2d9574;">'[ {"studentid": 1, "name": "ABC", \</span>
<span style="color: #2d9574;">"subjects": ["Python", "Data Structures"]}, \</span>
<span style="color: #2d9574;">                                {"studentid": 2, "name": "PQR",\</span>
<span style="color: #2d9574;">                                "subjects": ["Java", "Operating System"]} ]'</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Create Python object from JSON string data</span>
<span style="color: #715ab1;">obj</span> = json.loads<span style="color: #3a81c3;">(</span>json_data<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Pretty Print JSON</span>
<span style="color: #715ab1;">json_formatted_str</span> = json.dumps<span style="color: #3a81c3;">(</span>obj, indent=4<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>json_formatted_str<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-org116f82b" class="outline-3">
<h3 id="org116f82b">Regular expression</h3>
<div class="outline-text-3" id="text-org116f82b">
</div>
<div id="outline-container-org53ae6aa" class="outline-4">
<h4 id="org53ae6aa">Cheat Sheet:</h4>
<div class="outline-text-4" id="text-org53ae6aa">
<p>
Special seq of char that helps you match or find other stings or set of strings or set of string used specialized sysntax held in a pattern
</p>

<p>
moudle re provides full support for perl-like regualr expression in python
</p>

<p>
raises the expception re.error if error occurs while compiling or using regular expression
</p>

<p>
Raw string as r'expression'
</p>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Basic Patterns</th>
<th scope="col" class="org-left">matchs</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">. (period)</td>
<td class="org-left">any char except '\n'</td>
</tr>

<tr>
<td class="org-left">\d</td>
<td class="org-left">Digit [0-9]</td>
</tr>

<tr>
<td class="org-left">\D</td>
<td class="org-left">Not a Digit(0-9)</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">\w</td>
<td class="org-left">Word Character (letters(a-z A-Z,0-9,'_')</td>
</tr>

<tr>
<td class="org-left">\W</td>
<td class="org-left">Not word charcter</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">\s</td>
<td class="org-left">Whitespace (space, \n, tab )</td>
</tr>

<tr>
<td class="org-left">&sect;</td>
<td class="org-left">Non-whitespcae(except space, \t, tab)</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">ANCHORS</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="org-left">^</td>
<td class="org-left">matches start of string</td>
</tr>

<tr>
<td class="org-left">$</td>
<td class="org-left">matches end of string</td>
</tr>

<tr>
<td class="org-left">\b</td>
<td class="org-left">Word Boundary btw word and non-word</td>
</tr>

<tr>
<td class="org-left">\B</td>
<td class="org-left">Not a Word Boundary</td>
</tr>

<tr>
<td class="org-left">\t \n\r</td>
<td class="org-left">tab newline return</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">a,X,9</td>
<td class="org-left">ordinary char just match themselves exactly</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orgd8b5193" class="outline-4">
<h4 id="orgd8b5193">Quantifiers</h4>
<div class="outline-text-4" id="text-orgd8b5193">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">symbols</th>
<th scope="col" class="org-left">Function</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">*</td>
<td class="org-left">0 or more</td>
</tr>

<tr>
<td class="org-left">+</td>
<td class="org-left">1 or more</td>
</tr>

<tr>
<td class="org-left">?</td>
<td class="org-left">0 or One</td>
</tr>

<tr>
<td class="org-left">{3}</td>
<td class="org-left">Exact Number</td>
</tr>

<tr>
<td class="org-left">{3,4}</td>
<td class="org-left">Range of Number{minimum, maximum}</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">[ch]at</td>
<td class="org-left">search for &#x2026;cat&#x2026; or .. hat&#x2026;</td>
</tr>

<tr>
<td class="org-left">'[0-9]'</td>
<td class="org-left">search nubmer</td>
</tr>

<tr>
<td class="org-left">'[a-z]'</td>
<td class="org-left">seach lower char</td>
</tr>

<tr>
<td class="org-left">'[A-Z]'</td>
<td class="org-left">seach upper char</td>
</tr>

<tr>
<td class="org-left">'[a-z][A-Z]'</td>
<td class="org-left">search all lower and upper char</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-orgf130bd2" class="outline-4">
<h4 id="orgf130bd2">Example</h4>
<div class="outline-text-4" id="text-orgf130bd2">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> re

<span style="color: #715ab1;">text_2_search</span> = <span style="color: #2d9574;">"""</span>
<span style="color: #2d9574;">abcdefghijklmnopqrstuvwxyz</span>
<span style="color: #2d9574;">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span>

<span style="color: #2d9574;">Ha HaHa</span>

<span style="color: #2d9574;">MetaCharacters (Need to be escape)</span>
<span style="color: #2d9574;">. ^ $ * + { } [ ] \ | ()</span>


<span style="color: #2d9574;">coremys.com'</span>

<span style="color: #2d9574;">321-555-4321</span>
<span style="color: #2d9574;">123.555.1234</span>
<span style="color: #2d9574;">123*555*1234</span>
<span style="color: #2d9574;">800-555-4321</span>
<span style="color: #2d9574;">900-555-4321</span>
<span style="color: #2d9574;">Mr. Schafer</span>
<span style="color: #2d9574;">Mr Smith</span>
<span style="color: #2d9574;">Ms Davis</span>

<span style="color: #2d9574;">Mrs. Robinson</span>
<span style="color: #2d9574;">Mr. T</span>


<span style="color: #2d9574;">cat</span>
<span style="color: #2d9574;">batman</span>
<span style="color: #2d9574;">path</span>
<span style="color: #2d9574;">bat</span>
<span style="color: #2d9574;">match</span>

<span style="color: #2d9574;">"""</span>

<span style="color: #715ab1;">emails</span> = <span style="color: #2d9574;">"""</span>
<span style="color: #2d9574;">CoreyMSchafer@gmail.com</span>
<span style="color: #2d9574;">corey.schafer@university.edu</span>
<span style="color: #2d9574;">corey-321-schafer@my-work.net</span>

<span style="color: #2d9574;">"""</span>
<span style="color: #715ab1;">sentence</span> = <span style="color: #2d9574;">'Start a sentence and then bring it to end'</span>
<span style="color: #715ab1;">urls</span> = <span style="color: #2d9574;">"""</span>
<span style="color: #2d9574;">https://www.google.com</span>
<span style="color: #2d9574;">https://coreyms.com</span>
<span style="color: #2d9574;">https://youtube.com</span>
<span style="color: #2d9574;">https://www.nasa.gov """</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\tTab'</span><span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'abc'</span><span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches for abc but not ABCd</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">IT is case sensitive</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'.'</span><span style="color: #3a81c3;">)</span>      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches any character {a-z A-Z 0-9 _ }</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\.'</span><span style="color: #3a81c3;">)</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches any '.' present in string</span>
<span style="color: #715ab1;">pattern</span> =  re.compiler<span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'coreyms\.com'</span><span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches any string 'coreym.com'</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\d'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span>  = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\D'</span><span style="color: #3a81c3;">)</span> 
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\w'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\W'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\s'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\S'</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Word Boundary</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\bHa'</span><span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">match two Ha HaHa starting 'Ha' as at starting</span>

<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\BHa'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">match last Ha because it has no word boundary</span>

<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'^abc'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">match word/char starting with </span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'xyz$'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">match word/char ending with </span>

<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\d\d\d.\d\d\d.\d\d\d\d'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\d{3}.\d{3}.\d{4}'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\d{3}[-.]\d{3}[-.]\d{4}'</span><span style="color: #3a81c3;">)</span> 
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\d{3}.\d{3}.\d{4}'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'[89]00-.\d{3}.\d{4}'</span><span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'[a-zA-Z]'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">match char with a-z and A-Z</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'[^a-zA-Z]'</span><span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">match char which is not a-z and A-Z</span>

<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'[^b]at'</span><span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">match which doesnot include bat </span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">quantifiers</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">' Mr\.?'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches Mr. Schafer or Mr Smith  </span>

<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">' Mr\.?\s[A-Z]'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches Mr. S or Mr S</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">' Mr\.?\s[A-Z]\w+'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches all word but not Mr T </span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">' Mr\.?\s[A-Z]\w*'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches all word and  Mr T</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Groups ()</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">' M(r|s|rs)\.?\s[A-Z]\w+'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches all word with Mr Ms Mrs </span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">' (Mr|Ms|Mrs)\.?\s[A-Z]\w+'</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">matches all word with Mr Ms Mrs </span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">emails</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'[a-zA-Z]+ @ [a-zA-Z]+\.com'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'[a-zA-Z0-9.-_]+ @ [a-zA-Z]+\.(com|edu|in|net)'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.<span style="color: #3a81c3;">compile</span><span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'[a-zA-Z0-9.-_]+ @ [a-zA-Z0-9-]+\.[a-zA-Z0-9.-]+'</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">urls</span>

<span style="color: #715ab1;">pattern</span> = re.compiler <span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'https?://(www\.)?\w+\.\w+'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">pattern</span> = re.compiler <span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'https?://(www\.)?(\w+)(\.\w+)'</span><span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">sub_urls</span> = pattern.sub<span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'\2\3'</span>, urls<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>sub_urls<span style="color: #3a81c3;">)</span>

 <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Note we can seperate domain name </span>
<span style="color: #3a81c3; font-weight: bold;">for</span> match <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #715ab1;">matches</span> :
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>match.group<span style="color: #6c3163;">(</span>0<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">1,2,3</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span>

matches = pattern.finditer<span style="color: #3a81c3;">(</span>text_2_search<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">matches</span> = pattern.findall<span style="color: #3a81c3;">(</span>text_2_search<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">matches</span> = pattern.match<span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">matches</span> = pattern.search<span style="color: #3a81c3;">(</span>sentence<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">only 1st match </span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">flages</span>

<span style="color: #715ab1;">pattern</span> = recompile<span style="color: #3a81c3;">(</span>r<span style="color: #2d9574;">'start'</span>, re.IGNORE<span style="color: #3a81c3;">)</span>


<span style="color: #3a81c3; font-weight: bold;">for</span> match <span style="color: #3a81c3; font-weight: bold;">in</span> matches:
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>match<span style="color: #3a81c3;">)</span>


</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org7e91e14" class="outline-3">
<h3 id="org7e91e14">Random module</h3>
<div class="outline-text-3" id="text-org7e91e14">
</div>
<div id="outline-container-org00a1fc9" class="outline-4">
<h4 id="org00a1fc9">Introdution</h4>
<div class="outline-text-4" id="text-org00a1fc9">
<p>
Shoulded to be used for crypthography use sectrets module instead
</p>

<p>
Cread a random value btw (0 1)
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> random

<span style="color: #715ab1;">value</span> = random.random<span style="color: #3a81c3;">()</span>         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">0.2426467353658334</span>
<span style="color: #715ab1;">value</span> = random.uniform<span style="color: #3a81c3;">(</span>1, 10<span style="color: #3a81c3;">)</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">6.223664645274</span>
<span style="color: #715ab1;">dice</span> = random.randint<span style="color: #3a81c3;">(</span>1, 6<span style="color: #3a81c3;">)</span>    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">1,2,6,2,3,5,4</span>
<span style="color: #715ab1;">coin</span> = random.randint<span style="color: #3a81c3;">(</span>0, 1<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>value<span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">greeting</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Hello'</span>, <span style="color: #2d9574;">'Hi'</span>, <span style="color: #2d9574;">'Hey'</span>, <span style="color: #2d9574;">'Howdy'</span>, <span style="color: #2d9574;">'Hola'</span><span style="color: #3a81c3;">]</span>

<span style="color: #715ab1;">value</span> = random.choice<span style="color: #3a81c3;">(</span>greetins<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span> value + <span style="color: #2d9574;">" Corey"</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Multiple choiess</span>

<span style="color: #715ab1;">colors</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Red'</span>, <span style="color: #2d9574;">'Black'</span>,<span style="color: #2d9574;">'Green'</span><span style="color: #3a81c3;">]</span>

<span style="color: #715ab1;">results</span> = random.choices<span style="color: #3a81c3;">(</span>colors, k=10<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">how many time we pick a value</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>results<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; ['Red', 'Green', 'Red', ' Black', ' Red', ......]( size is 10)</span>

results = random.choices<span style="color: #3a81c3;">(</span>colors,, weight = <span style="color: #6c3163;">[</span>18, 18, 2<span style="color: #6c3163;">]</span> k=10<span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">total w = 38, red is 18/38 chance, black is 18/38, green = 2/38</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>results<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; ['Red', 'Green', 'Red', ' Black', ' Red', ......]( size is 10)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Random generate a list of num of size 63 and range from [1 63]</span>

deck = <span style="color: #3a81c3;">list</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">range</span><span style="color: #6c3163;">(</span>1, 53<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>desk<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; [1, 2, 3, 4, ..........53 ]</span>

random.shuffle<span style="color: #3a81c3;">(</span>deck<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>deck<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; [41 ,39, 29, 38,47, 50,6,20.....]</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To select unique card or no</span>

random.sample<span style="color: #3a81c3;">(</span>deck<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>deck, k =5<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">&gt;&gt;&gt; [41 ,39, 29, 38,47]</span>



<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Grenerate fake  fist_names,last_name, street_name, fake_cites, states</span>

f_n = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'John'</span>, <span style="color: #2d9574;">'Jane'</span>, <span style="color: #2d9574;">'Corey'</span>, <span style="color: #2d9574;">'Travis'</span><span style="color: #3a81c3;">]</span> <span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">frist name </span>
l_n = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Smith'</span>, <span style="color: #2d9574;">'Doe'</span>, <span style="color: #2d9574;">'Jenkins'</span>, <span style="color: #2d9574;">'Robinson'</span><span style="color: #3a81c3;">]</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">last name</span>
s_n = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Main'</span>, <span style="color: #2d9574;">'High'</span>, <span style="color: #2d9574;">'Pearl'</span>, <span style="color: #2d9574;">'Maple'</span> <span style="color: #3a81c3;">]</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">street name</span>
c_n = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'Metropolics'</span>, <span style="color: #2d9574;">'Eerie'</span>,<span style="color: #2d9574;">'King'</span>, <span style="color: #2d9574;">'Landing'</span><span style="color: #3a81c3;">]</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">fake cite </span>
states = <span style="color: #3a81c3;">[</span> <span style="color: #2d9574;">'AL'</span>,<span style="color: #2d9574;">'AK'</span>,<span style="color: #2d9574;">'AR'</span>,<span style="color: #2d9574;">'Pearl'</span>,<span style="color: #2d9574;">'Oak'</span>,<span style="color: #2d9574;">'Cedar'</span>,<span style="color: #2d9574;">'Elm'</span><span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3; font-weight: bold;">for</span> num <span style="color: #3a81c3; font-weight: bold;">in</span> <span style="color: #3a81c3;">range</span><span style="color: #3a81c3;">(</span>100<span style="color: #3a81c3;">)</span>:
    first = random.choice<span style="color: #3a81c3;">(</span>f_n<span style="color: #3a81c3;">)</span>
    last = random.choice<span style="color: #3a81c3;">(</span>l_n<span style="color: #3a81c3;">)</span>

    phone = f<span style="color: #2d9574;">'</span>{random.randint(100,999)}<span style="color: #2d9574;">-555-</span>{random.randint(1000,9999)}<span style="color: #2d9574;">'</span>
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">548-555-6572</span>

    s_num = random.randint<span style="color: #3a81c3;">(</span>100,999<span style="color: #3a81c3;">)</span>
    street = random.choice<span style="color: #3a81c3;">(</span>s_n<span style="color: #3a81c3;">)</span>
    city = random.choice<span style="color: #3a81c3;">(</span>c_n<span style="color: #3a81c3;">)</span>
    state = random.choice<span style="color: #3a81c3;">(</span>states<span style="color: #3a81c3;">)</span>
    zip_code = random.randint<span style="color: #3a81c3;">(</span>10000,99999<span style="color: #3a81c3;">)</span>
    address = f<span style="color: #2d9574;">'</span>{street_name}{street}<span style="color: #2d9574;"> St., </span>{city}{state}{zip_code}<span style="color: #2d9574;">'</span>

    email = first.lower<span style="color: #3a81c3;">()</span> + last.lower<span style="color: #3a81c3;">()</span> + <span style="color: #2d9574;">'@gmail.com'</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f<span style="color: #2d9574;">'</span>{first}{last}<span style="color: #2d9574;"> \n </span>{phone}<span style="color: #2d9574;"> \n </span>{address}<span style="color: #2d9574;"> \n </span>{email}<span style="color: #2d9574;"> \n'</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>
</div>
<div id="outline-container-org227b0f0" class="outline-2">
<h2 id="org227b0f0">File Management</h2>
<div class="outline-text-2" id="text-org227b0f0">
</div>
<div id="outline-container-orgf0626b1" class="outline-4">
<h4 id="orgf0626b1">Open/ Closing a File</h4>
<div class="outline-text-4" id="text-orgf0626b1">
<p>
Open/Closing a file is done by file-oriented API(Application Program Interface)
</p>

<p>
Can represent standard input/output stream, in-memory buffers, sockets,pipes, etc.
</p>

<p>
File object are two categories :
-binary file
-text files
</p>
</div>

<ul class="org-ul">
<li><a id="org7df65a0"></a>open/close file :<br />
<ul class="org-ul">
<li><a id="orgcadbac9"></a>Syntax<br />
<div class="outline-text-6" id="text-orgcadbac9">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To OPEN a file</span>
<span style="color: #715ab1;">file_obj</span> = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span>file_name, <span style="color: #6c3163;">[</span>access_mode<span style="color: #6c3163;">]</span>,<span style="color: #6c3163;">[</span>buffering<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To CLOSE a file</span>
file_obj.close<span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>

<ul class="org-ul">
<li><a id="orgb3d1725"></a>buffering mode:<br />
<div class="outline-text-7" id="text-orgb3d1725">
<p>
Buffer is tempory memory allocat to communicate between process and prog or device
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">0</td>
<td class="org-left">No buffering take place (slow)</td>
</tr>

<tr>
<td class="org-left">1</td>
<td class="org-left">Line buffer will be performed</td>
<td class="org-left">One line at a time increase speed</td>
</tr>

<tr>
<td class="org-left">&gt;1</td>
<td class="org-left">buffer will be performed with the indicated buffer size</td>
</tr>

<tr>
<td class="org-left">Neg value</td>
<td class="org-left">operating sys will set the size of buffer (default)</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</li>

<li><a id="orgcff9e65"></a>access mode<br />
<div class="outline-text-7" id="text-orgcff9e65">
<p>
r,rb,rb+,w,wb,w+,a,ab,a+,ab+  
read ,binary,write (create or rewrite ),append(editing )
</p>
</div>
</li>

<li><a id="org5f4a67c"></a>closing file<br />
<div class="outline-text-7" id="text-org5f4a67c">
<p>
closing file is imp if not it will corrupt the file
</p>
</div>
</li>
</ul>
</li>

<li><a id="org7193ba9"></a>Example<br />
<div class="outline-text-6" id="text-org7193ba9">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">fo</span> = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'foo.txt'</span>,<span style="color: #2d9574;">'w'</span><span style="color: #3a81c3;">)</span>
fo.wirte<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Welcome"</span><span style="color: #3a81c3;">)</span>
fo.write<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"to Tutorials Points \n"</span><span style="color: #3a81c3;">)</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Close open file</span>
fo.close<span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>
</li>
</ul>
</li>
<li><a id="orge52212c"></a><span class="todo TODO">TODO</span> File  Object attributes:<br />
<div class="outline-text-5" id="text-orge52212c">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">ATTRIBUTES</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">file.colsed</td>
<td class="org-left">return true if file is closed</td>
</tr>

<tr>
<td class="org-left">file.mode</td>
<td class="org-left">return access mode</td>
</tr>

<tr>
<td class="org-left">file.name</td>
<td class="org-left">return name of file</td>
</tr>

<tr>
<td class="org-left">file.softspace</td>
<td class="org-left">returns false if space explicity required with print</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">returns true  other wise not support in py3</td>
</tr>
</tbody>
</table>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">fo</span> = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"foo.txt"</span>,<span style="color: #2d9574;">'wb'</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Name of the file: "</span>, fo.name<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Closed or not: "</span>, fo.closed<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Opening mode : "</span>,fo.mode<span style="color: #3a81c3;">)</span>
fo.close<span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Closed or not :"</span>,fo.closed<span style="color: #3a81c3;">)</span>
</pre>
</div>



<p>
jabber
</p>



<p>
In python3.  <code>with</code> is used 
</p>

<p>
with is
if file is not used with is used to close the file
 used if a error occure in file which an execptions and
</p>

<p>
file=city<sub>file</sub>  (no space )
</p>
</div>
</li>
</ul>
</div>
<div id="outline-container-orgae9e884" class="outline-4">
<h4 id="orgae9e884">flush parameter</h4>
<div class="outline-text-4" id="text-orgae9e884">
<p>
Flush is introduced in py3.**
   print as a flush arg true/ flase  , 
       flase : data is not flush
</p>

<p>
When py write on file the external devies screen is slow so data is writen in buffer and content is display in background. cpu will not be idel and sys is faster
</p>


<p>
if flush == true flush is cleaned  implices data is writen immediately 
</p>

<p>
to able to control when the writen immedialty  or not will able prg'es to write code effectively
</p>


<p>
strip("del") 
</p>



<p>
Modes :
not specified : r
</p>
<ul class="org-ul">
<li>both</li>
</ul>
</div>
</div>
<div id="outline-container-org67b7fde" class="outline-4">
<h4 id="org67b7fde">Read and write binary files</h4>
<div class="outline-text-4" id="text-org67b7fde">
<p>
process bin data img or store variabels and load in laters
</p>

<p>
big indian and little indian writing 
</p>

<p>
when computer manufacre has to make a decision how to store data
big  store most signifited bit is store
and vice verse by littel
ibm uses big
intel uses little
</p>

<p>
we have to store the variable 
</p>
</div>
</div>

<div id="outline-container-org78bfffa" class="outline-4">
<h4 id="org78bfffa">pickle</h4>
<div class="outline-text-4" id="text-org78bfffa">
<p>
to write binary file 
when store py3 
5 types of 
pi
</p>
</div>
</div>

<div id="outline-container-org75759b1" class="outline-4">
<h4 id="org75759b1">String Encoding Function</h4>
<div class="outline-text-4" id="text-org75759b1">
<p>
There two functions
decode (encoding="UTF-8",errors='strict')
encode (encoding="UTF-8",errors= 'strict')
</p>

<p>
To use this function we have to import base64 module in prg
for converting 
</p>
</div>
</div>
</div>

<div id="outline-container-org6381803" class="outline-2">
<h2 id="org6381803">Import</h2>
<div class="outline-text-2" id="text-org6381803">
</div>
<div id="outline-container-org31115cf" class="outline-4">
<h4 id="org31115cf">Introduction</h4>
<div class="outline-text-4" id="text-org31115cf">
<p>
You can use any py source file as module by executing an import statement in some other python sourcec file
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> module1, module2, module3,.......moduleN
</pre>
</div>

<p>
when the interpreter encounters an important statment
  It will import (include,insert) the module if the module is present in <code>search path</code>
</p>
</div>

<ul class="org-ul">
<li><a id="org5c847dd"></a>Search path :<br />
<div class="outline-text-5" id="text-org5c847dd">
<p>
Search path is a list of dir that the interpreter searches before importing module
</p>
</div>
</li>
</ul>
</div>

<div id="outline-container-org8335902" class="outline-4">
<h4 id="org8335902">Import your own obj and functions</h4>
<div class="outline-text-4" id="text-org8335902">
<p>
save the you own obj &amp; function in same dir 
</p>

<p>
and add  " import file<sub>name</sub>"  in other  py prg
</p>

<p>
<a href="https://docs.python.org/3/reference/import.html">https://docs.python.org/3/reference/import.html</a>
</p>
</div>
</div>
<div id="outline-container-org715c6d1" class="outline-4">
<h4 id="org715c6d1">from Import</h4>
<div class="outline-text-4" id="text-org715c6d1">
<p>
when you use  <code>import module1</code> the 
It will import all the objects , functions,variables to the namespace 
Then it will unnessaryly overloades Namespace of prg
But if you want to import only a specific part from module we use <code>from module_name import</code>
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">from</span> mod_name <span style="color: #3a81c3; font-weight: bold;">import</span> name1,name2, name3.....nameN
</pre>
</div>
</div>

<ul class="org-ul">
<li><a id="org76faa74"></a>Eg<br />
<div class="outline-text-5" id="text-org76faa74">
<p>
model defination
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">~/fib.py</span>

 <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">fibo</span><span style="color: #3a81c3;">(</span>n<span style="color: #3a81c3;">)</span>:
     <span style="color: #715ab1;">result</span> = <span style="color: #3a81c3;">[]</span>
     <span style="color: #715ab1;">a</span>,<span style="color: #715ab1;">b</span> = 0,1
     <span style="color: #3a81c3; font-weight: bold;">while</span> b &lt;<span style="color: #715ab1;">n</span>:
         result.append<span style="color: #3a81c3;">(</span>b<span style="color: #3a81c3;">)</span>
         <span style="color: #715ab1;">a</span>,<span style="color: #715ab1;">b</span>= b,a+b
     <span style="color: #3a81c3; font-weight: bold;">return</span> result

 <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">hello</span><span style="color: #3a81c3;">()</span>:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Hello World"</span><span style="color: #3a81c3;">)</span>
     <span style="color: #3a81c3; font-weight: bold;">return</span>
</pre>
</div>

<p>
Using model
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">from</span> fib <span style="color: #3a81c3; font-weight: bold;">import</span> fibo
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>fibo<span style="color: #6c3163;">(</span>10<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org44ed170" class="outline-4">
<h4 id="org44ed170">Executing module as script</h4>
<div class="outline-text-4" id="text-org44ed170">
<p>
In a file sys the module is stored by a file name <code>module name</code> (string) 
If inside the module the global variable(<code>__name__</code> ) has  <code>module name</code> is avalable as the value then code will be executed 
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">given module is executable is it has following statement</span>
<span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #3a81c3;">__name__</span> == <span style="color: #2d9574;">"__main__"":</span>
<span style="color: #2d9574;">main()</span>
</pre>
</div>
<p>
If execute then module it will execute if  global variable <code>__name__</code> has <code>__main__</code>
</p>

<div class="org-src-container">
<pre class="src src-python">     ~/fib.py

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">fibo</span><span style="color: #3a81c3;">(</span>n<span style="color: #3a81c3;">)</span>:
        <span style="color: #715ab1;">result</span> = <span style="color: #3a81c3;">[]</span>
        <span style="color: #715ab1;">a</span>,<span style="color: #715ab1;">b</span> = 0,1
        <span style="color: #3a81c3; font-weight: bold;">while</span> b &lt;<span style="color: #715ab1;">n</span>:
            result.append<span style="color: #3a81c3;">(</span>b<span style="color: #3a81c3;">)</span>
            <span style="color: #715ab1;">a</span>,<span style="color: #715ab1;">b</span>= b,a+b
        <span style="color: #3a81c3; font-weight: bold;">return</span> result

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">hello</span><span style="color: #3a81c3;">()</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Hello World"</span><span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3; font-weight: bold;">return</span>

    <span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #3a81c3;">__name__</span> == <span style="color: #2d9574;">"__main__"</span>:      <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">py able to understand if file is used as import or has executable script  </span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>fibo<span style="color: #6c3163;">(</span>100<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if fib.py is directly run the __name__ is (__main__)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if fib.py is imported into other py script then value of __name__ is not equal to __main__</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">So a module can be used as executalbe script by __name__</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-org5a5e7eb" class="outline-4">
<h4 id="org5a5e7eb">Loading Module</h4>
<div class="outline-text-4" id="text-org5a5e7eb">
<p>
When you import a module, the python interpreter searches for module in following sequences:
</p>
<ul class="org-ul">
<li>Current dir</li>
<li>If <code>module</code> isn't found,python searchs each dir in shell variabel <code>PYTHONPATH</code></li>
<li>If <code>module</code> isn't found, python checks default path (installation dir) <code>(linux : /usr/local/lib/python)</code></li>
<li>module search path is stored in system module(<code>sys</code>) as <code>sys.path varialbe</code> contains all the default path,PYTHONPATH,installation default path
<ul class="org-ul">
<li><code>sys.path</code> variable contains the current dir,PYTHONPATH, and the isntallation dependent default.</li>
</ul></li>
</ul>
</div>
</div>
<div id="outline-container-org6dfa096" class="outline-4">
<h4 id="org6dfa096">Reload() a module</h4>
<div class="outline-text-4" id="text-org6dfa096">
<p>
When module is improted into a script  (The code is excuted  once sequenc order top-level priority)
</p>
<ul class="org-ul">
<li>To re-execute the top-level code, we use <code>relaod()</code>  function</li>
<li><code>relaod()</code> function imports previously imported module again</li>
</ul>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> imp
imp.relaod<span style="color: #3a81c3;">(</span>module1<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org8340f5f" class="outline-2">
<h2 id="org8340f5f">Package</h2>
<div class="outline-text-2" id="text-org8340f5f">
<p>
Package is hierarihical file directory structure that defines a single python application environment that consist of modules and sub packages ,sub sub packages &#x2026;.
each dir or folder  consist of one or more modules, each modules has one or more functions,classes
</p>
</div>

<div id="outline-container-orgce15db8" class="outline-3">
<h3 id="orgce15db8">Create a package</h3>
<div class="outline-text-3" id="text-orgce15db8">
<p>
To build a package : 
For developers or coders if we create different modules we have to import each and every modules
In order to customize we create a package
</p>

<p>
In folders we have 2-3 module and each module we have 2-3 functions
</p>

<p>
write a file called <code>__init__.py</code> which iniciallize a package 
In this <code>__init__.py</code> we have to specifity which function, classes  are to be only used for developers are iniciallized to a package.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">~/mypackage$ ls</span>
<span style="color: #3a81c3;">sum</span>.py             <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">contain add(x,y) </span>
mult.py            <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">contain mulitply(x,y)</span>
fact.py            <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">contain factorial (n),sq(n)  </span>
__init__.py
</pre>
</div>

<p>
To make a pacakage we have to write a <code>__init__.py</code> 
So when we init the pacake we can use it function in module 
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">! /usr/bin/python</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">Filepath:  ~/mypackage/__init__.py</span>

<span style="color: #3a81c3; font-weight: bold;">from</span> .fact  <span style="color: #3a81c3; font-weight: bold;">import</span> factorial, sq
<span style="color: #3a81c3; font-weight: bold;">from</span> .<span style="color: #3a81c3;">sum</span> <span style="color: #3a81c3; font-weight: bold;">import</span> add
<span style="color: #3a81c3; font-weight: bold;">from</span> .mult <span style="color: #3a81c3; font-weight: bold;">import</span> multiply
</pre>
</div>

<p>
To use the package in other prorgam we have  use <code>import mypackage</code> (file name of package) in prg 
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">! /usr/bin/python</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">mypackage should be same dir where prg is run</span>
<span style="color: #3a81c3; font-weight: bold;">import</span> mypackage
<span style="color: #715ab1;">fact</span>=mypackage.factorial<span style="color: #3a81c3;">(</span>5<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">sum</span>=mypackage.add<span style="color: #3a81c3;">(</span>10,20<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">s</span>=mypackage.sq<span style="color: #3a81c3;">(</span>10<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>

<div id="outline-container-orgd4e415b" class="outline-3">
<h3 id="orgd4e415b">Import package from parent directory</h3>
<div class="outline-text-3" id="text-orgd4e415b">
<p>
<a href="https://www.geeksforgeeks.org/python-import-from-parent-directory/">https://www.geeksforgeeks.org/python-import-from-parent-directory/</a>
</p>
</div>
<div id="outline-container-org11f2b90" class="outline-4">
<h4 id="org11f2b90">using sys.path.append method</h4>
<div class="outline-text-4" id="text-org11f2b90">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> sys

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">setting path</span>
sys.path.append<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'../parentdirectory'</span><span style="color: #3a81c3;">)</span>  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">relative path </span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">importing</span>
<span style="color: #3a81c3; font-weight: bold;">from</span> parentdirectory.geeks <span style="color: #3a81c3; font-weight: bold;">import</span> geek_method

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">using</span>
geek_method<span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org6d6f392" class="outline-4">
<h4 id="org6d6f392">os.path.abspath method</h4>
<div class="outline-text-4" id="text-org6d6f392">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> path
<span style="color: #3a81c3; font-weight: bold;">import</span> sys

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">directory reach</span>
<span style="color: #715ab1;">directory</span> = path.path<span style="color: #3a81c3;">(</span>__file__<span style="color: #3a81c3;">)</span>.abspath<span style="color: #3a81c3;">()</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">setting path</span>
sys.path.append<span style="color: #3a81c3;">(</span>directory.parent.parent<span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">importing</span>
<span style="color: #3a81c3; font-weight: bold;">from</span> parentdirectory.geeks <span style="color: #3a81c3; font-weight: bold;">import</span> geek_method

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">using</span>
geek_method<span style="color: #3a81c3;">()</span>

</pre>
</div>
</div>
</div>
</div>
</div>


<div id="outline-container-org89a414e" class="outline-2">
<h2 id="org89a414e">Exceptions Handling</h2>
<div class="outline-text-2" id="text-org89a414e">
</div>
<div id="outline-container-org52f7a5c" class="outline-4">
<h4 id="org52f7a5c">What is Exception</h4>
<div class="outline-text-4" id="text-org52f7a5c">
<ul class="org-ul">
<li>Exceptions are runtime error</li>
<li>Exception is an event that disrupt the normal flow of a program during its execution</li>
<li>When a python script enconters a situation that it can't cope  with , it rise an exception</li>
<li>Exception is a python object that represents an error</li>
<li>When a python script raises an exception,it must either handle the exception immediately; otherwise it would terminate  the program</li>
</ul>
</div>
</div>

<div id="outline-container-orgc906db5" class="outline-4">
<h4 id="orgc906db5">How to handle Exception ?</h4>
<div class="outline-text-4" id="text-orgc906db5">
<ul class="org-ul">
<li>If you have some suspicious code that may rise an exception, you can defend your program by placing the suspicious code in a <code>try:</code> block</li>
<li>In  <code>try:</code> block include a except: statements to handle the problem.</li>
</ul>
</div>
<ul class="org-ul">
<li><a id="org61135ae"></a>syntax<br />
<div class="outline-text-5" id="text-org61135ae">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
<span style="color: #2aa1ae; background-color: #ecf3ec;">#    </span><span style="color: #2aa1ae; background-color: #ecf3ec;">your operations here</span>
    statements
    statements
    .................
<span style="color: #3a81c3; font-weight: bold;">except</span>:
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">If there is any exception statements execute block</span>
    statements
    statements
<span style="color: #3a81c3; font-weight: bold;">else</span>:
 <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">If there is no exception statements execute block</span>
    statements
    statements
</pre>
</div>
</div>
</li>

<li><a id="orgbb73183"></a>Try- except-else statement<br />
<div class="outline-text-5" id="text-orgbb73183">
<p>
-Try-except statement  catches all the exception that occur.
-Using this kind of try-except statement is not considered a good prog practice
-It catches all exceptions but does not make prog'er identify the root cause of problem that may occur
</p>
</div>
</li>

<li><a id="org0e89674"></a>Exampels<br />
<div class="outline-text-5" id="text-org0e89674">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
    fh = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"testfile"</span>,<span style="color: #2d9574;">"r"</span><span style="color: #3a81c3;">)</span>
    fh.write<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"This is my test file!"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #ba2f59; font-weight: bold;">IOError</span>:
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">error in Input/Output</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Error : can't find file or read data"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Written content in the file successfully"</span><span style="color: #3a81c3;">)</span>

</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span> : 
    f = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'notfound.txt'</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">if</span> f.name == <span style="color: #2d9574;">'notfound.txt'</span>:
        <span style="color: #3a81c3; font-weight: bold;">raise</span> MyNotFoundException <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Rise Exception Manually </span>
<span style="color: #3a81c3; font-weight: bold;">except</span> FileNoteFoundError <span style="color: #3a81c3; font-weight: bold;">as</span> e : 
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>e<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">except</span> MyNoteFoundException <span style="color: #3a81c3; font-weight: bold;">as</span> nf:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Error'</span><span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">else</span>: 
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f.read<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>
    f.close<span style="color: #3a81c3;">()</span>

<span style="color: #3a81c3; font-weight: bold;">finally</span>:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Executine FInally ..."</span><span style="color: #3a81c3;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> sqlite3
<span style="color: #715ab1;">conn</span> = sqlite3.connect<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'systeminfo.db'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">cur</span> = conn.cursor<span style="color: #3a81c3;">()</span>

<span style="color: #715ab1;">genre</span> = <span style="color: #2d9574;">'test'</span>
<span style="color: #3a81c3; font-weight: bold;">try</span>:
    cur.execute<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'''INSERT OR IGNORE INTO Genre (name) VALUES ( ? )'''</span>, <span style="color: #6c3163;">(</span> genre, <span style="color: #6c3163;">)</span> <span style="color: #3a81c3;">)</span>
    cur.execute<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'SELECT id FROM Artist WHERE name = ? '</span>, <span style="color: #6c3163;">(</span>genre, <span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
    genre_id = cur.fetchone<span style="color: #3a81c3;">()</span>
    <span style="color: #3a81c3; font-weight: bold;">if</span> genre_id <span style="color: #3a81c3; font-weight: bold;">is</span> <span style="color: #4e3163;">None</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Select did not find any artist for {} genre'</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>genre<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">else</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Select resulted in Artist ID {}'</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>genre_id<span style="color: #2d9574;">[</span>0<span style="color: #2d9574;">]</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #ba2f59; font-weight: bold;">Exception</span> <span style="color: #3a81c3; font-weight: bold;">as</span> e:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(e)</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Exception: {}'</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>e<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">raise</span> <span style="color: #ba2f59; font-weight: bold;">Exception</span><span style="color: #3a81c3;">(</span>e<span style="color: #3a81c3;">)</span>

conn.commit<span style="color: #3a81c3;">()</span>
conn.close<span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>
</li>
</ul>
</div>

<div id="outline-container-org7a376f0" class="outline-4">
<h4 id="org7a376f0">Try -except with multiple expressions</h4>
<div class="outline-text-4" id="text-org7a376f0">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">You do your operations here</span>
    statements
    statements
    statements
<span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #3a81c3;">(</span> Exception1, Exception2,.......Exception3  <span style="color: #3a81c3;">)</span>:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if code has any exceptions from given list (Exception1,........N) execute this block</span>
    statements
    statements
<span style="color: #3a81c3; font-weight: bold;">else</span>:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if there is no exception execute this block</span>
    statements
    statements
</pre>
</div>

<p>
Example:
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
    x = <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">input</span> <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"enter number"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
    <span style="color: #715ab1;">y</span> = <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">int</span><span style="color: #6c3163;">(</span><span style="color: #2d9574;">"enter another number"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
    <span style="color: #715ab1;">z</span> = x/y
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>z<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #3a81c3;">(</span> <span style="color: #ba2f59; font-weight: bold;">ValueError</span>, <span style="color: #ba2f59; font-weight: bold;">ZeroDivisionError</span>, <span style="color: #ba2f59; font-weight: bold;">KeyboardInterrupt</span><span style="color: #3a81c3;">)</span>:
    <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">ValueError : input is n't numeric , y =0, interrupt by C-c</span>
    <span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Error occured"</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org7a8bcf6" class="outline-4">
<h4 id="org7a8bcf6">Finally</h4>
<div class="outline-text-4" id="text-org7a8bcf6">
<p>
finally vs except 
finally block is execute in any case if exception occure or not it will execute the block
Note : If you use finally you can't use except and else in try block 
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
<span style="color: #2aa1ae; background-color: #ecf3ec;">#    </span><span style="color: #2aa1ae; background-color: #ecf3ec;">your operations here</span>
    statements
    statements
    .................
<span style="color: #3a81c3; font-weight: bold;">finally</span>:
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Execute this block </span>
    statements
    statements
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc42bdbb" class="outline-4">
<h4 id="orgc42bdbb">Example for Using Finial inside Exception</h4>
<div class="outline-text-4" id="text-orgc42bdbb">
<p>
Example :
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
    fh = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"testfile"</span>, <span style="color: #2d9574;">"w"</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">try</span>:
        fh.write<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"This is my test"</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">finally</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Going to close the file"</span><span style="color: #3a81c3;">)</span>
        fh.close<span style="color: #3a81c3;">()</span>
<span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #ba2f59; font-weight: bold;">IOError</span>:
    <span style="color: #3a81c3;">print</span> <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Error: can't fint file or read data"</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgfd4db84" class="outline-4">
<h4 id="orgfd4db84">Argument of Exception</h4>
<div class="outline-text-4" id="text-orgfd4db84">
<ul class="org-ul">
<li>An exception can have an argument, which is value  that give additional information about the problem</li>
<li>The content of an argument vary by exception</li>
<li>You can capture an exception's argument by supplying a variable in except clause</li>
<li>To handle a single exception, you can have a variable follow the name of the exception in the except statement</li>
<li>To trap mulitple exception, you can have a variable follow the tuple of the exception</li>
</ul>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">You do your operations here</span>
    statments
    statments
<span style="color: #3a81c3; font-weight: bold;">except</span> EXCEPTION_TYPE <span style="color: #3a81c3; font-weight: bold;">as</span> ARGUMENT:
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">you can print value of ARGUMENT here</span>
</pre>
</div>

<p>
Here EXCEPTION<sub>TYPE</sub> and ARGUMENT varies from code
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">square</span><span style="color: #3a81c3;">(</span>var<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3; font-weight: bold;">try</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">int</span><span style="color: #6c3163;">(</span>var<span style="color: #6c3163;">)</span>**2<span style="color: #3a81c3;">)</span>
        <span style="color: #3a81c3; font-weight: bold;">return</span>
    <span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #ba2f59; font-weight: bold;">ValueError</span> <span style="color: #3a81c3; font-weight: bold;">as</span> Argument:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"The argument does not contain numbers \n"</span><span style="color: #3a81c3;">)</span>

square<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"10"</span><span style="color: #3a81c3;">)</span>
square<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"abc"</span><span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org3103635" class="outline-4">
<h4 id="org3103635">Raising an Exception</h4>
<div class="outline-text-4" id="text-org3103635">
<p>
You can raise exception in serveral ways by using the raise statement.
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">raise</span> <span style="color: #3a81c3;">[</span>ExceptionType  <span style="color: #6c3163;">[</span>, args <span style="color: #2d9574;">[</span>, traceback<span style="color: #2d9574;">]</span> <span style="color: #6c3163;">]</span>  <span style="color: #3a81c3;">]</span>
</pre>
</div>

<p>
ExceptionType : type of exception
Args          : value for exception arg. optional arg
Trackback     : trackes back to object that has exception
</p>

<p>
In General:
-Exception can be a string, a class, an object
-Most of exception that python core raises are classes with arg that is isntance of the class
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
    marks = <span style="color: #3a81c3;">int</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">input</span> <span style="color: #6c3163;">(</span><span style="color: #2d9574;">"input marks"</span><span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">if</span> marks&lt;0 <span style="color: #3a81c3; font-weight: bold;">or</span> marks &gt;100 :
        <span style="color: #3a81c3; font-weight: bold;">raise</span> <span style="color: #ba2f59; font-weight: bold;">Exception</span><span style="color: #3a81c3;">(</span>marks<span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"marks within value range "</span>,e<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #ba2f59; font-weight: bold;">Exception</span> <span style="color: #3a81c3; font-weight: bold;">as</span> e:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"error Invalid marks input"</span>,e<span style="color: #3a81c3;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python">    <span style="color: #3a81c3; font-weight: bold;">try</span>:
        cur.execute<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"""SELECT * FROM EQ_index WHERE symbol=?"""</span>,<span style="color: #6c3163;">(</span>symbol,<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
        token = cur.fetchall<span style="color: #3a81c3;">()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#         </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(token)</span>
        <span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">len</span><span style="color: #6c3163;">(</span>token<span style="color: #6c3163;">)</span> ==0<span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">or</span> <span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">len</span><span style="color: #6c3163;">(</span>token<span style="color: #6c3163;">)</span> &gt;1<span style="color: #3a81c3;">)</span>  :
            <span style="color: #3a81c3; font-weight: bold;">raise</span> <span style="color: #ba2f59; font-weight: bold;">Exception</span>
        <span style="color: #3a81c3; font-weight: bold;">else</span> :
<span style="color: #2aa1ae; background-color: #ecf3ec;">#             </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print(token[0][0])</span>
            <span style="color: #3a81c3; font-weight: bold;">return</span> token<span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">][</span>0<span style="color: #3a81c3;">]</span>
    <span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #ba2f59; font-weight: bold;">Exception</span> <span style="color: #3a81c3; font-weight: bold;">as</span> e :
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f<span style="color: #2d9574;">'TradingSymbol = ** </span>{symbol}<span style="color: #2d9574;"> ** is not present in Zerodha Instrument NSE Equity List'</span><span style="color: #3a81c3;">)</span> 
    dbase.commit<span style="color: #3a81c3;">()</span>    
    dbase.close<span style="color: #3a81c3;">()</span>

</pre>
</div>
</div>
</div>
<div id="outline-container-orgb9a8ad2" class="outline-4">
<h4 id="orgb9a8ad2">Standard Exception</h4>
<div class="outline-text-4" id="text-orgb9a8ad2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Exception Name</th>
<th scope="col" class="org-left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Exception</td>
<td class="org-left">Base class for for all exceptions</td>
</tr>

<tr>
<td class="org-left">Stopiteration</td>
<td class="org-left">raised when next() of iter does not point a obj</td>
</tr>

<tr>
<td class="org-left">SystemExit</td>
<td class="org-left">raised by sys.exit() function</td>
</tr>

<tr>
<td class="org-left">StandardError</td>
<td class="org-left">Base calss for all built-in exception except stop iteration and system exit</td>
</tr>

<tr>
<td class="org-left">ArithmeticError</td>
<td class="org-left">Base class for all error that occur for numeric calculation</td>
</tr>

<tr>
<td class="org-left">OverflowError</td>
<td class="org-left">raised when a calculation exceed man limit for a numeric type</td>
</tr>

<tr>
<td class="org-left">FloatingPointError</td>
<td class="org-left">Raised when a floationg point cal fails</td>
</tr>

<tr>
<td class="org-left">ZeroDivisionError</td>
<td class="org-left">Raised when divis or modulo by zero</td>
</tr>

<tr>
<td class="org-left">AssertionError</td>
<td class="org-left">Raised in case of failure of assert statement</td>
</tr>

<tr>
<td class="org-left">AttributeError</td>
<td class="org-left">Raised in case of failure of attribute ref or assignment</td>
</tr>

<tr>
<td class="org-left">ImportError</td>
<td class="org-left">Raised when an import statement fails</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org673afe7" class="outline-4">
<h4 id="org673afe7">User Defined Exception</h4>
<div class="outline-text-4" id="text-org673afe7">
<p>
Python allows to create user-defined exceptions by derving classes from the standard built-in-exceptions.
</p>
</div>
<ul class="org-ul">
<li><a id="org98d8bd5"></a>syntax<br />
<div class="outline-text-5" id="text-org98d8bd5">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">NetworkError</span><span style="color: #3a81c3;">(</span><span style="color: #ba2f59; font-weight: bold;">RuntimeError</span><span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span> <span style="color: #3a81c3;">(</span>selft,arg<span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">self</span>.<span style="color: #715ab1;">arg</span> = arg
</pre>
</div>

<p>
Here a class is sub classed from Runtime Error
It is useful when you need to display more specific information when an exception is caught.
</p>
</div>
</li>

<li><a id="orge5a618f"></a>Raise Exception<br />
<div class="outline-text-5" id="text-orge5a618f">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">try</span>:
    <span style="color: #3a81c3; font-weight: bold;">raise</span> NetworkError<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Bad hostname"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">except</span> NetworkError,e:
    <span style="color: #3a81c3;">print</span> e.args
</pre>
</div>
</div>
</li>
</ul>
</div>
<div id="outline-container-org3870776" class="outline-4">
<h4 id="org3870776">Assertion Error</h4>
<div class="outline-text-4" id="text-org3870776">
<p>
Assertion is used to test the prog or to  check that can turn on or off  when you are done with your testing of program
An assertion is similar to a <code>raise-if</code> statement
Assertion is carried by assert statment (conditon)
Assertion at starting of a function to check for valid input, and
After a function call to check for valid output.
</p>
</div>
<ul class="org-ul">
<li><a id="orgf383d6f"></a>syntax<br />
<div class="outline-text-5" id="text-orgf383d6f">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">assert</span> expression<span style="color: #3a81c3;">(</span>condition<span style="color: #3a81c3;">)[</span>,  Arguments <span style="color: #3a81c3;">]</span>
</pre>
</div>
<p>
If the expression is false, python raises an assertionError exception.
</p>

<p>
Example:
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">kelvin2Farhrenheit</span> <span style="color: #3a81c3;">(</span> temp <span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3; font-weight: bold;">try</span>:
        <span style="color: #3a81c3; font-weight: bold;">assert</span><span style="color: #3a81c3;">(</span>temp&gt;=0<span style="color: #3a81c3;">)</span>,temp <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if false then assression error will be raised</span>
        <span style="color: #3a81c3; font-weight: bold;">return</span> <span style="color: #3a81c3;">(</span>temp-273<span style="color: #3a81c3;">)</span>*1.8+32
    <span style="color: #3a81c3; font-weight: bold;">except</span> Assertion Error : <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">arg is temp</span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Temperatur is less the Absolute Zero"</span>, temp<span style="color: #3a81c3;">)</span>


<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>kelvin2Farhrenheit<span style="color: #6c3163;">(</span>273<span style="color: #6c3163;">)</span>,<span style="color: #2d9574;">"deg far"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3;">int</span><span style="color: #6c3163;">(</span>kelvin2Farhrenheit<span style="color: #2d9574;">(</span>505.78<span style="color: #2d9574;">)</span><span style="color: #6c3163;">)</span>,<span style="color: #2d9574;">"deg far"</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>kelvin2Farhrenheit<span style="color: #6c3163;">(</span>-5<span style="color: #6c3163;">)</span>,<span style="color: #2d9574;">"deg far"</span><span style="color: #3a81c3;">)</span> <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">error is temp&gt; 10 </span>
</pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div id="outline-container-org7a10117" class="outline-2">
<h2 id="org7a10117">DuckTyping</h2>
<div class="outline-text-2" id="text-org7a10117">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Duck</span>:
   <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">quack</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Quack, quack'</span><span style="color: #3a81c3;">)</span>
   <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">fly</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Flap , flap'</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">def quack_and_fly(thing):</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># Not Duck-Typed(Non-pythonic)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if isinstance(thing, Duck):</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#      </span><span style="color: #2aa1ae; background-color: #ecf3ec;">thing.quack()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#      </span><span style="color: #2aa1ae; background-color: #ecf3ec;">thing.fly()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">else:</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#      </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print('This has to be a Duck!')</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">print()</span>

<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">quack_and_fly</span><span style="color: #3a81c3;">(</span>thing<span style="color: #3a81c3;">)</span>
  thing.quack<span style="color: #3a81c3;">()</span>
  thing.quack<span style="color: #3a81c3;">()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">################################################</span>
  <span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">LBYL :Look Before You Leave(Non-Pythonic)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">We are asking permisson and run code</span>
  <span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #3a81c3;">hasattr</span><span style="color: #3a81c3;">(</span>thing, <span style="color: #2d9574;">'quack'</span><span style="color: #3a81c3;">)</span>:
     <span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #3a81c3;">callable</span><span style="color: #3a81c3;">(</span>thing.quac<span style="color: #3a81c3;">)</span>:
        thing.quack<span style="color: #3a81c3;">()</span>
  <span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #3a81c3;">hasattr</span><span style="color: #3a81c3;">(</span>thing, <span style="color: #2d9574;">'fly'</span><span style="color: #3a81c3;">)</span>:
     <span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #3a81c3;">callable</span><span style="color: #3a81c3;">(</span>thing.fly<span style="color: #3a81c3;">)</span>:
        thing.fly<span style="color: #3a81c3;">()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">###########################################</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">EAFP : it Eassier to Ask Forgiveness and Ask Permission</span>
  <span style="color: #3a81c3; font-weight: bold;">try</span>:
    thing.quack<span style="color: #3a81c3;">()</span>
    thing.quack<span style="color: #3a81c3;">()</span>
    thing.bark<span style="color: #3a81c3;">()</span>
  <span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #ba2f59; font-weight: bold;">AttributeError</span> <span style="color: #3a81c3; font-weight: bold;">as</span> e:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">()</span>

d = Duck<span style="color: #3a81c3;">()</span>
quack_and_fly<span style="color: #3a81c3;">(</span>d<span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">p</span> = Person<span style="color: #3a81c3;">()</span>
quack_and_fly<span style="color: #3a81c3;">(</span>p<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>

<div id="outline-container-orgc7d0098" class="outline-3">
<h3 id="orgc7d0098">Example2</h3>
<div class="outline-text-3" id="text-orgc7d0098">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">person</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span>:<span style="color: #2d9574;">'Jess'</span> , <span style="color: #2d9574;">'age'</span>: 23<span style="color: #3a81c3;">}</span>
<span style="color: #715ab1;">person</span> = <span style="color: #3a81c3;">{</span><span style="color: #2d9574;">'name'</span>:<span style="color: #2d9574;">'Jess'</span> , <span style="color: #2d9574;">'age'</span>: 23, <span style="color: #2d9574;">'job'</span>:<span style="color: #2d9574;">'Programmer'</span><span style="color: #3a81c3;">}</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">###################################################################</span><span style="color: #2aa1ae; background-color: #ecf3ec;">33</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">LBYL</span>
<span style="color: #3a81c3; font-weight: bold;">if</span> <span style="color: #2d9574;">'name'</span> <span style="color: #3a81c3; font-weight: bold;">in</span> person <span style="color: #3a81c3; font-weight: bold;">and</span> <span style="color: #2d9574;">'age'</span> <span style="color: #3a81c3; font-weight: bold;">in</span> person <span style="color: #2d9574;">'job'</span> <span style="color: #3a81c3; font-weight: bold;">in</span> person:
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"I'm {name}, I'm {age} year old and I am a {job}"</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>**person<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span> :
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Missing some keys)</span>
<span style="color: #2d9574;">############################################################################</span>
<span style="color: #2d9574;"># EAFP (Pythonic)</span>
<span style="color: #2d9574;">try:</span>
<span style="color: #2d9574;">   print("I'</span>m <span style="color: #6c3163;">{</span>name<span style="color: #6c3163;">}</span>. I<span style="color: #2d9574;">'m {age} years old and I am a {job}".format(**person)</span>
<span style="color: #2d9574;">except KeyError as e:</span>
<span style="color: #2d9574;">   print("Missing {} key".format(e))</span>


<span style="color: #2d9574;">##</span>
<span style="color: #2d9574;"># Example</span>
<span style="color: #2d9574;">#####</span>

<span style="color: #2d9574;">my_list = [1,2,3,4,5,6]</span>

<span style="color: #2d9574;"># Non-Pythonic</span>
<span style="color: #2d9574;">if len(my_list) &gt;6:</span>
<span style="color: #2d9574;">  pritn(my_list[5])</span>
<span style="color: #2d9574;">else:</span>
<span style="color: #2d9574;">  print('</span>That index does <span style="color: #3a81c3; font-weight: bold;">not</span> exist<span style="color: #2d9574;">')</span>

<span style="color: #2d9574;"># Pythonic</span>
<span style="color: #2d9574;">try:</span>
<span style="color: #2d9574;">  print(my_list[5])</span>
<span style="color: #2d9574;">except IndexError:</span>
<span style="color: #2d9574;">  print('</span>That index does <span style="color: #3a81c3; font-weight: bold;">not</span> exist<span style="color: #2d9574;">')</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org44c5d00" class="outline-3">
<h3 id="org44c5d00">Why we use EAFP</h3>
<div class="outline-text-3" id="text-org44c5d00">
<p>
Example :
EAFP : is good for race condition
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> os

<span style="color: #715ab1;">my_file</span> = <span style="color: #2d9574;">'/tmp/test.txt'</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Race Conditon</span>
<span style="color: #3a81c3; font-weight: bold;">if</span> os.access<span style="color: #3a81c3;">(</span>my_file,os.R_OK<span style="color: #3a81c3;">)</span>:
  <span style="color: #3a81c3; font-weight: bold;">with</span> <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span>my_file<span style="color: #3a81c3;">)</span> <span style="color: #3a81c3; font-weight: bold;">as</span> f: <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">if file is deleted after condition</span>
     <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f.read<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
   <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'File can not be accessed'</span><span style="color: #3a81c3;">)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">No Race-Conditon</span>
<span style="color: #3a81c3; font-weight: bold;">try</span>:
  f = <span style="color: #3a81c3;">open</span><span style="color: #3a81c3;">(</span>my_file<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">except</span> <span style="color: #ba2f59; font-weight: bold;">IOError</span> <span style="color: #3a81c3; font-weight: bold;">as</span> e:
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'File can not be accessed'</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3; font-weight: bold;">else</span>:
  <span style="color: #3a81c3; font-weight: bold;">with</span> f:
    <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>f.read<span style="color: #6c3163;">()</span><span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-orgecdded2" class="outline-2">
<h2 id="orgecdded2">Nametuple</h2>
<div class="outline-text-2" id="text-orgecdded2">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">from</span> collections <span style="color: #3a81c3; font-weight: bold;">import</span> namedtuple

<span style="color: #715ab1;">color</span> = <span style="color: #3a81c3;">(</span>55,155,255<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">Color</span> = namedtuple <span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Color'</span>, <span style="color: #6c3163;">[</span><span style="color: #2d9574;">'red'</span>,<span style="color: #2d9574;">'green'</span>,<span style="color: #2d9574;">'blue'</span><span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">gray</span> = Color<span style="color: #3a81c3;">(</span>127,127,127<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">gold</span> = Color<span style="color: #3a81c3;">(</span>255,215,0<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">orange</span> =Color<span style="color: #3a81c3;">(</span>255,165,0<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">tomato</span> = Color<span style="color: #3a81c3;">(</span>255,99,71<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span> gray<span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">]</span>
<span style="color: #3a81c3;">print</span> gray.red
<span style="color: #3a81c3;">print</span> gold.red




</pre>
</div>
</div>
</div>
<div id="outline-container-org87135db" class="outline-2">
<h2 id="org87135db"><span class="todo TODO">TODO</span> Map, Filter &amp; Reduce</h2>
<div class="outline-text-2" id="text-org87135db">
<p>
Youtube : Map, Filter &amp; Reduce | Python Tutorials For Absolute Beginners In Hindi #48
<a href="https://www.youtube.com/watch?v=zimHDlOpGXo">https://www.youtube.com/watch?v=zimHDlOpGXo</a>
</p>
</div>
</div>
<div id="outline-container-org06d8f81" class="outline-2">
<h2 id="org06d8f81">OOP [Objective Oriented Programming]</h2>
<div class="outline-text-2" id="text-org06d8f81">
</div>
<div id="outline-container-org205708d" class="outline-4">
<h4 id="org205708d">Introductions</h4>
<div class="outline-text-4" id="text-org205708d">
<p>
Class:  A user-defined prototpye that defines a set of attributes that characterise any obj of a class
</p>

<p>
Object : A unique instance of a data structure that's defined by its class .
</p>

<p>
Class varialbe   : A variable that is shared by all instances of a class
Data member      : holds data associated with a class and its objects
Instance Variable: defined inside a method and belongs to current instance of class.
</p>

<p>
Instance            : An individual object of a certain class
Method              : A special kind of function that is defined in a class definition.
Function overlaoding: assignment of more than one behavior to a particular function.
</p>

<p>
Overlaoding(Function/operator): 
</p>

<p>
Inheritance : The transfer of the characterisics of a class to other classes that are derivied from it.
</p>

<p>
Operation overlaoding: The assignment of more than one function to a particualr operator.
</p>
</div>
</div>

<div id="outline-container-org2d12196" class="outline-4">
<h4 id="org2d12196">Creating Class</h4>
<div class="outline-text-4" id="text-org2d12196">
<p>
<code>class</code> keyword is used to create a new class 
The sysntax <code>class</code> follwed by <code>Name of class(ClassName)</code> and <code>:</code>
The syntax is given below
</p>
</div>
<ul class="org-ul">
<li><a id="orgcafc789"></a>syntax<br />
<div class="outline-text-5" id="text-orgcafc789">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">ClassName</span>:
    <span style="color: #da8b55;">""" Class documentation string optional """</span>
    class_suite            <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">contain definition of data attributes, functions, methods</span>
</pre>
</div>
<p>
Class has a documentation string, which is used to accessed via <code>ClassName.__doc__</code>
<code>class_suite</code> conisist of all the compoent statements like class members, data attributes, and functions.
<code>__init__( )</code> method is class acts as constructor
</p>
</div>
</li>
</ul>
</div>

<div id="outline-container-orgd20baaf" class="outline-4">
<h4 id="orgd20baaf">Creating Object</h4>
<div class="outline-text-4" id="text-orgd20baaf">
<p>
To create a instance of class, call the class using the class name and pass in whatever arguments in <code>__init__</code> method accepts
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">obj_name</span> = ClassName<span style="color: #3a81c3;">(</span>arg1, arg2....<span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orgc80f0ad" class="outline-4">
<h4 id="orgc80f0ad">Example:</h4>
<div class="outline-text-4" id="text-orgc80f0ad">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Employee</span>:
    <span style="color: #da8b55;">'Common base class for all employees'</span>
    empCount = 0  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">class varialbe</span>

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>, name, salary<span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">self</span>.<span style="color: #715ab1;">name</span> = name
        <span style="color: #3a81c3; font-weight: bold;">self</span>.<span style="color: #715ab1;">salary</span> = salary
        Employee.<span style="color: #715ab1;">empcount</span> += 2

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">displayCount</span><span style="color: #3a81c3;">()</span>: <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">methods</span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Total number of Employees %d"</span> % Employee.empCount<span style="color: #3a81c3;">)</span>

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">displayEmployee</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Name : "</span>, <span style="color: #3a81c3; font-weight: bold;">self</span>.name, <span style="color: #2d9574;">", Salary : "</span>, <span style="color: #3a81c3; font-weight: bold;">self</span>.salary<span style="color: #3a81c3;">)</span>

emp1 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Zara"</span>, 2000<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">emp2</span> = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Manni"</span>, 5000<span style="color: #3a81c3;">)</span>
emp1.displayEmployee<span style="color: #3a81c3;">()</span>     <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">acessing the attributes</span>
emp1.displayEmployee<span style="color: #3a81c3;">()</span>    
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Total Employee %d"</span> % Employee.emCount<span style="color: #3a81c3;">)</span>
Employee.dispalyCount<span style="color: #3a81c3;">()</span>
</pre>
</div>

<ul class="org-ul">
<li>Here <code>Employee</code> class is defined</li>
<li>_<sub>init</sub>__ is constructor in py and desine to accept two arg <code>name, salary</code> and every constructor should have arg <code>slef</code></li>
<li><code>class variable</code> is also defined <code>empCount</code></li>
<li><code>class varialbe</code> is variable that are shared my all objects</li>
<li><code>class method</code> are also defined like <code>displayCount</code>, <code>dispalyEmployee</code></li>

<li><code>emp1,emp2</code> object are created by Employee class</li>
</ul>
</div>
</div>

<div id="outline-container-org67fa0a3" class="outline-4">
<h4 id="org67fa0a3">Accessing Attributes</h4>
<div class="outline-text-4" id="text-org67fa0a3">
<p>
Class contain data members, class varialbes, methods so class has different attributes
This attributes are available to its objects
</p>

<p>
But access to attributes are indepentend or individual
</p>

<p>
To access the obj attributes  we use <code>dot</code> operator with object.
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">To accessing attributes are done by "." or dot operator</span>
emp1.displayEmployee<span style="color: #3a81c3;">()</span>
emp1.displayEmployee<span style="color: #3a81c3;">()</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">There are some class method which are common(share) to all obj eg : count  </span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Total Employee %d"</span> % Employee.emCount<span style="color: #3a81c3;">)</span>
Employee.dispalyCount<span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org6481e22" class="outline-4">
<h4 id="org6481e22">Build-in-Function for operating of class memb(attribute)</h4>
<div class="outline-text-4" id="text-org6481e22">
<p>
getattr(obj,name[,default]) : to access the attribute of obj
hasattr(obj,name[,default]) : to check if an attribute or not
setattr(obj,name[,default]) : to set an attribute would be create if does not exist
delattr(obj,name[,default]) : to del an attribute for given obj
</p>
</div>
</div>

<div id="outline-container-org2225418" class="outline-4">
<h4 id="org2225418">Build-in-Class Attributes:(attri for class as whole than indivudual obj)</h4>
<div class="outline-text-4" id="text-org2225418">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Build-in-attributes</th>
<th scope="col" class="org-left">&#xa0;</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">_<sub>dict</sub>__</td>
<td class="org-left">Dict contaiong the namespace of the class</td>
</tr>

<tr>
<td class="org-left">_<sub>doc</sub>__</td>
<td class="org-left">Documentation str or None if n't defined</td>
</tr>

<tr>
<td class="org-left">_<sub>name</sub>__</td>
<td class="org-left">Name of Class class</td>
</tr>

<tr>
<td class="org-left">_<sub>module</sub>__</td>
<td class="org-left">module name in which class is defined (attri <span class="underline"><span class="underline">main</span></span>) is interactive mode</td>
</tr>

<tr>
<td class="org-left">_<sub>bases</sub>__</td>
<td class="org-left">if has inheritance it can be used  a base case class or</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-org98136ae" class="outline-4">
<h4 id="org98136ae">Example:</h4>
<div class="outline-text-4" id="text-org98136ae">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Employee</span>:
    <span style="color: #da8b55;">'Common base class for all employees'</span>
    empCount = 0  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">class varialbe</span>

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>, name, salary<span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">self</span>.<span style="color: #715ab1;">name</span> = name
        <span style="color: #3a81c3; font-weight: bold;">self</span>.<span style="color: #715ab1;">salary</span> = salary
        Employee.<span style="color: #715ab1;">empcount</span> += 2

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">displayCount</span><span style="color: #3a81c3;">()</span>: <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">methods</span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Total number of Employees %d"</span> % Employee.empCount<span style="color: #3a81c3;">)</span>

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">displayEmployee</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Name : "</span>, <span style="color: #3a81c3; font-weight: bold;">self</span>.name, <span style="color: #2d9574;">", Salary : "</span>, <span style="color: #3a81c3; font-weight: bold;">self</span>.salary<span style="color: #3a81c3;">)</span>

emp1 = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Zara"</span>, 2000<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">emp2</span> = Employee<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Manni"</span>, 5000<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Employee.__doc__ :"</span>,    Employee.<span style="color: #3a81c3;">__doc__</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Employee.__name__ :"</span>,   Employee.<span style="color: #3a81c3;">__name__</span> <span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Employee.__module__ :"</span>, Employee.<span style="color: #3a81c3;">__module__</span><span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Employee.__base__ :"</span>,   Employee.__base__ <span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Employee.__dict__ :"</span>,   Employee.<span style="color: #3a81c3;">__dict__</span> <span style="color: #3a81c3;">)</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgc31e3ff" class="outline-2">
<h2 id="orgc31e3ff">Inheritance</h2>
<div class="outline-text-2" id="text-orgc31e3ff">
<p>
Create a class by deriving it from an existing class by listing the parent class in parantheses after the new class name
</p>

<p>
Child class inherits the attributes of its parents class, and you can use those attributes as if they were defined in child class
</p>

<p>
Child class can override data members and methods from parents
</p>

<p>
Derived classes are declareld much like their parent class
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">SubClassName</span> <span style="color: #3a81c3;">(</span>ParentClass1<span style="color: #6c3163;">[</span>, ParentClass2....<span style="color: #6c3163;">]</span><span style="color: #3a81c3;">)</span>:
    <span style="color: #da8b55;">"This is subclass document string"</span>
    <span style="color: #3a81c3; font-weight: bold;">pass</span>
    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">class_suite</span>
</pre>
</div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">issubclass(sub, sup)</td>
<td class="org-left">boolean function return true if given sub is subclass of sup class</td>
</tr>

<tr>
<td class="org-left">isinstance(obj, class)</td>
<td class="org-left">boolean function return true if obj is an instance of calss</td>
</tr>
</tbody>
</table>
</div>

<div id="outline-container-orgad58862" class="outline-3">
<h3 id="orgad58862">Eg</h3>
<div class="outline-text-3" id="text-orgad58862">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Parent</span>:
    parentAttr = 100
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Call parent constructor"</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">setAttr</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>, attr<span style="color: #3a81c3;">)</span>:
        Parent.<span style="color: #715ab1;">parentAttr</span> = atrr
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">getAttr</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Parent attribute : "</span>, Parent.parentAttr<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">child</span><span style="color: #3a81c3;">(</span>Parent<span style="color: #3a81c3;">)</span>:
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3;">super</span><span style="color: #3a81c3;">()</span>.__init__<span style="color: #3a81c3;">()</span>
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Calling child method"</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">childMethod</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"Call child method"</span><span style="color: #3a81c3;">)</span>
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">parentMethod</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">"overriden parent method"</span><span style="color: #3a81c3;">)</span>

c = Child<span style="color: #3a81c3;">()</span>             <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">call __init__ of parent then child</span>
                        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">call parent constructor then child constructor</span>

c.childMethod<span style="color: #3a81c3;">()</span>         <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">call child method</span>
c.parentMethod<span style="color: #3a81c3;">()</span>        <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">call overriden parent method</span>
c.setAttr<span style="color: #3a81c3;">(</span>200<span style="color: #3a81c3;">)</span>
c.gerAttr<span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org6169141" class="outline-2">
<h2 id="org6169141">Overloading Vs Overriding</h2>
<div class="outline-text-2" id="text-org6169141">
<p>
Overloading : When functions has multipule defination in a same class, each defination provide diff functoins
</p>

<p>
Overriding: You always override you parent class methods in case you may wants a special or different functionality in your subclass
</p>
</div>

<div id="outline-container-orgfcb1dcf" class="outline-4">
<h4 id="orgfcb1dcf">Base Overiding methods</h4>
<div class="outline-text-4" id="text-orgfcb1dcf">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">_<sub>init</sub>_<sub>(self[, agrs ])</sub></td>
<td class="org-left">Constructor</td>
</tr>

<tr>
<td class="org-left">_<sub>del</sub>_<sub>(self)</sub></td>
<td class="org-left">Destructor,del an obj</td>
</tr>

<tr>
<td class="org-left">_<sub>repr</sub>_<sub>(self)</sub></td>
<td class="org-left">Evaluatable string representation</td>
</tr>

<tr>
<td class="org-left">_<sub>str</sub>_<sub>(self)</sub></td>
<td class="org-left">Print str representation</td>
</tr>

<tr>
<td class="org-left">_<sub>cmp</sub>_<sub>(self,x)</sub></td>
<td class="org-left">Obj comparison</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-orge9786df" class="outline-3">
<h3 id="orge9786df">Operator Overloding</h3>
<div class="outline-text-3" id="text-orge9786df">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Operator</th>
<th scope="col" class="org-left">magic method</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">+</td>
<td class="org-left">object._<sub>add</sub>_<sub>(self,other)</sub></td>
</tr>

<tr>
<td class="org-left">-</td>
<td class="org-left">object._<sub>sub</sub>_<sub>(self,other)</sub></td>
</tr>

<tr>
<td class="org-left">*</td>
<td class="org-left">object._<sub>mul</sub>_<sub>(self,other)</sub></td>
</tr>

<tr>
<td class="org-left">//</td>
<td class="org-left">object._<sub>floordiv</sub>_<sub>(slef,other)</sub></td>
</tr>

<tr>
<td class="org-left">%</td>
<td class="org-left">object._<sub>mod</sub>_<sub>(self,other)</sub></td>
</tr>

<tr>
<td class="org-left">**</td>
<td class="org-left">object._<sub>pow</sub>_<sub>(self,other[, modulo])</sub></td>
</tr>

<tr>
<td class="org-left">&lt;</td>
<td class="org-left">object._<sub>lt</sub>_<sub>(self,other)</sub></td>
</tr>

<tr>
<td class="org-left">&lt;=</td>
<td class="org-left">object._<sub>le</sub>_<sub>(self,other)</sub></td>
</tr>

<tr>
<td class="org-left">==</td>
<td class="org-left">object._<sub>eq</sub>_<sub>(self,other)</sub></td>
</tr>

<tr>
<td class="org-left">!=</td>
<td class="org-left">object._<sub>ne</sub>_<sub>(self,other)</sub></td>
</tr>

<tr>
<td class="org-left">&gt;=</td>
<td class="org-left">object._<sub>ge</sub>_<sub>(slef,other)</sub></td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">&#xa0;</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>

<div id="outline-container-org002c280" class="outline-4">
<h4 id="org002c280">Example</h4>
<div class="outline-text-4" id="text-org002c280">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Length</span>:
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>,c,m<span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">self</span>.c = c
        <span style="color: #3a81c3; font-weight: bold;">self</span>.<span style="color: #715ab1;">m</span> = m

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__str__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span><span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">return</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Length (%d cm, %d mm)'</span> %<span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>.c, <span style="color: #3a81c3; font-weight: bold;">self</span>.m<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__add__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>, other<span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">return</span> <span style="color: #3a81c3;">(</span>Length<span style="color: #6c3163;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>.c + other.c, <span style="color: #3a81c3; font-weight: bold;">self</span>.m + other.m<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">l1</span> = Length<span style="color: #3a81c3;">(</span>2,6<span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">l2</span> = Length<span style="color: #3a81c3;">(</span>5,3<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>l1+l2<span style="color: #3a81c3;">)</span>

</pre>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-org7a05761" class="outline-2">
<h2 id="org7a05761">Data Hiding (Data Encapulatoin)</h2>
<div class="outline-text-2" id="text-org7a05761">
<p>
CPP,JAVA has (visibility mode or acess specifiers private(data in-visible),protected, public, public
</p>

<p>
Python does not have private,protected,public but simillar functions can be used 
</p>

<p>
Attribute with '__' prefix : Not directly visible to outside
Python protect those members by changing to : obj.<sub>ClassName</sub>_<sub>attrName</sub>
</p>
</div>

<div id="outline-container-org00b2205" class="outline-3">
<h3 id="org00b2205">EG:</h3>
<div class="outline-text-3" id="text-org00b2205">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">class</span> <span style="color: #ba2f59; font-weight: bold;">Counter</span>:
    <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">__init__</span><span style="color: #3a81c3;">(</span><span style="color: #3a81c3; font-weight: bold;">self</span>,x<span style="color: #3a81c3;">)</span>:
        <span style="color: #3a81c3; font-weight: bold;">self</span>._c=x       <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">_ prefix this mem should not be used direclty</span>
        <span style="color: #3a81c3; font-weight: bold;">self</span>.<span style="color: #715ab1;">__cc</span>=10    <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">__ prefix this mem can't access direclty</span>

<span style="color: #715ab1;">c1</span> = Counter <span style="color: #3a81c3;">(</span>5<span style="color: #3a81c3;">)</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>c1._c<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">pritn(c1.__c)                          #  direclty can't access</span>
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>c1._Counter__cc<span style="color: #3a81c3;">)</span>                  <span style="color: #2aa1ae; background-color: #ecf3ec;">#  </span><span style="color: #2aa1ae; background-color: #ecf3ec;">can access by "_CLASSNAmE__private variable"</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgcf92239" class="outline-2">
<h2 id="orgcf92239">Garbage Collector</h2>
<div class="outline-text-2" id="text-orgcf92239">
<p>
Python del unnessary obj automatically to free memory space called Garbage Collector
</p>

<p>
Python garbage collector runs during program execution and is triggered when an obj ref difference count reach zero
</p>

<p>
obj refrence count increase when it is assigned a new name or palced in a container(list,tuble,dictionary)
</p>

<p>
obj refrence count decreses when it's delete with del , its reference reassigned or it refrene goes out if scope
</p>
</div>
</div>


<div id="outline-container-org0f055b1" class="outline-2">
<h2 id="org0f055b1"><span class="todo TODO">TODO</span> Generators [033<sub>Generator</sub>: Coreymschafer]</h2>
</div>
<div id="outline-container-org30caa8a" class="outline-2">
<h2 id="org30caa8a"><span class="todo TODO">TODO</span> Decorateors [034,035<sub>Decorators</sub>: Dynamics]</h2>
<div class="outline-text-2" id="text-org30caa8a">
<p>
1st class fuction :
closers:
</p>
</div>

<div id="outline-container-org319823b" class="outline-3">
<h3 id="org319823b">1st class Functions</h3>
<div class="outline-text-3" id="text-org319823b">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">outer_function</span> <span style="color: #3a81c3;">()</span>:
   <span style="color: #715ab1;">message</span> = <span style="color: #2d9574;">'Hi'</span>
   <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">inner_function</span><span style="color: #3a81c3;">()</span>:
       <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>message<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;">#   </span><span style="color: #2aa1ae; background-color: #ecf3ec;">return inner_function()</span>
   <span style="color: #3a81c3; font-weight: bold;">return</span> inner_function<span style="color: #3a81c3;">()</span>


<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">outer_fuction()</span>
<span style="color: #715ab1;">my_func</span> = outer_function<span style="color: #3a81c3;">()</span>

my_func<span style="color: #3a81c3;">()</span>
my_func<span style="color: #3a81c3;">()</span>
my_func<span style="color: #3a81c3;">()</span>


<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">outer_function</span> <span style="color: #3a81c3;">(</span>msg<span style="color: #3a81c3;">)</span>:
   <span style="color: #715ab1;">message</span> = msg
   <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">inner_function</span><span style="color: #3a81c3;">()</span>:
       <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>message<span style="color: #3a81c3;">)</span>
   <span style="color: #3a81c3; font-weight: bold;">return</span> inner_function<span style="color: #3a81c3;">()</span>

<span style="color: #715ab1;">hi_func</span> = outer_function<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Hi'</span><span style="color: #3a81c3;">)</span>
<span style="color: #715ab1;">bye_func</span> = outer_function<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Bye'</span><span style="color: #3a81c3;">)</span>


hi_func<span style="color: #3a81c3;">()</span>
bye_func<span style="color: #3a81c3;">()</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-org3b52f0a" class="outline-3">
<h3 id="org3b52f0a">Decoreators</h3>
<div class="outline-text-3" id="text-org3b52f0a">
<div class="org-src-container">
<pre class="src src-python">
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Decoreator</span>

<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">decorator_function</span><span style="color: #3a81c3;">(</span>original_func<span style="color: #3a81c3;">)</span>:
   <span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">wrapper_function</span><span style="color: #3a81c3;">()</span>:
       <span style="color: #3a81c3; font-weight: bold;">return</span> original_func<span style="color: #3a81c3;">()</span>
   <span style="color: #3a81c3; font-weight: bold;">return</span> wrapper_function


<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">dispaly</span><span style="color: #3a81c3;">()</span>:
  <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'display function ran'</span><span style="color: #3a81c3;">)</span>

<span style="color: #715ab1;">decorated_display</span> = decorator_function<span style="color: #3a81c3;">(</span>dispaly<span style="color: #3a81c3;">)</span>

decoreated_display<span style="color: #3a81c3;">()</span>

</pre>
</div>
</div>
</div>
</div>
<div id="outline-container-org859e67b" class="outline-2">
<h2 id="org859e67b">Logging</h2>
<div class="outline-text-2" id="text-org859e67b">
<p>
<a href="https://www.youtube.com/c/Coreyms/search?query=log">https://www.youtube.com/c/Coreyms/search?query=log</a>
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #3a81c3; font-weight: bold;">import</span> logging 

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Logging Types </span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">- DEBUG : Detailed information, typically of intrest only when dignosing problems</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">- INFO : Confirmation that things are working as expected.</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># # # # # # </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">NOTE : below warning , error and critical will print the msg in console </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># # # # # # </span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">- WARNING: An indication that something unexpected happened, or indicative of some problem in the near future (eg. 'disk space low'). The software is still working as expected.</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">- ERRRO : Due to a more serious problem, the software has not been able to perform some function. </span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">- CRITICAL : A serious error, indication that the program itself may be unable to continue running.</span>



<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># # </span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">Logging to a file  `test.log`</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;"># #</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">logging.basicConfig(filename='test.log', level=logging.DEBUG)</span>

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">with format </span>
 logging.basicConfig<span style="color: #3a81c3;">(</span>filename=<span style="color: #2d9574;">'test.log'</span>, level=logging.DEBUG, <span style="color: #3a81c3;">format</span> = <span style="color: #2d9574;">'%(asctime)s:%(levelname)s:%(message)s'</span><span style="color: #3a81c3;">)</span>


<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">divide</span><span style="color: #3a81c3;">(</span>x,y<span style="color: #3a81c3;">)</span>:

<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">add</span><span style="color: #3a81c3;">(</span>x,y<span style="color: #3a81c3;">)</span>

<span style="color: #3a81c3; font-weight: bold;">def</span> <span style="color: #6c3163; font-weight: bold;">multiply</span><span style="color: #3a81c3;">(</span>x,y<span style="color: #3a81c3;">)</span>

x = 20,
y = 10

add_result = add<span style="color: #3a81c3;">(</span>num_1, num_2<span style="color: #3a81c3;">)</span>
logging.debug<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Add: {} + {} = {}'</span>.<span style="color: #3a81c3;">format</span><span style="color: #6c3163;">(</span>num_1, num_2, add_result<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

sub_reult = sub<span style="color: #3a81c3;">(</span>num_1, num_2<span style="color: #3a81c3;">)</span>
logging.debug<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Sub:{} -{} = {}'</span>.fomat<span style="color: #6c3163;">(</span>num_1, num_2, sub_result<span style="color: #6c3163;">)</span><span style="color: #3a81c3;">)</span>

mul_result = multiply <span style="color: #3a81c3;">(</span>num_1, num_2<span style="color: #3a81c3;">)</span>
logging.debug<span style="color: #3a81c3;">(</span><span style="color: #2d9574;">'Mul:{}*{} = {}'</span>.fomat<span style="color: #6c3163;">(</span>num_1, num_2<span style="color: #6c3163;">)</span>
</pre>
</div>
</div>

<div id="outline-container-orga91816e" class="outline-3">
<h3 id="orga91816e"><span class="todo TODO">TODO</span> Advance Logging</h3>
</div>
</div>
<div id="outline-container-org0b904f1" class="outline-2">
<h2 id="org0b904f1">Python API Development - Comprehensive Course for Beginners</h2>
<div class="outline-text-2" id="text-org0b904f1">
<p>
<a href="https://www.youtube.com/watch?v=0sOvCWFmrtA">https://www.youtube.com/watch?v=0sOvCWFmrtA</a>
</p>
</div>
</div>

<div id="outline-container-org76039b2" class="outline-2">
<h2 id="org76039b2">--------&#x2013;&#x2014; other sources----------</h2>
</div>
<div id="outline-container-orgf620dbe" class="outline-2">
<h2 id="orgf620dbe">Developer</h2>
<div class="outline-text-2" id="text-orgf620dbe">
<div class="org-src-container">
<pre class="src src-python">pip --<span style="color: #3a81c3;">help</span>
pip <span style="color: #3a81c3;">help</span> install
pip search Pympler
pip install Pympler
pip <span style="color: #3a81c3;">list</span>
pip <span style="color: #3a81c3;">list</span> -o <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">give package which are outdate</span>
pip freeze &gt; requirements.txt

<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">install package using requirements</span>
pip install -r requirements.txt  <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">r: requirment file</span>

pip <span style="color: #3a81c3;">list</span> --outdated
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">how to isntall </span>
pip freeze --local | grep -v <span style="color: #2d9574;">'^\-e'</span> | cut -<span style="color: #715ab1;">d</span> = -f 1 | xargs -n1 pip install -U



</pre>
</div>
</div>
</div>
<div id="outline-container-orgb42233a" class="outline-2">
<h2 id="orgb42233a">Python interviews</h2>
<div class="outline-text-2" id="text-orgb42233a">
</div>
<div id="outline-container-org047a5e4" class="outline-3">
<h3 id="org047a5e4">begininners</h3>
<div class="outline-text-3" id="text-org047a5e4">
<p>
write code on whiteboard or paper
basic control flow: for, while, ifelse
discuss how to use python 
web scrapping
own py projects
solve common interview problems : buzz, fibonacius,python interview questions
data types: string,list.tubles, dict,set,
list comprehension:
dict
for key,val in my<sub>dic.iteritems</sub>
</p>

<p>
set
know how to use generators: functions  
</p>
</div>
</div>
<div id="outline-container-org34c068a" class="outline-3">
<h3 id="org34c068a"><span class="todo TODO">TODO</span> yield</h3>
<div class="outline-text-3" id="text-org34c068a">
<p>
xrange
</p>

<p>
basics of oop 
</p>
</div>
</div>
</div>
<div id="outline-container-org1e1eb6a" class="outline-2">
<h2 id="org1e1eb6a">GENERAL interview</h2>
<div class="outline-text-2" id="text-org1e1eb6a">
<p>
github
database
command-line (terminal)
unit testing (continous intergration / delivery )
</p>

<p>
Continous intergration  :
Jenkins
Travis CI
Learning muliple programming langagure
python,c ,java,c++,c#,r,js,php,go,swift
</p>


<p>
quote
</p>

<p>
ones you understand a programming (code)  the languages are just syntax
</p>

<p>
and you can pickup syntax lot faster than concepts
</p>

<p>
Learning how to solve problems(concept) will take years to learn
</p>
</div>
</div>



<div id="outline-container-org184011b" class="outline-2">
<h2 id="org184011b">Online Learning Resoures:</h2>
<div class="outline-text-2" id="text-org184011b">
<p>
Udacity          : Cources by google, facebook, mongobd, clouder, at&amp;t
mitOpenCourseware:
</p>

<p>
You can search ur faourte university courses
</p>

<p>
Stanford:
Google Developers:
</p>

<p>
Derek Banas: Sofware design patterns, 
Computerphile:
</p>

<p>
Eli ComputerGuy    : main  system adim, networking
LearnCode.academy  : web dev
LEvelUp Tuts       : web dev
DevTips            : web design
realcsstricks      : real word progple
php academy        : 
sentdex : python
</p>


<p>
Confernec : PyCon2015,
</p>

<p>
Khanaacademy: 
</p>

<p>
###  math skill's 
</p>

<p>
Nodeschool.io : terminal app + terminal cmd
</p>

<p>
codeacademy   : web dev skill ( online  writring code)
</p>
<pre class="example">
# API TUTORIALS 
</pre>

<p>
treehouse     : payed
lynda         : payed
</p>

<p>
twitter: follow (guido  van Rossum, Raymondh, david Beazley)
</p>

<p>
Codepen       :
</p>

<p>
redit         :
hacker News   :
</p>

<p>
Free Books:
github: vhf/free-prgramming-books 
</p>
</div>
</div>











<div id="outline-container-orgde35043" class="outline-2">
<h2 id="orgde35043">Question</h2>
<div class="outline-text-2" id="text-orgde35043">
</div>
<div id="outline-container-org2c7cf86" class="outline-3">
<h3 id="org2c7cf86">assigment in python</h3>
<div class="outline-text-3" id="text-org2c7cf86">
<p>
'=' is python : refrence of obj on RHS to LHS
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">lhs_obj</span> = rhs_obj 
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">lsh_obj  is now name for reference to object on rhs_obj</span>
</pre>
</div>
</div>
</div>


<div id="outline-container-orgcc1b1f1" class="outline-3">
<h3 id="orgcc1b1f1">assignment in list(immutable)</h3>
<div class="outline-text-3" id="text-orgcc1b1f1">
<div class="org-src-container">
<pre class="src src-python"><span style="color: #715ab1;">a</span>= <span style="color: #3a81c3;">[</span>7,5,11<span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">b</span> = a
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>a,b<span style="color: #3a81c3;">)</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">([7, 5, 11], [7, 5, 11])</span>
<span style="color: #715ab1;">a</span>= <span style="color: #3a81c3;">[</span>11,2,3<span style="color: #3a81c3;">]</span> 
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>a,b<span style="color: #3a81c3;">)</span>   <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">([11, 2, 3], [7, 5, 11])</span>


<span style="color: #715ab1;">a</span> = <span style="color: #3a81c3;">[</span>7,5,11<span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">b</span> = a
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>a,b<span style="color: #3a81c3;">)</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">([7, 5, 11], [7, 5, 11])</span>
<span style="color: #715ab1;">a</span><span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">]</span> = 8
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>a,b<span style="color: #3a81c3;">)</span>          <span style="color: #2aa1ae; background-color: #ecf3ec;">#</span><span style="color: #2aa1ae; background-color: #ecf3ec;">([8, 5, 11], [8, 5, 11])</span>


<span style="color: #715ab1;">list_1</span> = <span style="color: #3a81c3;">[</span><span style="color: #2d9574;">'History'</span>, <span style="color: #2d9574;">'Math'</span>, <span style="color: #2d9574;">'Physics'</span>, <span style="color: #2d9574;">'CompSci'</span><span style="color: #3a81c3;">]</span>
<span style="color: #715ab1;">list2</span> = list_1
<span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>list_1,list2<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(['History', 'Math', 'Physics', 'CompSci'], ['History', 'Math', 'Physics', 'CompSci'])</span>
 <span style="color: #715ab1;">list_1</span><span style="color: #3a81c3;">[</span>0<span style="color: #3a81c3;">]</span>= <span style="color: #2d9574;">'Art'</span>
 <span style="color: #3a81c3;">print</span><span style="color: #3a81c3;">(</span>list_1,list2<span style="color: #3a81c3;">)</span>
<span style="color: #2aa1ae; background-color: #ecf3ec;"># </span><span style="color: #2aa1ae; background-color: #ecf3ec;">(['Art', 'Math', 'Physics', 'CompSci'], ['Art', 'Math', 'Physics', 'CompSci'])</span>
</pre>
</div>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Karthik</p>
<p class="date">Created: 2023-03-16 Thu 15:58</p>
<p class="validation"><a href="https://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
