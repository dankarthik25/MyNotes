#+TITLE: links
#+AUTHOR: Karthik
#+SETUPFILE: ~/mynotes/org2html/org-theme-collection/theme2.setup
* Convert markdown to pdf 
https://github.com/Wandmalfarbe/pandoc-latex-template

clean pandoc LaTeX template to convert your markdown files to PDF or LaTeX. It is designed for lecture notes and exercises with a focus on computer science. The template is compatible with pandoc 2.




https://github.com/prosegrinder/pandoc-templates
An opinionated set of Pandoc templates and scripts for converting markdown to DOCX manuscripts 


* Template info
https://pandoc.org/MANUAL.html#templates
Templates

When the -s/--standalone option is used, pandoc uses a template to add header and footer material that is needed for a self-standing document. To see the default template that is used, just type

pandoc -D *FORMAT*

where FORMAT is the name of the output format. A custom template can be specified using the --template option. You can also override the system default templates for a given output format FORMAT by putting a file templates/default.*FORMAT* in the user data directory (see --data-dir, above). Exceptions:

    For odt output, customize the default.opendocument template.
    For pdf output, customize the default.latex template (or the default.context template, if you use -t context, or the default.ms template, if you use -t ms, or the default.html template, if you use -t html).
    docx and pptx have no template (however, you can use --reference-doc to customize the output).

Templates contain variables, which allow for the inclusion of arbitrary information at any point in the file. They may be set at the command line using the -V/--variable option. If a variable is not set, pandoc will look for the key in the document’s metadata, which can be set using either YAML metadata blocks or with the -M/--metadata option. In addition, some variables are given default values by pandoc. See Variables below for a list of variables used in pandoc’s default templates.

If you use custom templates, you may need to revise them as pandoc changes. We recommend tracking the changes in the default templates, and modifying your custom templates accordingly. An easy way to do this is to fork the pandoc-templates repository and merge in changes after each pandoc release.

* Convert markdown to github css style
https://gist.github.com/dashed/6714393
https://gist.github.com/dashed/6714393#file-github-pandoc-css



* convert org to markdown


https://github.com/larstvei/ox-gfm

Github Flavored Markdown exporter for Org Mode
You can install ox-gfm using elpa. It's available on melpa:

M-x package-install ox-gfm 


https://orgmode.org/worg/org-8.0.html#sec-6-1

ox-backend-*. For example:

    org-html-* for HTML and live in ox-html.el
    org-latex-* for LaTeX and live in ox-latex.el

* Create a website from markdown stored in google drive 
https://stackoverflow.com/questions/30576469/reading-markdown-from-a-file-hosted-in-google-docs


* Django Markdown Tutorial - A Simple Blog Example | Django/Python
https://www.youtube.com/watch?v=t61nTi0lIlk

* VSCode Python Data Science Setup, Part 11: Markdown to (html, pdf ) extensions 
https://www.youtube.com/watch?v=galkO3t_1Og



* #####################################################################
* host web-site using [static html file] in google-drive  [[https://www.youtube.com/watch?v=m3TXRxqiGvw][link]]
The web-site hosted will we public can't be private 
https://www.youtube.com/watch?v=m3TXRxqiGvw
https://stackoverflow.com/questions/30576469/reading-markdown-from-a-file-hosted-in-google-docs
* Django Markdown Tutorial - A Simple Blog Example | Django/Python
https://www.youtube.com/watch?v=t61nTi0lIlk

* Using pandoc to convert Markdown to HTML
https://www.youtube.com/watch?v=sZBmoiFTJVY
* Test codeblock for org2html 
python code 
#+begin_src python
tuple_1 = ('History', 'Math', 'Physics', 'CompSci')
tuple_2 = tuple_1

print(tuble_1)
print(tuble_2)

tuple_1[0] = 'Art'                    # Error because tubles are immutable
#+end_src

shell scripts
#+begin_src sh
cd test/file
aws cloudformation deploy --template-file pipelinecf.yaml --stack-name pipeline-build --parameter-overrides Key1=Value1 Key2=Value2 --tags Key1=Value1 Key2=Value2
#+end_src

json file 
#+begin_src json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "codepipeline.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
#+end_src

yml
#+begin_src yaml
version: '3.1'  # if no version is specified then v1 is assumed. Recommend v2 minimum

services:  # containers. same as docker run
  <servicename>: # a friendly name. this is also DNS name inside network
    image: # Optional if you use build:
    build:
        context : . # current directory
        dockerfile: #Name of Dockerfile
    command: # Optional, replace the default CMD specified by the image
    environment: # Optional, same as -e in docker run
    secrets:
    volumes: # Optional, same as -v in docker run
    depends_on: # need to run other servers before running this servier

  servicename2:

volumes: # Optional, same as docker volume create
networks: # Optional, same as docker network create
secrets:
#+end_src



cpp
#+begin_src cpp
#include<iostream>
using namespace std;
int main(){
    int i =5;
    cout<<i<< "Data type" <<i<<"Hello World !"<<endl;
    return 0;
}
#+end_src

#+begin_src cpp
int main()
{
  // Normal Const 
  
  const int MAX_AGE =90;
  int const MAX_AGE =90;


  // Normal Pointer pointing a cont var 
  
  int* a = new int;     // create a normal pointer 
  *a  = 2;              // ASSINING VALUE 
  a = (int*) &MAX_AGE;  // poin A cosnt value 
  cout << a<<endl;

  // Pointer pointing to a constant value
  const int * a  = new int;
  int const * a  = new int;      //Both give same result as const is left side of  * 
  *a =2;                        //Error we can't  modify contant(value) of pointer
  a = (int*) &MAX_AGE;
  cout << a<<endl;

  // Pointer pointing to a constant address

  int * const a = new int;
  *a = 2;
  a = (int*) &MAX_AGE;   // Error : we created pointer to point constant address 
  cout << a << endl;


  // Pointer pointing to a constant address and constant value
  const int* const a  = new int;
  int const * const a = new int;
  *a = 2;                // Error : we created pointer pointing to value
  a = (int*) &MAX_AGE;   // Error : we created pointer to point constant address 
  cout << a << endl;

  std::cin.get();
}
#+end_src


html
#+begin_src html
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to DeepAlgorithms!</h1>
<p>If you see this page, the test ECS web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
#+end_src


css
#+begin_src css
/*
 * I add this to html files generated with pandoc.
 * source link : https://gist.github.com/killercup/5917178
 * From the command line you now need to use --css=pandoc.css or -c pandoc.css not --css pandoc.css
 * pandoc -c pandoc.css -s in.md -o out.html  
 */

html {
  font-size: 100%;
  overflow-y: scroll;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}

body {
  color: #444;
  font-family: Georgia, Palatino, 'Palatino Linotype', Times, 'Times New Roman', serif;
  font-size: 12px;
  line-height: 1.7;
  padding: 1em;
  margin: auto;
  max-width: 42em;
  background: #fefefe;
}

a {
  color: #0645ad;
  text-decoration: none;
}

a:visited {
  color: #0b0080;
}

a:hover {
  color: #06e;
}

a:active {
  color: #faa700;
}

a:focus {
  outline: thin dotted;
}

*::-moz-selection {
  background: rgba(255, 255, 0, 0.3);
  color: #000;
}

*::selection {
  background: rgba(255, 255, 0, 0.3);
  color: #000;
}

a::-moz-selection {
  background: rgba(255, 255, 0, 0.3);
  color: #0645ad;
}

a::selection {
  background: rgba(255, 255, 0, 0.3);
  color: #0645ad;
}

p {
  margin: 1em 0;
}

img {
  max-width: 100%;
}

h1, h2, h3, h4, h5, h6 {
  color: #111;
  line-height: 125%;
  margin-top: 2em;
  font-weight: normal;
}

h4, h5, h6 {
  font-weight: bold;
}

h1 {
  font-size: 2.5em;
}

h2 {
  font-size: 2em;
}

h3 {
  font-size: 1.5em;
}

h4 {
  font-size: 1.2em;
}

h5 {
  font-size: 1em;
}

h6 {
  font-size: 0.9em;
}

blockquote {
  color: #666666;
  margin: 0;
  padding-left: 3em;
  border-left: 0.5em #EEE solid;
}

hr {
  display: block;
  height: 2px;
  border: 0;
  border-top: 1px solid #aaa;
  border-bottom: 1px solid #eee;
  margin: 1em 0;
  padding: 0;
}

pre, code, kbd, samp {
  color: #000;
  font-family: monospace, monospace;
  _font-family: 'courier new', monospace;
  font-size: 0.98em;
}

pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word;
}

b, strong {
  font-weight: bold;
}

dfn {
  font-style: italic;
}

ins {
  background: #ff9;
  color: #000;
  text-decoration: none;
}

mark {
  background: #ff0;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

ul, ol {
  margin: 1em 0;
  padding: 0 0 0 2em;
}

li p:last-child {
  margin-bottom: 0;
}

ul ul, ol ol {
  margin: .3em 0;
}

dl {
  margin-bottom: 1em;
}

dt {
  font-weight: bold;
  margin-bottom: .8em;
}

dd {
  margin: 0 0 .8em 2em;
}

dd:last-child {
  margin-bottom: 0;
}

img {
  border: 0;
  -ms-interpolation-mode: bicubic;
  vertical-align: middle;
}

figure {
  display: block;
  text-align: center;
  margin: 1em 0;
}

figure img {
  border: none;
  margin: 0 auto;
}

figcaption {
  font-size: 0.8em;
  font-style: italic;
  margin: 0 0 .8em;
}

table {
  margin-bottom: 2em;
  border-bottom: 1px solid #ddd;
  border-right: 1px solid #ddd;
  border-spacing: 0;
  border-collapse: collapse;
}

table th {
  padding: .2em 1em;
  background-color: #eee;
  border-top: 1px solid #ddd;
  border-left: 1px solid #ddd;
}

table td {
  padding: .2em 1em;
  border-top: 1px solid #ddd;
  border-left: 1px solid #ddd;
  vertical-align: top;
}

.author {
  font-size: 1.2em;
  text-align: center;
}

@media only screen and (min-width: 480px) {
  body {
    font-size: 14px;
  }
}
@media only screen and (min-width: 768px) {
  body {
    font-size: 16px;
  }
}
@media print {
  * {
    background: transparent !important;
    color: black !important;
    filter: none !important;
    -ms-filter: none !important;
  }

  body {
    font-size: 12pt;
    max-width: 100%;
  }

  a, a:visited {
    text-decoration: underline;
  }

  hr {
    height: 1px;
    border: 0;
    border-bottom: 1px solid black;
  }

  a[href]:after {
    content: " (" attr(href) ")";
  }

  abbr[title]:after {
    content: " (" attr(title) ")";
  }

  .ir a:after, a[href^="javascript:"]:after, a[href^="#"]:after {
    content: "";
  }

  pre, blockquote {
    border: 1px solid #999;
    padding-right: 1em;
    page-break-inside: avoid;
  }

  tr, img {
    page-break-inside: avoid;
  }

  img {
    max-width: 100% !important;
  }

  @page :left {
    margin: 15mm 20mm 15mm 10mm;
}

  @page :right {
    margin: 15mm 10mm 15mm 20mm;
}

  p, h2, h3 {
    orphans: 3;
    widows: 3;
  }

  h2, h3 {
    page-break-after: avoid;
  }
}
#+end_src



#+begin_quote
test quote
quote2
quote3
#+end_quote

#+begin_example
test example
test2
test3
#+end_example


#+begin_verse
sdfadsfasfd
#+end_verse



Test *sfafd* /asfda/ _asdf_ =safdfaff= +asdfs+  

css has code text
in simple_inline
#+begin_src css
pre, code  {
      font-family:  "Source Pro",  Monaco,  "Courier New",  monospace;
      padding-left:  0.3em;
      padding-right:  0.3em;
}
.outline-text-2 code,  pre  {
      background-color:  #EEE;
}
*, *:before, *:after  {
      -moz-box-sizing:  border-box;
      -webkit-box-sizing:  border-box;
      box-sizing:  border-box;
}
#+end_src

gray css  code block 
#+begin_src css
p > code, li > code {
    background-color: #eee;
    padding: 0.25em;
}
code {
    font-family: "Inconsolata", "monospace";
    font-size: 16px;
}
body {
    font-family: Helvetica, Arial, sans-serif;
    font-size: 16px;
    line-height: 1.4;
    color: #33333f;
}

#+end_src


quote color
#+begin_src css
blockquote {
    background-color: #C5ECAB;
    border-left: 5px solid #6FEF05;
    font-style: italic;
    line-height: 24px;
    margin: 0px 0px 24px 0px;
    margin-left: 24px;
    padding: 6px 20px;
}
*{
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
body {
    color: #404040;
    font-family: "Lato","proxima-nova","Helvetica Neue",Arial,sans-serif;
    font-weight: normal;
}
#+end_src

#+begin_src css
blockquote {
    background-color: #ddffdd;
    border-left: 5px solid #4caf50;
    background-color: #ffeb3b;
    border-left: 5px solid #ffc107;
    background-color: #ffffcc;
    border-left: 5px solid #ffeb3b;
    background-color: #ffdddd;
    border-left: 5px solid #f44336;
    font-style: italic;
    line-height: 24px;
    margin: 0px 0px 24px 0px;
    margin-left: 24px;
    padding: 6px 20px;
}
*{
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
body {
    color: #404040;
    font-family: "Lato","proxima-nova","Helvetica Neue",Arial,sans-serif;
    font-weight: normal;
}
#+end_src
