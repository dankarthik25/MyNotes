#+TITLE:     CloudFormation-Udemy
#+AUTHOR:    DeepAlgorithms
#+OPTIONS: num:nil
#+SETUPFILE: ~/mynotes/org2html/org-theme-collection/theme2.setup
#+HTML_HEAD: <link rel="icon" type="image/png" href="https://deepalgorithms.in/images/favicon.png">

arn : Amazon Resouces Number : which is fixed/unique inside a account

* Cloud Formation Template 
 Templates componets 
 - *Resources :* Your AWS resources declared in the template (MANDATORY)
 - *Paramters :* Dynamic inputs for your tempalate
 - *Mappings :* Static varaibles for your template
 - *Outputs :* Reference to what has been created
 - *Conditionals :* List of conditions to perform resource creation
 - *Metadata :*            
 - *Helpers*:
   - *References* :
   - *Functions* :

* Stack Concept with EC2 instnce Example 
** Create EC2 instance
#+begin_src yaml 
AWSTemplateFormatVersion: 2010-09-09
Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
#+end_src
** Update Key
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: cfn-key-1
#+end_src
** Change Key
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: cfn-key-2
#+end_src

#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.small
      KeyName: cfn-key-2
#+end_src

** Update Rollback
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.small
      KeyName: cfn-key-3
#+end_src
** Invalid Template
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.small
      KeyName: cfn-key-3
#+end_src

* Run Stack from Console
* TODO Run Stack from awscli 
* Resources with EC2-instance Example
** Crearte EC2 instance 
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Basic EC2 Instance.

Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: cfn-key-1
      SecurityGroups:
        - default
#+end_src
** add new security group
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Basic EC2 Instance.

Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: cfn-key-1
      SecurityGroups:
        - default
        - !Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: my new SSH SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src
** add new rule
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Basic EC2 Instance.

Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: cfn-key-1
      SecurityGroups:
        - default
        - !Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: my new SSH SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
  
#+end_src
** Add Elastic IP
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Basic EC2 Instance.

Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: cfn-key-1
      SecurityGroups:
        - default
        - !Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: my new SSH SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0

  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref DevEC2Instance           
#+end_src

#+end_src

** Test or Check CaseSensitive
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Basic EC2 Instance.

Resources:
  DevEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: cfn-key-1
      SecurityGroups:
        - default
        - !Ref SSHSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: my new SSH SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8081'
          ToPort: '8081'
          CidrIP: 0.0.0.0/0          

  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref DevEC2Instance
#+end_src
* Parameter Types 
** Paramter Type : KeyName
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: KeyName Parameter demo

Parameters:
  MyKeyName:
    Description: Select the key name from the list
    Type: AWS::EC2::KeyPair::KeyName

Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      SecurityGroups:
        - default        
        - !Ref SSHSecurityGroup 
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: my new SSH security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src
** Parameter Type: String
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: AZ Parameter demo

Parameters:
  MyKeyName:
    Description: Select the key name from the list
    Type: AWS::EC2::KeyPair::KeyName
  MyAvailabilityZone:
    Description: Select the AZ
    Type: String
    Default: us-east-2a
    AllowedValues:
      - us-east-2a
      - us-east-2b    
      - us-east-2c

Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      SecurityGroups:
        - default        
        - !Ref SSHSecurityGroup 
      AvailabilityZone: !Ref MyAvailabilityZone      
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: my new SSH security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src

** Parameter Type: InstanceType
#+begin_src yaml 
AWSTemplateFormatVersion: 2010-09-09
Description: AZ Parameter demo

Parameters:
  MyKeyName:
    Description: Select the key name from the list
    Type: AWS::EC2::KeyPair::KeyName
  MyAvailabilityZone:
    Description: Select the AZ
    Type: String
    Default: us-east-2a
    AllowedValues:
      - us-east-2a
      - us-east-2b    
      - us-east-2c
  MyInstanceType:
    Description: Select the ec2 instance type from list
    Type: String      
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small

Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: !Ref MyInstanceType
      KeyName: !Ref MyKeyName
      SecurityGroups:
        - default        
        - !Ref SSHSecurityGroup 
      AvailabilityZone: !Ref MyAvailabilityZone      
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: my new SSH security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src

** Parameter Type: SSM
AWS Systems Manager Parameter Store (SSM) provides you with a secure way to store config variables for your applications. You can access SSM via AWS API directly from within the app or just use from AWS CLI. SSM can store plaintext parameters or KMS encrypted secure strings. Since parameters are identified by ARNs, you can set a fine grain access control to your configuration bits with IAM. A truely versatile service !

Common use cases of SSM are storing configuration for Docker containers initialisation during the runtime, storing secrets for Lambda functions and app, and even using SSM Parameters in CloudFormation.


*$1^{st}$ Step:* Create SSM Parameter   *AWS Systems Manager Parameter Store* [[https://www.youtube.com/watch?v=zxi3M_rIE2k][Youtube Tutorial Link ]]  \\
*$2^{nd}$ Step:* Create a stack using below ssm.yml \\
*$3^{rd}$ Step:* Choose your paramter name in ssm \\
#+begin_src yaml 
AWSTemplateFormatVersion: 2010-09-09
Description: AZ Parameter demo

Parameters:
  MyKeyName:
    Description: Select the key name from the list
    Type: AWS::EC2::KeyPair::KeyName
  MyAvailabilityZone:
    Description: Select the AZ
    Type: String
    Default: us-east-2a
    AllowedValues:
      - us-east-2a
      - us-east-2b    
      - us-east-2c
  MyInstanceType:
    Description: Select the ec2 instance type from SSM
    Type: AWS::SSM::Parameter::Value<String>

Resources: 
  DevEC2Instance: 
    Type: 'AWS::EC2::Instance'
    Properties: 
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: !Ref MyInstanceType
      KeyName: !Ref MyKeyName
      SecurityGroups:
        - default        
        - !Ref SSHSecurityGroup 
      AvailabilityZone: !Ref MyAvailabilityZone      
  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: my new SSH security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src
* Mapping with Example
** Base Stack 
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: t2.micro
      KeyName: cfn-key-1
#+end_src
** Mapping AMI
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  MyKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the keypair

Mappings:
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044     

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
#+end_src
** Mapping AMI with Environment
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  MyKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select the keypair
  EnvironmentName:
    Description: Select the environment
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod


Mappings:
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044     

  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small      

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
#+end_src

* Condition
** Syntax
[[file:./Images/Screenshots_2023-02-25T14-32-53.png]]
** Condtion Intrinsic Function
- Fn::And
- Fn::Equals
- Fn::If
- Fn::Not
- Fn::Or
      
** Base
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Conditions Practice

Parameters:
  MyKeyName:
    Description: Select Key name
    Type: AWS::EC2::KeyPair::KeyName
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044

  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small            

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
#+end_src
** InstrinsicFunction-Fn-Equals
Create a Elastic IP when environment is prod, use intrinsic Fn::Equals
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Conditions Practice

Parameters:
  MyKeyName:
    Description: Select Key name
    Type: AWS::EC2::KeyPair::KeyName
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044

  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small            

Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]


Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName

  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyVMInstance
#+end_src
** if PseudoParameter-NoValue
Create a security group for dev environment when condition is met and demonsttrate Pesudo parameter "AWS::NoValue" for when environment is prod. Use Instrinsic function Fn::If

#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Conditions Practice

Parameters:
  MyKeyName:
    Description: Select Key name
    Type: AWS::EC2::KeyPair::KeyName
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044

  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small            

Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, dev]

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref DevEnvSecurityGroup], !Ref 'AWS::NoValue']  

  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyVMInstance

  DevEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: DevSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src
** Fn-if
Create a security group for prod env with  prod related conditon added. Use Intrinsic function  Fn::If
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Conditions Practice

Parameters:
  MyKeyName:
    Description: Select Key name
    Type: AWS::EC2::KeyPair::KeyName
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044

  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small            

Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Equals [!Ref EnvironmentName, dev]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref DevEnvSecurityGroup], [!Ref ProdEnvSecurityGroup]]  

  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyVMInstance

  DevEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: DevSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  ProdEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateProdSecurityGroup
    Properties:
      GroupDescription: ProdSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src
** Fn-Not
Demonstate Fn::Not 
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Conditions Practice

Parameters:
  MyKeyName:
    Description: Select Key name
    Type: AWS::EC2::KeyPair::KeyName
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
      - qa
    ConstraintDescription: must be development or production or qa     

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044

  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small  
    qa:
      instanceType: t2.medium                

Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Not [{Condition: CreateProdSecurityGroup}]


Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref DevEnvSecurityGroup], [!Ref ProdEnvSecurityGroup]]  

  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyVMInstance

  DevEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: DevSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  ProdEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateProdSecurityGroup
    Properties:
      GroupDescription: ProdSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src
** Fn-Or
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Conditions Practice

Parameters:
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
      - qa
    ConstraintDescription: must be development or production or qa     

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044

  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small  
    qa:
      instanceType: t2.medium                

Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Not [{Condition: CreateProdSecurityGroup}]
  IfRegionUseKeyName: !Or [!Equals [!Ref 'AWS::Region', us-east-2], !Equals [!Ref 'AWS::Region', us-west-1]]

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !If [IfRegionUseKeyName, cfn-key-1, cfn-key-2]
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref DevEnvSecurityGroup], [!Ref ProdEnvSecurityGroup]]  

  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyVMInstance

  DevEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: DevSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  ProdEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateProdSecurityGroup
    Properties:
      GroupDescription: ProdSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src
** Fn-And
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Conditions Practice

Parameters:
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
      - qa
    ConstraintDescription: must be development or production or qa     

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044

  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small  
    qa:
      instanceType: t2.medium                

Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]
  CreateProdSecurityGroup: !Equals [!Ref EnvironmentName, prod]
  CreateDevSecurityGroup: !Not [{Condition: CreateProdSecurityGroup}]
  IfRegionUseKeyName: !And [!Or [!Equals [!Ref 'AWS::Region', us-east-2], !Equals [!Ref 'AWS::Region', us-west-1]], !Equals [!Ref EnvironmentName, dev]]

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref EnvironmentName
        - instanceType
      KeyName: !If [IfRegionUseKeyName, cfn-key-1, cfn-key-2]
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref DevEnvSecurityGroup], [!Ref ProdEnvSecurityGroup]]  

  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties:
      InstanceId: !Ref MyVMInstance

  DevEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: DevSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  ProdEnvSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateProdSecurityGroup
    Properties:
      GroupDescription: ProdSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src


* Output
*** Base
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Outputs practice

Parameters:
  MyKeyName:
    Description: Select the Key Name
    Type: AWS::EC2::KeyPair::KeyName
  MyEnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small   

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !Ref MyDevGlobalSecurityGroup

  MyDevGlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My Dev environment Global Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#+end_src
*** InstanceID
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Outputs practice

Parameters:
  MyKeyName:
    Description: Select the Key Name
    Type: AWS::EC2::KeyPair::KeyName
  MyEnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small   

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !Ref MyDevGlobalSecurityGroup

  MyDevGlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My Dev environment Global Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

Outputs:
  MyInstanceId:
    Description: My instance id
    Value: !Ref MyVMInstance
#+end_src
*** Instrinsic Fn::GetAtt
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Outputs practice

Parameters:
  MyKeyName:
    Description: Select the Key Name
    Type: AWS::EC2::KeyPair::KeyName
  MyEnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small   

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !Ref MyDevGlobalSecurityGroup

  MyDevGlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My Dev environment Global Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

Outputs:
  MyInstanceId:
    Description: My instance id
    Value: !Ref MyVMInstance
  MyDNSName:
    Description: My Public DNS Name
    Value: !GetAtt MyVMInstance.PublicDnsName
  MyInstanceAvailabilityZone:
    Description: Instance Availability Zone
    Value: !GetAtt MyVMInstance.AvailabilityZone
#+end_src
*** Export Intrinsic Fn::Sub Pseudo StakName
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Outputs practice

Parameters:
  MyKeyName:
    Description: Select the Key Name
    Type: AWS::EC2::KeyPair::KeyName
  MyEnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small   

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !Ref MyDevGlobalSecurityGroup

  MyDevGlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My Dev environment Global Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

Outputs:
  MyInstanceId:
    Description: My instance id
    Value: !Ref MyVMInstance
  MyDNSName:
    Description: My Public DNS Name
    Value: !GetAtt MyVMInstance.PublicDnsName
  MyInstanceAvailabilityZone:
    Description: Instance Availability Zone
    Value: !GetAtt MyVMInstance.AvailabilityZone    
    Export: 
      Name: !Sub "${AWS::StackName}-InstanceAz"
  MyDevGlobalSecurityGroup:
    Description: My Dev SG
    Value: !Ref MyDevGlobalSecurityGroup
    Export:
      Name: MyDevSSHGlobalSG
#+end_src
*** Cross Refeence Intrinsic Fn::ImportValue
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Outputs practice

Parameters:
  MyKeyName:
    Description: Select the Key Name
    Type: AWS::EC2::KeyPair::KeyName
  MyEnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small   

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: 
        - !ImportValue MyDevSSHGlobalSG
      AvailabilityZone: !ImportValue stack1-InstanceAz
#+end_src
*** Output Conditions
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Outputs practice

Parameters:
  MyKeyName:
    Description: Select the Key Name
    Type: AWS::EC2::KeyPair::KeyName
  MyEnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small   

Conditions:
  CreateDevSecurityGroup: !Equals [!Ref MyEnvironmentName, dev]

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref MyDevGlobalSecurityGroup], !Ref 'AWS::NoValue']
        

  MyDevGlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: My Dev environment Global Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

Outputs:
  MyInstanceId:
    Description: My instance id
    Value: !Ref MyVMInstance
  MyDNSName:
    Description: My Public DNS Name
    Value: !GetAtt MyVMInstance.PublicDnsName
  MyInstanceAvailabilityZone:
    Description: Instance Availability Zone
    Value: !GetAtt MyVMInstance.AvailabilityZone    
    Export: 
      Name: !Sub "${AWS::StackName}-InstanceAz"
  MyDevGlobalSecurityGroup:
    Description: My Dev SG
    Value: !Ref MyDevGlobalSecurityGroup
    Condition: CreateDevSecurityGroup
    Export:
      Name: MyDevSSHGlobalSG
#+end_src
*** Output Export Intrinsic Fn:Join
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: Outputs practice

Parameters:
  MyKeyName:
    Description: Select the Key Name
    Type: AWS::EC2::KeyPair::KeyName
  MyEnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      

Mappings:     
  MyRegionMap:
    us-east-2:
      HVM64: ami-0cd3dfa4e37921605
    us-west-1:
      HVM64: ami-0ec6517f6edbf8044
  MyEnvironmentMap:
    dev:
      instanceType: t2.micro
    prod:
      instanceType: t2.small   

Conditions:
  CreateDevSecurityGroup: !Equals [!Ref MyEnvironmentName, dev]

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap
        - MyRegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !FindInMap
        - MyEnvironmentMap
        - !Ref MyEnvironmentName
        - instanceType
      KeyName: !Ref MyKeyName
      SecurityGroups: !If [CreateDevSecurityGroup, [!Ref MyDevGlobalSecurityGroup], !Ref 'AWS::NoValue']
        

  MyDevGlobalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateDevSecurityGroup
    Properties:
      GroupDescription: My Dev environment Global Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

Outputs:
  MyInstanceId:
    Description: My instance id
    Value: !Ref MyVMInstance
  MyDNSName:
    Description: My Public DNS Name
    Value: !GetAtt MyVMInstance.PublicDnsName
  MyInstanceAvailabilityZone:
    Description: Instance Availability Zone
    Value: !GetAtt MyVMInstance.AvailabilityZone    
    Export: 
      Name: !Sub "${AWS::StackName}-InstanceAz"
  MyDevGlobalSecurityGroup:
    Description: My Dev SG
    Value: !Ref MyDevGlobalSecurityGroup
    Condition: CreateDevSecurityGroup
    Export:
      Name: !Join ["-", [!Ref 'AWS::StackName', MyDevSSHGlobalSG]]
#+end_src

* MetaData
*** Base
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      
  InstanceType: 
    Description: Select the ec2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium
  KeyName:
    Description: Key name to SSH to VM's. 
    Type: AWS::EC2::KeyPair::KeyName
  AvailabilityZone:
    Description: select the availability zone
    Type: String
    Default: us-east-2a
    AllowedValues:
      - us-east-2a
      - us-east-2b
      - us-east-2c


Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]
  
Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
    
  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties: 
      InstanceId: !Ref MyVMInstance
#+end_src
*** Metadata Interface
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      
  InstanceType: 
    Description: Select the ec2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium
  KeyName:
    Description: Key name to SSH to VM's. 
    Type: AWS::EC2::KeyPair::KeyName
  AvailabilityZone:
    Description: select the availability zone
    Type: String
    Default: us-east-2a
    AllowedValues:
      - us-east-2a
      - us-east-2b
      - us-east-2c


Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Instance Configuration"    
        Parameters:
          - InstanceType
          - KeyName
          - AvailabilityZone  
      - Label:
          default: "Environment Configuration"          
        Parameters:
          - EnvironmentName  
    ParameterLabels:
      EnvironmentName:
        default: "Which environment we are planning to create this instance?"
      KeyName:
        default: "Be aware that once keyname is selected we cannot change it unless instance replaced"

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
    
  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties: 
      InstanceId: !Ref MyVMInstance
#+end_src
* EC2 UserData
*** Base
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      
  InstanceType: 
    Description: Select the ec2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium
  KeyName:
    Description: Key name to SSH to VM's. 
    Type: AWS::EC2::KeyPair::KeyName
  AvailabilityZone:
    Description: select the availability zone
    Type: String
    Default: us-east-2a
    AllowedValues:
      - us-east-2a
      - us-east-2b
      - us-east-2c


Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Instance Configuration"    
        Parameters:
          - InstanceType
          - KeyName
          - AvailabilityZone  
      - Label:
          default: "Environment Configuration"          
        Parameters:
          - EnvironmentName  
    ParameterLabels:
      EnvironmentName:
        default: "Which environment we are planning to create this instance?"
      KeyName:
        default: "Be aware that once keyname is selected we cannot change it unless instance replaced"

Resources:
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
    
  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties: 
      InstanceId: !Ref MyVMInstance
#+end_src

*** shell script
#+begin_src sh
#file name: 10-00-Userdata
          #!/bin/bash
          sudo yum update
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          service tomcat8 start
          mkdir /usr/share/tomcat8/webapps/ROOT
          touch /usr/share/tomcat8/webapps/ROOT/index.html
          echo "Cloud Formation Tomcat8" > /usr/share/tomcat8/webapps/ROOT/index.html
#+end_src
*** UserData
#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvironmentName:
    Description: Select the environment 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - prod
    ConstraintDescription: must be development or production      
  InstanceType: 
    Description: Select the ec2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium
  KeyName:
    Description: Key name to SSH to VM's. 
    Type: AWS::EC2::KeyPair::KeyName
  AvailabilityZone:
    Description: select the availability zone
    Type: String
    Default: us-east-2a
    AllowedValues:
      - us-east-2a
      - us-east-2b
      - us-east-2c


Conditions:
  CreateEIPForProd: !Equals [!Ref EnvironmentName, prod]

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Instance Configuration"    
        Parameters:
          - InstanceType
          - KeyName
          - AvailabilityZone  
      - Label:
          default: "Environment Configuration"          
        Parameters:
          - EnvironmentName  
    ParameterLabels:
      EnvironmentName:
        default: "Which environment we are planning to create this instance?"
      KeyName:
        default: "Be aware that once keyname is selected we cannot change it unless instance replaced"

Resources:
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My SG with port 22, 8080 and 80 inbound
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'          
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
 
  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0cd3dfa4e37921605
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroups:
        - !Ref MySecurityGroup
      UserData: 
        Fn::Base64: |  
          #!/bin/bash
          sudo yum update
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          service tomcat8 start
          mkdir /usr/share/tomcat8/webapps/ROOT
          touch /usr/share/tomcat8/webapps/ROOT/index.html
          echo "Cloud Formation Tomcat8" > /usr/share/tomcat8/webapps/ROOT/index.html
      
    
  MyProdEIP:
    Type: AWS::EC2::EIP
    Condition: CreateEIPForProd
    Properties: 
      InstanceId: !Ref MyVMInstance

      
Outputs:
  AppURL:
    Description: Tomcat App Access URL
    Value: !Sub 'http://${MyVMInstance.PublicDnsName}:8080/index.html'
#+end_src

* CFN-init
* Configsets
* NestedStacks
*** NestedStack VPC
#+begin_src yaml
#https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_EC2.html
AWSTemplateFormatVersion: '2010-09-09'
Description: VPC Nested Stack Template

Parameters:
  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR Tange
      
  Subnet01Block:
    Type: String
    Default: 10.0.1.0/24
    Description: CidrBlock for Subnet 01 within the VPC.        

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Dev VPC Network Configuration
          Parameters:
            - VpcBlock
            - Subnet01Block        
    ParameterLabels:
      VpcBlock:
        default: VPC CIDR Range selection                        

Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-myVPC"

  Subnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref Subnet01Block 
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet01"    
      AvailabilityZone: 
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC               
      Tags: 
        - Key: Name
          Value: Public Subnets
        - Key: Network
          Value: Public          

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref RouteTable
      
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref myVPC    

  Route: 
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable  
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway    

Outputs:
  Subnet01Id:
    Description: Subnet 01 Id
    Value: !Ref Subnet01

  VpcId:
    Description: Vpc Id
    Value: !Ref myVPC
#+end_src

*** Root Stack EC2-VPC
#+begin_src yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: Root Stack Template

Parameters:
  MyKeyName:
    Type: AWS::EC2::KeyPair::KeyName

  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR Tange
      
  Subnet01Block:
    Type: String
    Default: 10.0.1.0/24
    Description: CidrBlock for Subnet 01 within the VPC.    

Resources:

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.us-east-2.amazonaws.com/nestedbucket0189/nestedstacks/13-01-NestedStack-VPC.yml 
      Parameters:  
        VpcBlock: !Ref VpcBlock
        Subnet01Block: !Ref Subnet01Block 
      TimeoutInMinutes: 5            


  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04768381bf606e2b3
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !GetAtt VPCStack.Outputs.Subnet01Id
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          sudo yum update
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          service tomcat8 start
          mkdir /usr/share/tomcat8/webapps/ROOT
          touch /usr/share/tomcat8/webapps/ROOT/index.html
          echo "Cloud Formation Tomcat8" > /usr/share/tomcat8/webapps/ROOT/index.html

Outputs:
  AppURL:
    Description: Application URL to access
    Value: !Sub 'http://${MyVMInstance.PublicDnsName}:8080/index.html'
#+end_src


*** NestedStack-SG
#+begin_src yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: Root Stack Template

Parameters:
  VPCId: 
    Description: Create security group in this respective VPC
    Type: AWS::EC2::VPC::Id


Resources:
  DevSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Dev Apps Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPCId

Outputs:
  DevSGGroupId:
    Description: Dev Security Group
    Value: !Ref DevSecurityGroup                   
#+end_src
*** RootStack -ECE-SG
#+begin_src yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: Root Stack Template

Parameters:
  MyKeyName:
    Type: AWS::EC2::KeyPair::KeyName

  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR Tange
      
  Subnet01Block:
    Type: String
    Default: 10.0.1.0/24
    Description: CidrBlock for Subnet 01 within the VPC.    

Resources:

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.us-east-2.amazonaws.com/nestedbucket0189/nestedstacks/13-01-NestedStack-VPC.yml 
      Parameters:  
        VpcBlock: !Ref VpcBlock
        Subnet01Block: !Ref Subnet01Block 
      TimeoutInMinutes: 5            

  SecurityGroupStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.us-east-2.amazonaws.com/nestedbucket0189/nestedstacks/13-03-NestedStack-SG.yml
      Parameters:
        VPCId: !GetAtt VPCStack.Outputs.VpcId
      TimeoutInMinutes: 5        

  MyVMInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04768381bf606e2b3
      InstanceType: t2.micro
      KeyName: !Ref MyKeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !GetAtt VPCStack.Outputs.Subnet01Id
          GroupSet:
            - !GetAtt SecurityGroupStack.Outputs.DevSGGroupId
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          sudo yum update
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          service tomcat8 start
          mkdir /usr/share/tomcat8/webapps/ROOT
          touch /usr/share/tomcat8/webapps/ROOT/index.html
          echo "Cloud Formation Tomcat8" > /usr/share/tomcat8/webapps/ROOT/index.html

Outputs:
  AppURL:
    Description: Application URL to access
    Value: !Sub 'http://${MyVMInstance.PublicDnsName}:8080/index.html'            
#+end_src
** Manual Steps to Create VPC
- Step #1: Create VPC
- Step #2: Create Subnet
- Step #3: Create Route Table (Ignore default Main Route Table)
- Step #4: Associate Subnet in Route Table
- Step #5: Create Internet Gateway
- Step #6: Associate Internet Gateway to VPC
- Step #7: Create Route to allow internet traffic via IGW

VPC -- YES
Subnet  -- YES
Route Table   -- YES
Internet Gateway  -- YES
#+begin_src sh
          #!/bin/bash
          sudo yum update
          sudo yum -y erase java-1.7.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk.x86_64
          sudo yum -y install java-1.8.0-openjdk-devel
          sudo yum -y install tomcat8
          service tomcat8 start
          mkdir /usr/share/tomcat8/webapps/ROOT
          touch /usr/share/tomcat8/webapps/ROOT/index.html
          echo "Cloud Formation Tomcat8" > /usr/share/tomcat8/webapps/ROOT/index.html
#+end_src
* Continous Delivery
* Infrasturcture As Code
* StackPolicy
* Additional Templates

